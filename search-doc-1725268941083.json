{"searchDocs":[{"title":"Touying 0.2.0","type":0,"sectionRef":"#","url":"/touying/blog/touying-0-2-0","content":"","keywords":"","version":null},{"title":"Implemented Features​","type":1,"pageTitle":"Touying 0.2.0","url":"/touying/blog/touying-0-2-0#implemented-features","content":"  Object-oriented programming: Singleton s, binding methods utils.methods(s) and (self: obj, ..) =&gt; {..} methods. Page arguments management: Instead of using #set page(..), you should use self.page-args to retrieve or set page parameters, thereby avoiding unnecessary creation of new pages. #pause for sequence content: You can use #pause at the outermost level of a slide, including inline and list. #pause for layout functions: You can use the composer parameter to add yourself layout function like utils.side-by-side, and simply use multiple pos parameters like #slide[..][..]. #meanwhile for synchronous display: Provide a #meanwhile for resetting subslides counter. #pause and #meanwhile for math equation: Provide a #touying-equation(&quot;x + y pause + z&quot;) for math equation animations. Slides: Create simple slides using standard headings. Callback-style uncover, only and alternatives: Based on the concise syntax provided by Polylux, allow precise control of the timing for displaying content. You should manually control the number of subslides using the repeat parameter. Transparent cover: Enable transparent cover using oop syntax like #let s = (s.methods.enable-transparent-cover)(self: s). Handout mode: enable handout mode by #let s = (s.methods.enable-handout-mode)(self: s). Fit-to-width and fit-to-height: Fit-to-width for title in header and fit-to-height for image. utils.fit-to-width(grow: true, shrink: true, width, body)utils.fit-to-height(width: none, prescale-width: none, grow: true, shrink: true, height, body) Slides counter: states.slide-counter.display() + &quot; / &quot; + states.last-slide-number and states.touying-progress(ratio =&gt; ..). Appendix: Freeze the last-slide-number to prevent the slide number from increasing further. Sections: Touying's built-in section support can be used to display the current section title and show progress. section and subsection parameter in #slide to register a new section or subsection. states.current-section-title to get the current section. states.touying-outline or s.methods.touying-outline to display a outline of sections. states.touying-final-sections(sections =&gt; ..) for custom outline display. states.touying-progress-with-sections((current-sections: .., final-sections: .., current-slide-number: .., last-slide-number: ..) =&gt; ..) for powerful progress display. Navigation bar: Navigation bar like here by states.touying-progress-with-sections(..), in dewdrop theme. Pdfpc: pdfpc support and export .pdfpc file without external tool by typst query command simply. ","version":null,"tagName":"h2"},{"title":"Build Your Own Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/build-your-own-theme","content":"Build Your Own Theme You can refer to the source code of themes. The main things to implement are: Customize the color theme by modifying self.colors.Customize the header.Customize the footer.Optionally, customize the alert function.Customize the slide function.Customize special slide functions, such as title-slide and focus-slide functions.Customize the slide-in-slides function, which will be called by the slides function.Optionally, customize the slides function.Customize the register function to initialize the global singleton s.Optionally, customize the init function. More detailed documentation to be added.","keywords":"","version":"0.2.x"},{"title":"Changelog","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/changelog","content":"","keywords":"","version":"0.2.x"},{"title":"v0.2.1​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.2.x/changelog#v021","content":" ","version":"0.2.x","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.2.x/changelog#features","content":" Touying-reducer: support cetz and fletcher animationuniversity theme: add university theme  ","version":"0.2.x","tagName":"h3"},{"title":"Fix​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.2.x/changelog#fix","content":" fix footer progress in metropolis themefix some bugs in simple and dewdrop themesfix bug that outline does not display more than 4 sections  ","version":"0.2.x","tagName":"h3"},{"title":"v0.2.0​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.2.x/changelog#v020","content":" Object-oriented programming: Singleton s, binding methods utils.methods(s) and (self: obj, ..) =&gt; {..} methods.Page arguments management: Instead of using #set page(..), you should use self.page-args to retrieve or set page parameters, thereby avoiding unnecessary creation of new pages.#pause for sequence content: You can use #pause at the outermost level of a slide, including inline and list.#pause for layout functions: You can use the composer parameter to add yourself layout function like utils.side-by-side, and simply use multiple pos parameters like #slide[..][..].#meanwhile for synchronous display: Provide a #meanwhile for resetting subslides counter.#pause and #meanwhile for math equation: Provide a #touying-equation(&quot;x + y pause + z&quot;) for math equation animations.Slides: Create simple slides using standard headings.Callback-style uncover, only and alternatives: Based on the concise syntax provided by Polylux, allow precise control of the timing for displaying content. You should manually control the number of subslides using the repeat parameter. Transparent cover: Enable transparent cover using oop syntax like #let s = (s.methods.enable-transparent-cover)(self: s).Handout mode: enable handout mode by #let s = (s.methods.enable-handout-mode)(self: s).Fit-to-width and fit-to-height: Fit-to-width for title in header and fit-to-height for image. utils.fit-to-width(grow: true, shrink: true, width, body)utils.fit-to-height(width: none, prescale-width: none, grow: true, shrink: true, height, body) Slides counter: states.slide-counter.display() + &quot; / &quot; + states.last-slide-number and states.touying-progress(ratio =&gt; ..).Appendix: Freeze the last-slide-number to prevent the slide number from increasing further.Sections: Touying's built-in section support can be used to display the current section title and show progress. section and subsection parameter in #slide to register a new section or subsection.states.current-section-title to get the current section.states.touying-outline or s.methods.touying-outline to display a outline of sections.states.touying-final-sections(sections =&gt; ..) for custom outline display.states.touying-progress-with-sections((current-sections: .., final-sections: .., current-slide-number: .., last-slide-number: ..) =&gt; ..) for powerful progress display. Navigation bar: Navigation bar like here by states.touying-progress-with-sections(..), in dewdrop theme.Pdfpc: pdfpc support and export .pdfpc file without external tool by typst query command simply. ","version":"0.2.x","tagName":"h2"},{"title":"Complex Animations","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/dynamic/complex","content":"","keywords":"","version":"0.2.x"},{"title":"Callback-Style Functions​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/0.2.x/dynamic/complex#callback-style-functions","content":" To overcome the limitations of styled and layout mentioned earlier, Touying cleverly implements always-effective only, uncover, and alternatives using callback functions. Specifically, you need to introduce these three functions as follows:  #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) In subslide #self.subslide, test #uncover(&quot;2-&quot;)[uncover] function, and test #only(&quot;2-&quot;)[only] function, #pause and paused text. ])     Notice that we no longer pass a content block but instead pass a callback function with a self parameter. Later, we extract only, uncover, and alternatives functions from self using:  #let (uncover, only, alternatives) = utils.methods(self)   We then call these functions in subsequent steps.  Here's an interesting fact: the self.subslide of type int indicates the current subslide index, and in fact, the only, uncover, and alternatives functions rely on self.subslide to determine the current subslide index.  Warning We manually specify the repeat: 3 parameter, indicating the display of 3 subslides. We need to do this manually because Touying cannot infer how many subslides only, uncover, and alternatives should display.  ","version":"0.2.x","tagName":"h2"},{"title":"only​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/0.2.x/dynamic/complex#only","content":" The only function means it &quot;appears&quot; only on selected subslides. If it doesn't appear, it completely disappears and doesn't occupy any space. In other words, #only(index, body) is either body or none.  The index can be an int type or a str type like &quot;2-&quot; or &quot;2-3&quot;. For more usage, refer to Polylux.  ","version":"0.2.x","tagName":"h2"},{"title":"uncover​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/0.2.x/dynamic/complex#uncover","content":" The uncover function means it &quot;displays&quot; only on selected subslides; otherwise, it will be covered by the cover function but still occupies the original space. In other words, #uncover(index, body) is either body or cover(body).  The index can be an int type or a str type like &quot;2-&quot; or &quot;2-3&quot;. For more usage, refer to Polylux.  You may also have noticed that #pause actually uses the cover function, providing a more convenient syntax. In reality, their effects are almost identical.  ","version":"0.2.x","tagName":"h2"},{"title":"alternatives​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/0.2.x/dynamic/complex#alternatives","content":" The alternatives function displays a series of different content in different subslides. For example:  #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) #alternatives[Ann][Bob][Christopher] likes #alternatives[chocolate][strawberry][vanilla] ice cream. ])     As you can see, alternatives can automatically expand to the most suitable width and height, a capability that only and uncover lack. In fact, alternatives has other parameters, such as start: 2, repeat-last: true, and position: center + horizon. For more usage, refer to Polylux. ","version":"0.2.x","tagName":"h2"},{"title":"Math Equation Animations","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/dynamic/equation","content":"","keywords":"","version":"0.2.x"},{"title":"Simple Animation​","type":1,"pageTitle":"Math Equation Animations","url":"/touying/docs/0.2.x/dynamic/equation#simple-animation","content":" Let's start with an example:  #slide[ Touying equation with pause: #touying-equation(` f(x) &amp;= pause x^2 + 2x + 1 \\ &amp;= pause (x + 1)^2 \\ `) #meanwhile Touying equation is very simple. ]     We use the touying-equation function to incorporate pause and meanwhile within the text of math equations (in fact, you can also use #pause or #pause;).  As you would expect, the math equation is displayed step by step, making it suitable for presenters to demonstrate their math reasoning.  Warning While the touying-equation function is convenient, you should always be aware that it doesn't perform complex syntax analysis. It simply splits the string using regular expressions. Therefore, you should not use pause or meanwhile within functions like display(..)!  ","version":"0.2.x","tagName":"h2"},{"title":"Complex Animation​","type":1,"pageTitle":"Math Equation Animations","url":"/touying/docs/0.2.x/dynamic/equation#complex-animation","content":" In fact, we can also use only, uncover, and alternatives within touying-equation with a little trick:  #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) #touying-equation(scope: (uncover: uncover), ` f(x) &amp;= pause x^2 + 2x + uncover(&quot;3-&quot;, 1) \\ &amp;= pause (x + 1)^2 \\ `) ])     We can pass the functions we need into the touying-equation through the scope parameter, such as uncover in this example.  ","version":"0.2.x","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Math Equation Animations","url":"/touying/docs/0.2.x/dynamic/equation#parameters","content":" The function definition of touying-equation is:  #let touying-equation(block: true, numbering: none, supplement: auto, scope: (:), body) = { .. }   Therefore, you can pass parameters like block, numbering, and supplement to touying-equation just like using normal math equations. ","version":"0.2.x","tagName":"h2"},{"title":"Cover Function","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/dynamic/cover","content":"","keywords":"","version":"0.2.x"},{"title":"Default Cover Function: hide​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/0.2.x/dynamic/cover#default-cover-function-hide","content":" The cover function is a method stored in s.methods.cover, which is later used by uncover and #pause.  The default cover function is the hide function. This function makes the internal content invisible without affecting the layout.  ","version":"0.2.x","tagName":"h2"},{"title":"Updating the Cover Function​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/0.2.x/dynamic/cover#updating-the-cover-function","content":" In some cases, you might want to use your own cover function. In that case, you can set your own cover function using:  let s = (s.methods.update-cover)(self: s, is-method: true, cover-fn)   Here, if you set is-method: false, Touying will wrap cover-fn into a method for you.  ","version":"0.2.x","tagName":"h2"},{"title":"Semi-Transparent Cover Function​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/0.2.x/dynamic/cover#semi-transparent-cover-function","content":" Touying supports a semi-transparent cover function, which can be enabled by adding:  #let s = (s.methods.enable-transparent-cover)(self: s)   You can adjust the transparency through the alpha: .. parameter.  Warning Note that the transparent-cover here does not preserve text layout like hide does because it adds an extra layer of box, which may disrupt the original structure of the page.  Internals The enable-transparent-cover method is defined as: #let s.methods.enable-transparent-cover = ( self: none, constructor: rgb, alpha: 85%, ) =&gt; { self.methods.cover = (self: none, body) =&gt; { utils.cover-with-rect( fill: utils.update-alpha( constructor: constructor, self.page-args.fill, alpha, ), body ) } self } It creates a semi-transparent rectangular mask with the same color as the background to simulate the effect of transparent content. Here, constructor: rgb and alpha: 85% indicate the background color's construction function and transparency level, respectively. ","version":"0.2.x","tagName":"h2"},{"title":"Handout Mode","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/dynamic/handout","content":"Handout Mode While watching slides and attending lectures, the audience often wishes to have handouts for reviewing challenging concepts. Therefore, it's beneficial for the author to provide handouts for the audience, preferably before the lecture for better preparation. The handout mode differs from the regular mode as it doesn't require intricate animation effects. It retains only the last subslide of each slide. Enabling handout mode is simple: #let s = (s.methods.enable-handout-mode)(self: s) ","keywords":"","version":"0.2.x"},{"title":"Simple Animations","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/dynamic/simple","content":"","keywords":"","version":"0.2.x"},{"title":"pause​","type":1,"pageTitle":"Simple Animations","url":"/touying/docs/0.2.x/dynamic/simple#pause","content":" The purpose of #pause is straightforward – it separates the subsequent content into the next subslide. You can use multiple #pause to create multiple subslides. Here's a simple example:  #slide[ First #pause Second #pause Third ]     This example will create three subslides, gradually revealing the content.  As you can see, #pause can be used inline or on a separate line.  ","version":"0.2.x","tagName":"h2"},{"title":"meanwhile​","type":1,"pageTitle":"Simple Animations","url":"/touying/docs/0.2.x/dynamic/simple#meanwhile","content":" In some cases, you may need to display additional content simultaneously with #pause. In such cases, you can use #meanwhile.  #slide[ First #pause Second #meanwhile Third #pause Fourth ]     This example will create only two subslides, with &quot;First&quot; and &quot;Third&quot; displayed simultaneously, and &quot;Second&quot; and &quot;Fourth&quot; displayed simultaneously.  ","version":"0.2.x","tagName":"h2"},{"title":"Handling set-show rules​","type":1,"pageTitle":"Simple Animations","url":"/touying/docs/0.2.x/dynamic/simple#handling-set-show-rules","content":" If you use set-show rules inside slide[..], you might be surprised to find that subsequent #pause and #meanwhile do not work. This is because Touying cannot detect the content inside styled(..) (content after set-show rules is encompassed by styled).  To address this issue, Touying provides a setting parameter for the #slide() function. You can place your set-show rules in the setting parameter. For example, changing the font color:  #slide(setting: body =&gt; { set text(fill: blue) body })[ First #pause Second ]     Similarly, Touying currently does not support #pause and #meanwhile inside layout functions like grid. This is due to the same limitation, but you can use the composer parameter of #slide() to meet most requirements.  Internals Touying doesn't rely on counter and locate to implement #pause. Instead, it has a parser written in Typst script. It parses the input content block as a sequence and then transforms and reorganizes this sequence into the series of subslides we need. ","version":"0.2.x","tagName":"h2"},{"title":"Pdfpc","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/external/pdfpc","content":"","keywords":"","version":"0.2.x"},{"title":"Adding Metadata​","type":1,"pageTitle":"Pdfpc","url":"/touying/docs/0.2.x/external/pdfpc#adding-metadata","content":" Touying remains consistent with Polylux to avoid conflicts between APIs.  For example, you can add notes using #pdfpc.speaker-note(&quot;This is a note that only the speaker will see.&quot;).  ","version":"0.2.x","tagName":"h2"},{"title":"Pdfpc Configuration​","type":1,"pageTitle":"Pdfpc","url":"/touying/docs/0.2.x/external/pdfpc#pdfpc-configuration","content":" To add pdfpc configurations, you can use  #let s = (s.methods.append-preamble)(self: s, pdfpc.config( duration-minutes: 30, start-time: datetime(hour: 14, minute: 10, second: 0), end-time: datetime(hour: 14, minute: 40, second: 0), last-minutes: 5, note-font-size: 12, disable-markdown: false, default-transition: ( type: &quot;push&quot;, duration-seconds: 2, angle: ltr, alignment: &quot;vertical&quot;, direction: &quot;inward&quot;, ), ))   Add the corresponding configurations. Refer to Polylux for specific configuration details.  ","version":"0.2.x","tagName":"h2"},{"title":"Exporting .pdfpc File​","type":1,"pageTitle":"Pdfpc","url":"/touying/docs/0.2.x/external/pdfpc#exporting-pdfpc-file","content":" Assuming your document is ./example.typ, you can export the .pdfpc file directly using:  typst query --root . ./example.typ --field value --one &quot;&lt;pdfpc-file&gt;&quot; &gt; ./example.pdfpc   With the compatibility of Touying and Polylux, you can make Polylux also support direct export by adding the following code:  #import &quot;@preview/touying:0.2.1&quot; #locate(loc =&gt; touying.pdfpc.pdfpc-file(loc))  ","version":"0.2.x","tagName":"h2"},{"title":"Typst Preview","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/external/typst-preview","content":"Typst Preview The Typst Preview extension for VS Code provides an excellent slide mode, allowing us to preview and present slides. Press Ctrl/Cmd + Shift + P and type Typst Preview: Preview current file in slide mode to open the preview in slide mode. Press Ctrl/Cmd + Shift + P and type Typst Preview: Preview current file in browser and slide mode to open the slide mode in the browser. Now, you can press keys like F11 to enter fullscreen mode in the browser, making it suitable for slide presentations. Since Typst Preview is based on SVG, it can play GIF animations, which is very helpful for dynamic slides.","keywords":"","version":"0.2.x"},{"title":"Introduction to Touying","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/intro","content":"","keywords":"","version":"0.2.x"},{"title":"Why Use Touying​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.2.x/intro#why-use-touying","content":" Unlike PowerPoint, Touying is not a &quot;what you see is what you get&quot; tool. You can write your slides in a &quot;content and style separation&quot; manner, especially with Typst, which offers a concise yet powerful syntax, better supporting content like code blocks, mathematical formulas, and theorems. Another advantage is that, with templates, writing slides with Touying is much faster than PowerPoint. Therefore, Touying is more suitable for users with a demand for &quot;research writing.&quot;Compared to Markdown Slides, Touying, relying on Typst, has more powerful typesetting control, such as headers, footers, layout, and convenient custom functions. These are capabilities that Markdown struggles to provide, or does not do well. Additionally, Touying offers #pause and #meanwhile markers, providing more convenient dynamic slide capabilities.Compared to Beamer, Touying has faster compilation speed, a more concise syntax, and simpler theme customization capabilities. Touying's compilation speed can be maintained in milliseconds or tens of milliseconds, compared to Beamer's compilation time of seconds or tens of seconds. Touying's syntax is more concise than Beamer, making it easier to change templates and create your own templates. In terms of features, Touying supports most of Beamer's capabilities and provides some convenient features that Beamer lacks.Compared to Polylux, Touying provides an object-oriented programming (OOP) style syntax, allowing the simulation of &quot;global variables&quot; through a global singleton. This makes it easy to write themes. Touying does not rely on counter and locate to implement #pause, resulting in better performance. Touying is a community-driven project (we welcome more people to join), and it does not overly emphasize maintaining API consistency. Instead, it chooses to maintain documentation for multiple versions, providing more novel yet powerful features.  ","version":"0.2.x","tagName":"h2"},{"title":"About the Name​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.2.x/intro#about-the-name","content":" &quot;Touying&quot; is derived from the Chinese word &quot;投影&quot; (tóuyǐng), which means &quot;projection&quot; In English, it also conveys the meaning of a &quot;project&quot;. In comparison, the term &quot;beamer&quot; in LaTeX means a projector in German.  ","version":"0.2.x","tagName":"h2"},{"title":"About the Documentation​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.2.x/intro#about-the-documentation","content":" This documentation is powered by Docusaurus. We will maintain English and Chinese versions of the documentation for Touying, and for each major version, we will maintain a documentation copy. This allows you to easily refer to old versions of the Touying documentation and migrate to new versions.  Docusaurus creates a new version:  npm run docusaurus docs:version 0.y.x   ","version":"0.2.x","tagName":"h2"},{"title":"Contribution​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.2.x/intro#contribution","content":" Touying is free, open-source, and community-driven. If you're interested, you can visit GitHub anytime and raise issues or submit pull requests. We also welcome you to join the touying-typ organization.  ","version":"0.2.x","tagName":"h2"},{"title":"License​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.2.x/intro#license","content":" Touying is released under the MIT license. ","version":"0.2.x","tagName":"h2"},{"title":"Layout Your Contents","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/layout","content":"","keywords":"","version":"0.2.x"},{"title":"Global Information​","type":1,"pageTitle":"Layout Your Contents","url":"/touying/docs/0.2.x/layout#global-information","content":" You can set the title, subtitle, author, date, and institution information for slides using:  #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], )   The date parameter can accept datetime format and content format. The display format of the date in datetime format can be changed using:  #let s = (s.methods.datetime-format)(self: s, &quot;[year]-[month]-[day]&quot;)   Internals Here, we introduce a bit of the OOP concept in Touying. You should know that Typst is a typesetting language that supports incremental rendering. That is, Typst caches the results of previous function calls. This requires Typst to have only pure functions, meaning functions that do not change external variables. Therefore, it's challenging to modify a global variable in the true sense, as done in LaTeX. Even if you use state or counter, you need to use locate and callback functions to access their values, and this approach has a significant impact on performance. Touying does not use state and counter, nor does it violate the Internals of Typst's pure functions. Instead, it cleverly uses a method in an object-oriented style to maintain a global singleton s. In Touying, an object refers to a Typst dictionary with its own member variables and methods. We have a convention that methods have a named parameter self to pass the object itself, and all methods are placed in the .methods domain. With this concept, it's not difficult to write a method to update info: #let s = ( info: (:), methods: ( // update info info: (self: none, ..args) =&gt; { self.info += args.named() self }, ) ) #let s = (s.methods.info)(self: s, title: [title]) Title is #s.info.title This way, you can also understand the purpose of the utils.methods() function: it binds self to all methods of s and returns it. It simplifies the subsequent use through unpacking syntax. #let (init, slide, slides) = utils.methods(s)   ","version":"0.2.x","tagName":"h2"},{"title":"Sections and Subsections​","type":1,"pageTitle":"Layout Your Contents","url":"/touying/docs/0.2.x/layout#sections-and-subsections","content":" Similar to Beamer, Touying also has the concepts of sections and subsections.  In the #show: slides mode, sections and subsections correspond to first-level and second-level titles, respectively. For example:  #import &quot;@preview/touying:0.2.1&quot;: * #let (init, slide, slides) = utils.methods(s) #show: init #show: slides = Section == Subsection Hello, Touying!     However, the second-level title does not always correspond to the subsection. The specific mapping may vary depending on the theme.  In the more general #slide[..] mode, sections and subsections are passed as parameters to the slide function, for example:  #slide(section: [Let's start a new section!])[..] #slide(subsection: [Let's start a new subsection!])[..]   This will create a new section and a new subsection, respectively. However, this change typically only affects the internal sections state of Touying and is not displayed on the slide by default. The specific display may vary depending on the theme.  Note that the section and subsection parameters of slide can accept both content blocks and arrays in the format ([title], [short-title]) or dictionaries in the format (title: [title], short-title: [short-title]). The short-title will be used in some special cases, such as in the navigation of the dewdrop theme.  ","version":"0.2.x","tagName":"h2"},{"title":"Table of Contents​","type":1,"pageTitle":"Layout Your Contents","url":"/touying/docs/0.2.x/layout#table-of-contents","content":" Displaying a table of contents in Touying is straightforward:  #import &quot;@preview/touying:0.2.1&quot;: * #let (init, slide, touying-outline) = utils.methods(s) #show: init #slide[ == Table of contents #touying-outline() ]   The definition of touying-oultine() is:  #let touying-outline(enum-args: (:), padding: 0pt) = { .. }   You can modify the internal enum parameters with enum-args.  If you have complex custom requirements for the table of contents, you can use:  #slide[ == Table of contents #states.touying-final-sections(sections =&gt; ..) ]   ","version":"0.2.x","tagName":"h2"},{"title":"Page Management​","type":1,"pageTitle":"Layout Your Contents","url":"/touying/docs/0.2.x/layout#page-management","content":" Due to the use of the set page(..) command in Typst, which creates a new page instead of modifying the current one, Touying chooses to maintain a s.page-args member variable in the singleton s. These parameters are only applied when creating a new slide.  Warning Therefore, you should not use the set page(..) command yourself. Instead, you should modify the s.page-args member variable inside s.  This way, we can query the parameters of the current page in real-time using s.page-args. This is useful for some functions that need to get page margins or the current page background color, such as transparent-cover.  ","version":"0.2.x","tagName":"h2"},{"title":"Page Columns​","type":1,"pageTitle":"Layout Your Contents","url":"/touying/docs/0.2.x/layout#page-columns","content":" If you need to divide a page into two or three columns, you can use the default compose feature provided by the Touying slide function. The simplest examples are:  #slide[ First column. ][ Second column. ]     If you need to change the way columns are composed, you can modify the composer parameter of slide. The default parameter is utils.side-by-side.with(columns: auto, gutter: 1em). If we want the left column to occupy the remaining width, we can use:  #slide(composer: utils.side-by-side.with(columns: (1fr, auto), gutter: 1em))[ First column. ][ Second column. ]    ","version":"0.2.x","tagName":"h2"},{"title":"Other Animations","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/dynamic/other","content":"","keywords":"","version":"0.2.x"},{"title":"Simple Animations​","type":1,"pageTitle":"Other Animations","url":"/touying/docs/0.2.x/dynamic/other#simple-animations","content":" Here's an example:  #import &quot;@preview/touying:0.2.1&quot;: * #import &quot;@preview/cetz:0.2.1&quot; #import &quot;@preview/fletcher:0.4.1&quot; as fletcher: node, edge #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: (arr, ..args) =&gt; fletcher.diagram(..args, ..arr)) #let s = themes.metropolis.register(s, aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slide) = utils.methods(s) #show: init // cetz animation #slide[ Cetz in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) ] // fletcher animation #slide[ Fletcher in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) ]     ","version":"0.2.x","tagName":"h2"},{"title":"only and uncover​","type":1,"pageTitle":"Other Animations","url":"/touying/docs/0.2.x/dynamic/other#only-and-uncover","content":" In fact, we can also use only and uncover within cetz, just requiring a bit of skill:  #slide(repeat: 3, self =&gt; [ #let (uncover, only) = utils.methods(self) Cetz in Touying in subslide #self.subslide: #cetz.canvas({ import cetz.draw: * let self = (self.methods.update-cover)(self: self, hide) let (uncover,) = utils.methods(self) rect((0,0), (5,5)) uncover(&quot;2-3&quot;, { rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) }) only(3, line((0,0), (2.5, 2.5), name: &quot;line&quot;)) }) ])  ","version":"0.2.x","tagName":"h2"},{"title":"Touying Counters","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/progress/counters","content":"","keywords":"","version":"0.2.x"},{"title":"Slide Counter​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/0.2.x/progress/counters#slide-counter","content":" You can access the slide counter using states.slide-counter and display the current slide number with states.slide-counter.display().  ","version":"0.2.x","tagName":"h2"},{"title":"Last-Slide Counter​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/0.2.x/progress/counters#last-slide-counter","content":" In some cases, we may need to add an appendix to slides, leading to the requirement to freeze the last-slide counter. Therefore, a second counter is maintained here.  You can use states.last-slide-number to display the number of the last slide before the appendix.  ","version":"0.2.x","tagName":"h2"},{"title":"Progress​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/0.2.x/progress/counters#progress","content":" You can use  #states.touying-progress(ratio =&gt; ..)   to show the current progress.  ","version":"0.2.x","tagName":"h2"},{"title":"Appendix​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/0.2.x/progress/counters#appendix","content":" You can use  // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide,) = utils.methods(s) #slide[ appendix ]   syntax to enter the appendix.  Additionally, #let s = (s.methods.appendix-in-outline)(self: s, false) can be used to hide the appendix section from the outline. ","version":"0.2.x","tagName":"h2"},{"title":"Touying Sections","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/progress/sections","content":"","keywords":"","version":"0.2.x"},{"title":"touying-outline​","type":1,"pageTitle":"Touying Sections","url":"/touying/docs/0.2.x/progress/sections#touying-outline","content":" #touying-outline(enum-args: (:), padding: 0pt) is used to display a simple outline.  ","version":"0.2.x","tagName":"h2"},{"title":"touying-final-sections​","type":1,"pageTitle":"Touying Sections","url":"/touying/docs/0.2.x/progress/sections#touying-final-sections","content":" #states.touying-final-sections(final-sections =&gt; ..) is used to customize the display of the outline.  ","version":"0.2.x","tagName":"h2"},{"title":"touying-progress-with-sections​","type":1,"pageTitle":"Touying Sections","url":"/touying/docs/0.2.x/progress/sections#touying-progress-with-sections","content":" #states.touying-progress-with-sections((current-sections: .., final-sections: .., current-slide-number: .., last-slide-number: ..) =&gt; ..)   This is the most powerful one, allowing you to build any complex progress display with its functionalities. ","version":"0.2.x","tagName":"h2"},{"title":"Code Styles","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/style","content":"","keywords":"","version":"0.2.x"},{"title":"show-slides Style​","type":1,"pageTitle":"Code Styles","url":"/touying/docs/0.2.x/style#show-slides-style","content":" If we only need simplicity, we can use #show: slides for a cleaner syntax.  However, this approach has corresponding drawbacks: firstly, this method may significantly impact document rendering performance. Secondly, subsequent #slide(..) cannot be added directly. Instead, you need to manually mark #slides-end. The most significant drawback is that complex functionalities cannot be achieved.  #import &quot;@preview/touying:0.2.1&quot;: * #let (init, slide, slides) = utils.methods(s) #show: init #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst! #slides-end #slide[ A new slide. ]     And you can create a new page with the empty header ==.  ","version":"0.2.x","tagName":"h2"},{"title":"slide-block Style​","type":1,"pageTitle":"Code Styles","url":"/touying/docs/0.2.x/style#slide-block-style","content":" For better performance and more powerful capabilities, in most cases, we still need to use the code style like:  #slide[ A new slide. ]  ","version":"0.2.x","tagName":"h2"},{"title":"Simple Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/themes/simple","content":"","keywords":"","version":"0.2.x"},{"title":"Initialization​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/0.2.x/themes/simple#initialization","content":" You can initialize the Simple theme using the following code:  #import &quot;@preview/touying:0.2.1&quot;: * #let s = themes.simple.register(s, aspect-ratio: &quot;16-9&quot;, footer: [Simple slides]) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slide, slides, title-slide, centered-slide, focus-slide) = utils.methods(s) #show: init   The register function takes parameters such as:  aspect-ratio: The aspect ratio of the slides, either &quot;16-9&quot; or &quot;4-3,&quot; with the default being &quot;16-9.&quot;footer: Content to be displayed in the footer, with the default being []. You can also pass a function like self =&gt; self.info.author.footer-right: Content to be displayed on the right side of the footer, with the default being states.slide-counter.display() + &quot; / &quot; + states.last-slide-number.background: Background color, with the default being white.foreground: Text color, with the default being black.primary: Theme color, with the default being aqua.darken(50%).  ","version":"0.2.x","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/0.2.x/themes/simple#slide-function-family","content":" The Simple theme provides a series of custom slide functions:  #centered-slide(section: ..)[ ... ]   A slide with content centered on the slide. The section parameter can be used to create a new section.    #title-slide[ ... ]   Similar to centered-slide, this is just for consistency with Polylux syntax.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // simple theme args footer: auto, )[ ... ]   This is the default ordinary slide function with a header and footer. The header is set to the current section, and the footer is as per your settings.    #focus-slide(foreground: ..., background: ...)[ ... ]   Used to draw attention. It optionally accepts a foreground color (default is white) and a background color (default is auto, i.e., self.colors.primary).  ","version":"0.2.x","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/0.2.x/themes/simple#slides-function","content":" #import &quot;@preview/touying:0.2.1&quot;: * #let s = themes.simple.register(s, aspect-ratio: &quot;16-9&quot;, footer: [Simple slides]) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slide, slides, title-slide, centered-slide, focus-slide) = utils.methods(s) #show: init #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.2.x","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/0.2.x/themes/simple#example","content":" #import &quot;@preview/touying:0.2.1&quot;: * #let s = themes.simple.register(s, aspect-ratio: &quot;16-9&quot;, footer: [Simple slides]) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slide, slides, title-slide, centered-slide, focus-slide) = utils.methods(s) #show: init #title-slide[ = Keep it simple! #v(2em) Alpha #footnote[Uni Augsburg] #h(1em) Bravo #footnote[Uni Bayreuth] #h(1em) Charlie #footnote[Uni Chemnitz] #h(1em) July 23 ] #slide[ == First slide #lorem(20) ] #focus-slide[ _Focus!_ This is very important. ] #centered-slide(section: [Let's start a new section!]) #slide[ == Dynamic slide Did you know that... #pause ...you can see the current section at the top of the slide? ]  ","version":"0.2.x","tagName":"h2"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/start","content":"","keywords":"","version":"0.2.x"},{"title":"More Complex Examples​","type":1,"pageTitle":"Getting Started","url":"/touying/docs/0.2.x/start#more-complex-examples","content":" In fact, Touying provides various styles for writing slides. For example, the above example uses first-level and second-level titles to create new slides. However, you can also use the #slide[..] format to access more powerful features provided by Touying.  #import &quot;@preview/touying:0.2.1&quot;: * #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slide) = utils.methods(s) #show: init // simple animations #slide[ a simple #pause *dynamic* #pause slide. #meanwhile meanwhile #pause with pause. ][ second #pause pause. ] // complex animations #slide(setting: body =&gt; { set text(fill: blue) body }, repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) in subslide #self.subslide test #uncover(&quot;2-&quot;)[uncover] function test #only(&quot;2-&quot;)[only] function #pause and paused text. ]) // math equation animations #slide[ == Touying Equation #touying-equation(` f(x) &amp;= pause x^2 + 2x + 1 \\ &amp;= pause (x + 1)^2 \\ `) #meanwhile Touying equation is very simple. ] // multiple pages for one slide #slide[ == Multiple Pages for One Slide #lorem(200) ] // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide,) = utils.methods(s) #slide[ == Appendix ]     In addition, Touying provides many built-in themes to easily create beautiful slides. Basically, you just need to add a line at the top of your document:  #let s = themes.metropolis.register(s, aspect-ratio: &quot;16-9&quot;)   This will allow you to use the Metropolis theme. For more detailed tutorials, you can refer to the following chapters. ","version":"0.2.x","tagName":"h2"},{"title":"Dewdrop Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/themes/dewdrop","content":"","keywords":"","version":"0.2.x"},{"title":"Initialization​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.2.x/themes/dewdrop#initialization","content":" You can initialize the Dewdrop theme using the following code:  #import &quot;@preview/touying:0.2.1&quot;: * #let s = themes.dewdrop.register( s, aspect-ratio: &quot;16-9&quot;, footer: [Dewdrop], navigation: &quot;mini-slides&quot;, // navigation: &quot;sidebar&quot;, // navigation: none, ) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slide, slides, title-slide, focus-slide, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert   The register function takes parameters such as:  aspect-ratio: The aspect ratio of the slides, either &quot;16-9&quot; or &quot;4-3,&quot; with the default being &quot;16-9.&quot;navigation: Style of the navigation bar, which can be &quot;sidebar,&quot; &quot;mini-slides,&quot; or none, with the default being &quot;sidebar.&quot;sidebar: Settings for the sidebar navigation, with the default being (width: 10em).mini-slides: Settings for mini-slides, with the default being (height: 2em, x: 2em, section: false, subsection: true).footer: Content to be displayed in the footer, with the default being []. You can also pass a function like self =&gt; self.info.author.footer-right: Content to be displayed on the right side of the footer, with the default being states.slide-counter.display() + &quot; / &quot; + states.last-slide-number.primary: Primary color, with the default being rgb(&quot;#0c4842&quot;).alpha: Transparency, with the default being 70%.  The Dewdrop theme also provides an #alert[..] function that you can use with the #show strong: alert syntax.  ","version":"0.2.x","tagName":"h2"},{"title":"Color Themes​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.2.x/themes/dewdrop#color-themes","content":" Dewdrop uses the following default color theme:  #let s = (s.methods.colors)( self: s, neutral-darkest: rgb(&quot;#000000&quot;), neutral-dark: rgb(&quot;#202020&quot;), neutral-light: rgb(&quot;#f3f3f3&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), primary: primary, )   You can modify the color theme using #let s = (s.methods.colors)(self: s, ..).  ","version":"0.2.x","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.2.x/themes/dewdrop#slide-function-family","content":" Dewdrop theme provides a series of custom slide functions:  #title-slide(extra: none, ..args)   The title-slide reads information from self.info for display. You can also pass an extra parameter to display additional information.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // Dewdrop theme footer: auto, )[ ... ]   This is the default ordinary slide function with a navigation bar and footer according to your settings.    #focus-slide[ ... ]   Used to draw attention. The background color is self.colors.primary.  ","version":"0.2.x","tagName":"h2"},{"title":"Special Functions​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.2.x/themes/dewdrop#special-functions","content":" #d-outline(enum-args: (:), list-args: (:), cover: true)   Displays the current outline. The cover parameter specifies whether to hide sections that are inactive.    #d-sidebar()   An internal function for displaying the sidebar.    #d-mini-slides()   An internal function for displaying mini-slides.  ","version":"0.2.x","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.2.x/themes/dewdrop#slides-function","content":" The slides function has parameters:  title-slide: Default is true.outline-slide: Default is true.outline-title: Default is [Outline].  You can set these using #show: slides.with(..).  #import &quot;@preview/touying:0.2.1&quot;: * #let s = themes.dewdrop.register(s, aspect-ratio: &quot;16-9&quot;, footer: [Dewdrop]) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slide, slides, title-slide, focus-slide, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.2.x","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.2.x/themes/dewdrop#example","content":" #import &quot;@preview/touying:0.2.1&quot;: * #let s = themes.dewdrop.register( s, aspect-ratio: &quot;16-9&quot;, footer: [Dewdrop], navigation: &quot;mini-slides&quot;, // navigation: &quot;sidebar&quot;, // navigation: none, ) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let s = (s.methods.enable-transparent-cover)(self: s) // #let s = (s.methods.appendix-in-outline)(self: s, false) #let (init, slide, title-slide, focus-slide, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #title-slide() #slide[ == Outline #touying-outline(cover: false) ] #slide(section: [Section A])[ == Outline #touying-outline() ] #slide(subsection: [Subsection A.1])[ == Title A slide with equation: $ x_(n+1) = (x_n + a/x_n) / 2 $ ] #slide(subsection: [Subsection A.2])[ == Important A slide without a title but with *important* infos ] #slide(section: [Section B])[ == Outline #touying-outline() ] #slide(subsection: [Subsection B.1])[ == Another Subsection #lorem(80) ] #focus-slide[ Wake up! ] // simple animations #slide(subsection: [Subsection B.2])[ == Dynamic a simple #pause dynamic slide with #alert[alert] #pause text. ] // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide,) = utils.methods(s) #slide(section: [Appendix])[ == Outline #touying-outline() ] #slide[ appendix ]  ","version":"0.2.x","tagName":"h2"},{"title":"Fit to Height / Width","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/utilities/fit-to","content":"","keywords":"","version":"0.2.x"},{"title":"Fit to Height​","type":1,"pageTitle":"Fit to Height / Width","url":"/touying/docs/0.2.x/utilities/fit-to#fit-to-height","content":" If you need to make an image fill the remaining slide height, you can try the fit-to-height function:  #utils.fit-to-height(1fr)[BIG]   Function definition:  #let fit-to-height( width: none, prescale-width: none, grow: true, shrink: true, height, body ) = { .. }   Parameters:  width: If specified, this will determine the width of the content after scaling. So, if you want the scaled content to fill half of the slide width, you can use width: 50%.prescale-width: This parameter allows you to make Typst's layout assume that the given content is to be laid out in a container of a certain width before scaling. For example, you can use prescale-width: 200% assuming the slide's width is twice the original.grow: Whether it can grow, default is true.shrink: Whether it can shrink, default is true.height: The specified height.body: The specific content.  ","version":"0.2.x","tagName":"h2"},{"title":"Fit to Width​","type":1,"pageTitle":"Fit to Height / Width","url":"/touying/docs/0.2.x/utilities/fit-to#fit-to-width","content":" If you need to limit the title width to exactly fill the slide width, you can try the fit-to-width function:  #utils.fit-to-width(1fr)[#lorem(20)]   Function definition:  #let fit-to-width(grow: true, shrink: true, width, body) = { .. }   Parameters:  grow: Whether it can grow, default is true.shrink: Whether it can shrink, default is true.width: The specified width.body: The specific content. ","version":"0.2.x","tagName":"h2"},{"title":"University Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/themes/university","content":"","keywords":"","version":"0.2.x"},{"title":"Initialization​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.2.x/themes/university#initialization","content":" You can initialize it with the following code:  #import &quot;@preview/touying:0.2.1&quot;: * #let s = themes.university.register(s, aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slide, slides, title-slide, focus-slide, matrix-slide, touying-outline, alert) = utils.methods(s) #show: init   The register function takes the following parameters for initialization:  aspect-ratio: Sets the aspect ratio of the slides to &quot;16-9&quot; or &quot;4-3,&quot; with the default being &quot;16-9.&quot;progress-bar: Determines whether to display the progress bar at the top of the slides, with the default value of true.  Additionally, the University theme provides an #alert[..] function that you can use with #show strong: alert using the *alert text* syntax.  ","version":"0.2.x","tagName":"h2"},{"title":"Color Themes​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.2.x/themes/university#color-themes","content":" University theme defaults to using:  #let s = (s.methods.colors)( self: s, primary: rgb(&quot;#04364A&quot;), secondary: rgb(&quot;#176B87&quot;), tertiary: rgb(&quot;#448C95&quot;), neutral-lightest: rgb(&quot;#FBFEF9&quot;), )   You can modify the color theme by using #let s = (s.methods.colors)(self: s, ..).  ","version":"0.2.x","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.2.x/themes/university#slide-function-family","content":" The University theme provides a series of custom slide functions:  #title-slide(logo: none, authors: none, ..args)   The title-slide reads information from self.info for display, and you can pass in the logo parameter and an array-type authors parameter.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // university theme title: none, subtitle: none, header: none, footer: auto, margin: (top: 2em, bottom: 1em, x: 0em), padding: (x: 2em, y: .5em), )[ ... ]   The default ordinary slide function with a title and footer, where title defaults to the current section title, and the footer is set by you.    #focus-slide(background-img: ..., background-color: ...)[ ... ]   Used to capture the audience's attention, with the default background color being self.colors.primary.    #matrix-slide(columns: ..., rows: ...)[ ... ][ ... ]   You can refer to the documentation.  ","version":"0.2.x","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.2.x/themes/university#slides-function","content":" The slides function has the parameter:  title-slide: Defaults to true.  You can set it using #show: slides.with(..).  #import &quot;@preview/touying:0.2.1&quot;: * #let s = themes.university.register(s, aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slide, slides, title-slide, focus-slide, matrix-slide, touying-outline, alert) = utils.methods(s) #show: init #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.2.x","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.2.x/themes/university#example","content":" #import &quot;@preview/touying:0.2.1&quot;: * #let s = themes.university.register(s, aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slide, slides, title-slide, focus-slide, matrix-slide, touying-outline, alert) = utils.methods(s) #show: init #title-slide(authors: ([Author A], [Author B])) #slide(title: [Slide title], section: [The section])[ #lorem(40) ] #slide(title: [Slide title], subtitle: emph[What is the problem?])[ #lorem(40) ] #focus-slide[ *Another variant with an image in background...* ] #matrix-slide[ left ][ middle ][ right ] #matrix-slide(columns: 1)[ top ][ bottom ] #matrix-slide(columns: (1fr, 2fr, 1fr), ..(lorem(8),) * 9)  ","version":"0.2.x","tagName":"h2"},{"title":"Metropolis Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/themes/metropolis","content":"","keywords":"","version":"0.2.x"},{"title":"Initialization​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.2.x/themes/metropolis#initialization","content":" You can initialize the Metropolis theme using the following code:  #import &quot;@preview/touying:0.2.1&quot;: * #let s = themes.metropolis.register(s, aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slide, slides, title-slide, new-section-slide, focus-slide, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert   The register function takes parameters such as:  aspect-ratio: The aspect ratio of the slides, either &quot;16-9&quot; or &quot;4-3,&quot; with the default being &quot;16-9.&quot;header: Content to be displayed in the header, with the default being states.current-section-title. You can also pass a function like self =&gt; self.info.title.footer: Content to be displayed in the footer, with the default being []. You can also pass a function like self =&gt; self.info.author.footer-right: Content to be displayed on the right side of the footer, with the default being states.slide-counter.display() + &quot; / &quot; + states.last-slide-number.footer-progress: Whether to show the progress bar at the bottom of the slide, with the default being true.  The Metropolis theme also provides an #alert[..] function that you can use with the #show strong: alert syntax.  ","version":"0.2.x","tagName":"h2"},{"title":"Color Themes​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.2.x/themes/metropolis#color-themes","content":" Metropolis uses the following default color theme:  #let s = (s.methods.colors)( self: s, neutral-lightest: rgb(&quot;#fafafa&quot;), primary-dark: rgb(&quot;#23373b&quot;), secondary-light: rgb(&quot;#eb811b&quot;), secondary-lighter: rgb(&quot;#d6c6b7&quot;), )   You can modify the color theme using #let s = (s.methods.colors)(self: s, ..).  ","version":"0.2.x","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.2.x/themes/metropolis#slide-function-family","content":" Metropolis theme provides a series of custom slide functions:  #title-slide(extra: none, ..args)   The title-slide reads information from self.info for display. You can also pass an extra parameter to display additional information.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // metropolis theme title: auto, footer: auto, align: horizon, margin: (top: 3em, bottom: 1em, left: 0em, right: 0em), padding: 2em, )[ ... ]   This is the default ordinary slide function with a title and footer according to your settings. The title is set to the current section title by default, and the footer is as per your settings.    #focus-slide[ ... ]   Used to draw attention. The background color is self.colors.primary-dark.    #new-section-slide(short-title: auto, title)   Opens a new section with the given title.  ","version":"0.2.x","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.2.x/themes/metropolis#slides-function","content":" The slides function has parameters:  title-slide: Default is true.outline-slide: Default is true.outline-title: Default is [Table of contents].  You can set these using #show: slides.with(..).  #import &quot;@preview/touying:0.2.1&quot;: * #let s = themes.metropolis.register(s, aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slide, slides, title-slide, new-section-slide, focus-slide, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.2.x","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.2.x/themes/metropolis#example","content":" #import &quot;@preview/touying:0.2.1&quot;: * #let s = themes.metropolis.register(s, aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slide, title-slide, new-section-slide, focus-slide, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #title-slide(extra: [Extra]) #slide(title: [Table of contents])[ #touying-outline() ] #slide(title: [A long long long long long long long long long long long long long long long long long long long long long long long long Title])[ A slide with some maths: $ x_(n+1) = (x_n + a/x_n) / 2 $ #lorem(200) ] #new-section-slide[First section] #slide[ A slide without a title but with *important* infos ] #new-section-slide[Second section] #focus-slide[ Wake up! ] // simple animations #slide[ a simple #pause dynamic slide with #alert[alert] #pause text. ] // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide, new-section-slide) = utils.methods(s) #new-section-slide[Appendix] #slide[ appendix ]  ","version":"0.2.x","tagName":"h2"},{"title":"Object-Oriented Programming","type":0,"sectionRef":"#","url":"/touying/docs/0.2.x/utilities/oop","content":"Object-Oriented Programming Touying provides some convenient utility functions for object-oriented programming. #let empty-object = (methods: (:)) An empty class. #let call-or-display(self, it) = { if type(it) == function { return it(self) } else { return it } } Call or display as-is. #let methods(self) = { .. } Used to bind self to methods and return, very commonly used.","keywords":"","version":"0.2.x"},{"title":"Changelog","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/changelog","content":"","keywords":"","version":"0.3.2+"},{"title":"v0.3.3​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.2+/changelog#v033","content":" template: move template to touying-aqua package, make Touying searchable in Typst Universe Packagesthemes: fix bugs in university and dewdrop themefeat: make set-show rule work without setting parameterfeat: make composer parameter more simplerfeat: add empty-slide function  ","version":"0.3.2+","tagName":"h2"},{"title":"v0.3.2​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.2+/changelog#v032","content":" fix critical bug: fix is-sequence function, make grid and table work correctly in touyingtheme: add aqua theme, thanks for pride7theme: make university theme more configurablerefactor: don't export variable s by default anymore, it will be extracted by register function (Breaking Change)meta: add categories and template config to typst.toml for Typst 0.11  ","version":"0.3.2+","tagName":"h2"},{"title":"v0.3.1​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.2+/changelog#v031","content":" fix some typosfix slide-level bugfix bug of pdfpc label  ","version":"0.3.2+","tagName":"h2"},{"title":"v0.3.0​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.2+/changelog#v030","content":" ","version":"0.3.2+","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.2+/changelog#features","content":" better show-slides mode.support align and pad.  ","version":"0.3.2+","tagName":"h3"},{"title":"Documentation​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.2+/changelog#documentation","content":" Add more detailed documentation.  ","version":"0.3.2+","tagName":"h3"},{"title":"Refactor​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.2+/changelog#refactor","content":" simplify theme.  ","version":"0.3.2+","tagName":"h3"},{"title":"Fix​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.2+/changelog#fix","content":" fix many bugs.  ","version":"0.3.2+","tagName":"h3"},{"title":"v0.2.1​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.2+/changelog#v021","content":" ","version":"0.3.2+","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.2+/changelog#features-1","content":" Touying-reducer: support cetz and fletcher animationuniversity theme: add university theme  ","version":"0.3.2+","tagName":"h3"},{"title":"Fix​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.2+/changelog#fix-1","content":" fix footer progress in metropolis themefix some bugs in simple and dewdrop themesfix bug that outline does not display more than 4 sections  ","version":"0.3.2+","tagName":"h3"},{"title":"v0.2.0​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.2+/changelog#v020","content":" Object-oriented programming: Singleton s, binding methods utils.methods(s) and (self: obj, ..) =&gt; {..} methods.Page arguments management: Instead of using #set page(..), you should use self.page-args to retrieve or set page parameters, thereby avoiding unnecessary creation of new pages.#pause for sequence content: You can use #pause at the outermost level of a slide, including inline and list.#pause for layout functions: You can use the composer parameter to add yourself layout function like utils.side-by-side, and simply use multiple pos parameters like #slide[..][..].#meanwhile for synchronous display: Provide a #meanwhile for resetting subslides counter.#pause and #meanwhile for math equation: Provide a #touying-equation(&quot;x + y pause + z&quot;) for math equation animations.Slides: Create simple slides using standard headings.Callback-style uncover, only and alternatives: Based on the concise syntax provided by Polylux, allow precise control of the timing for displaying content. You should manually control the number of subslides using the repeat parameter. Transparent cover: Enable transparent cover using oop syntax like #let s = (s.methods.enable-transparent-cover)(self: s).Handout mode: enable handout mode by #let s = (s.methods.enable-handout-mode)(self: s).Fit-to-width and fit-to-height: Fit-to-width for title in header and fit-to-height for image. utils.fit-to-width(grow: true, shrink: true, width, body)utils.fit-to-height(width: none, prescale-width: none, grow: true, shrink: true, height, body) Slides counter: states.slide-counter.display() + &quot; / &quot; + states.last-slide-number and states.touying-progress(ratio =&gt; ..).Appendix: Freeze the last-slide-number to prevent the slide number from increasing further.Sections: Touying's built-in section support can be used to display the current section title and show progress. section and subsection parameter in #slide to register a new section or subsection.states.current-section-title to get the current section.states.touying-outline or s.methods.touying-outline to display a outline of sections.states.touying-final-sections(sections =&gt; ..) for custom outline display.states.touying-progress-with-sections((current-sections: .., final-sections: .., current-slide-number: .., last-slide-number: ..) =&gt; ..) for powerful progress display. Navigation bar: Navigation bar like here by states.touying-progress-with-sections(..), in dewdrop theme.Pdfpc: pdfpc support and export .pdfpc file without external tool by typst query command simply. ","version":"0.3.2+","tagName":"h2"},{"title":"Complex Animations","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/dynamic/complex","content":"","keywords":"","version":"0.3.2+"},{"title":"Callback-Style Functions​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/0.3.2+/dynamic/complex#callback-style-functions","content":" To overcome the limitations of styled and layout mentioned earlier, Touying cleverly implements always-effective only, uncover, and alternatives using callback functions. Specifically, you need to introduce these three functions as follows:  #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) In subslide #self.subslide, test #uncover(&quot;2-&quot;)[uncover] function, and test #only(&quot;2-&quot;)[only] function, #pause and paused text. ])     Notice that we no longer pass a content block but instead pass a callback function with a self parameter. Later, we extract only, uncover, and alternatives functions from self using:  #let (uncover, only, alternatives) = utils.methods(self)   We then call these functions in subsequent steps.  Here's an interesting fact: the self.subslide of type int indicates the current subslide index, and in fact, the only, uncover, and alternatives functions rely on self.subslide to determine the current subslide index.  Warning We manually specify the repeat: 3 parameter, indicating the display of 3 subslides. We need to do this manually because Touying cannot infer how many subslides only, uncover, and alternatives should display.  ","version":"0.3.2+","tagName":"h2"},{"title":"only​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/0.3.2+/dynamic/complex#only","content":" The only function means it &quot;appears&quot; only on selected subslides. If it doesn't appear, it completely disappears and doesn't occupy any space. In other words, #only(index, body) is either body or none.  The index can be an int type or a str type like &quot;2-&quot; or &quot;2-3&quot;. For more usage, refer to Polylux.  ","version":"0.3.2+","tagName":"h2"},{"title":"uncover​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/0.3.2+/dynamic/complex#uncover","content":" The uncover function means it &quot;displays&quot; only on selected subslides; otherwise, it will be covered by the cover function but still occupies the original space. In other words, #uncover(index, body) is either body or cover(body).  The index can be an int type or a str type like &quot;2-&quot; or &quot;2-3&quot;. For more usage, refer to Polylux.  You may also have noticed that #pause actually uses the cover function, providing a more convenient syntax. In reality, their effects are almost identical.  ","version":"0.3.2+","tagName":"h2"},{"title":"alternatives​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/0.3.2+/dynamic/complex#alternatives","content":" The alternatives function displays a series of different content in different subslides. For example:  #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) #alternatives[Ann][Bob][Christopher] likes #alternatives[chocolate][strawberry][vanilla] ice cream. ])     As you can see, alternatives can automatically expand to the most suitable width and height, a capability that only and uncover lack. In fact, alternatives has other parameters, such as start: 2, repeat-last: true, and position: center + horizon. For more usage, refer to Polylux. ","version":"0.3.2+","tagName":"h2"},{"title":"Code Style","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/code-styles","content":"","keywords":"","version":"0.3.2+"},{"title":"Simple Style​","type":1,"pageTitle":"Code Style","url":"/touying/docs/0.3.2+/code-styles#simple-style","content":" If we only need simplicity, we can directly input content under the heading, just like writing a normal Typst document. The heading here serves to divide the pages, and we can use commands like #pause to achieve animation effects.  #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.simple.register() #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     You can use an empty heading == to create a new page. This skill also helps clear the continuation of the previous title.  PS: We can use the #slides-end marker to signify the end of #show: slides.  ","version":"0.3.2+","tagName":"h2"},{"title":"Block Style​","type":1,"pageTitle":"Code Style","url":"/touying/docs/0.3.2+/code-styles#block-style","content":" Many times, using simple style alone cannot achieve all the functions we need. For more powerful features and clearer structure, we can also use block style in the form of #slide[...]. The #slide function needs to be unpacked using the syntax #let (slide, empty-slide) = utils.slides(s) to be used correctly after #show: slides.  For example, the previous example can be transformed into:  #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.simple.register() #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Title == First Slide #slide[ Hello, Touying! #pause Hello, Typst! ]   and #empty-slide[] to create an empty slide without header and footer.  There are many advantages to doing this:  Many times, we not only need the default #slide[...] but also special slide functions like #focus-slide[...].Different themes' #slide[...] functions may have more parameters than the default, such as the university theme's #slide[...] function having a subtitle parameter.Only slide functions can use the callback-style content block to achieve complex animation effects with #only and #uncover functions.It has a clearer structure. By identifying #slide[...] blocks, we can easily distinguish the specific pagination effects of slides.  ","version":"0.3.2+","tagName":"h2"},{"title":"Convention Over Configuration​","type":1,"pageTitle":"Code Style","url":"/touying/docs/0.3.2+/code-styles#convention-over-configuration","content":" You may have noticed that when using the simple theme, using a level-one heading automatically creates a new section slide. This is because the simple theme registers an s.methods.touying-new-section-slide method, so Touying will automatically call this method.  If we don't want it to automatically create such a section slide, we can delete this method:  #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.simple.register() #(s.methods.touying-new-section-slide = none) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     As you can see, there are only two pages left, and the default section slide is gone.  Similarly, we can register a new section slide:  #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.simple.register() #(s.methods.touying-new-section-slide = (self: none, section, ..args) =&gt; { self = utils.empty-page(self) (s.methods.touying-slide)(self: self, section: section, { set align(center + horizon) set text(size: 2em, fill: s.colors.primary, style: &quot;italic&quot;, weight: &quot;bold&quot;) section }, ..args) }) #let (init, slides, touying-outline) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     Similarly, we can modify s.methods.touying-new-subsection-slide to do the same for subsection.  In fact, besides s.methods.touying-new-section-slide, another special slide function is the s.methods.slide function, which will be called by default in simple style when #slide[...] is not explicitly used.  Also, since #slide[...] is registered in s.slides = (&quot;slide&quot;,), the section, subsection, and title parameters will be automatically passed, while others like #focus-slide[...] will not automatically receive these three parameters.  Principle In fact, you can also not use #show: slides and utils.slides(s), but only use utils.methods(s), for example: #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.simple.register() #let (init, touying-outline, slide) = utils.methods(s) #show: init #slide(section: [Title], title: [First Slide])[ Hello, Touying! #pause Hello, Typst! ] Here, you need to manually pass in section, subsection, and title, but it will have better performance, suitable for cases where faster performance is needed, such as when there are more than dozens or hundreds of pages. ","version":"0.3.2+","tagName":"h2"},{"title":"Creating Your Own Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/build-your-own-theme","content":"","keywords":"","version":"0.3.2+"},{"title":"Modifying Existing Themes​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.3.2+/build-your-own-theme#modifying-existing-themes","content":" If you wish to modify a theme within the Touying framework locally instead of creating one from scratch, you can achieve this by following these steps:  Copy the theme code from the themes directory to your local machine. For example, copy themes/university.typ to a local file named university.typ.Remove all #import &quot;../xxx.typ&quot; commands at the top of the university.typ file.Add #import &quot;@preview/touying:0.3.3&quot;: * at the top of the university.typ file to import all modules.Replace self: s in the register function with self: themes.default.register() (Important).  You can then import and use the theme by:  #import &quot;@preview/touying:0.3.3&quot;: * #import &quot;university.typ&quot; #let s = university.register(aspect-ratio: &quot;16-9&quot;)   For a specific example, refer to: https://typst.app/project/rqRuzg0keo_ZEB5AdxjweA  ","version":"0.3.2+","tagName":"h2"},{"title":"Import​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.3.2+/build-your-own-theme#import","content":" Depending on whether the theme is for personal use or part of Touying, you can import in two ways:  If for personal use:  #import &quot;@preview/touying:0.3.3&quot;: *   If part of Touying themes:  #import &quot;../utils/utils.typ&quot; #import &quot;../utils/states.typ&quot; #import &quot;../utils/components.typ&quot;   Additionally, add the import statement in Touying's themes/themes.typ:  #import &quot;bamboo.typ&quot;   ","version":"0.3.2+","tagName":"h2"},{"title":"Register Function and Init Method​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.3.2+/build-your-own-theme#register-function-and-init-method","content":" Next, we'll distinguish between the bamboo.typ template file and the main.typ file, the latter of which is sometimes omitted.  Generally, the first step in creating slides is to determine font size and page aspect ratio. Therefore, we need to register an initialization method:  // bamboo.typ #import &quot;@preview/touying:0.3.3&quot;: * #let register( self: themes.default.register(), aspect-ratio: &quot;16-9&quot;, ) = { self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, ) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self } // main.typ #import &quot;@preview/touying:0.3.3&quot;: * #import &quot;bamboo.typ&quot; #let s = bamboo.register(aspect-ratio: &quot;16-9&quot;) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide) = utils.slides(s) #show: slides = First Section == First Slide #slide[ A slide with a title and an *important* information. ]   As you can see, we created a register function and passed an aspect-ratio parameter to set the page aspect ratio. We get default self by self: themes.default.register(). As you might already know, in Touying, we should not use set page(..) to set page parameters but rather use the syntax self.page-args += (..) to set them, as explained in the Page Layout section.  In addition, we registered a self.methods.init method, which can be used for some global style settings. For example, in this case, we added set text(size: 20pt) to set the font size. You can also place additional global style settings here, such as set par(justify: true). Since the init function is placed inside self.methods, it is a method, not a regular function. Therefore, we need to add the parameter self: none to use it properly.  As you can see, later in main.typ, we apply the global style settings in init using #show: init, where init is bound and unpacked through utils.methods(s).  If you pay extra attention, you'll notice that the register function has an independent self at the end. This actually represents returning the modified self as the return value, which will be saved in #let s = ... This line is therefore indispensable.  ","version":"0.3.2+","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.3.2+/build-your-own-theme#color-theme","content":" Choosing an attractive color theme for your slides is crucial. Touying provides built-in color theme support to minimize API differences between different themes. Touying offers two dimensions of color selection: the first is neutral, primary, secondary, and tertiary for hue distinction, with primary being the most commonly used; the second is default, light, lighter, lightest, dark, darker, and darkest for brightness distinction.  As we are creating the Bamboo theme, we chose a color for the primary theme, similar to bamboo (rgb(&quot;#5E8B65&quot;)), and included neutral lightest/darkest as background and font colors.  As shown in the code below, we use (self.methods.colors)(self: self, ..) to modify the color theme. Essentially, it is a wrapper for self.colors += (..).  #let register( self: themes.default.register(), aspect-ratio: &quot;16-9&quot;, ) = { // color theme self = (self.methods.colors)( self: self, primary: rgb(&quot;#5E8B65&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), neutral-darkest: rgb(&quot;#000000&quot;), ) self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, ) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self }   After adding the color theme, we can access the color using syntax like self.colors.primary.  It's worth noting that users can change the theme color at any time using:  #let s = (s.methods.colors)(self: s, primary: rgb(&quot;#3578B9&quot;))   This flexibility demonstrates Touying's powerful customization capabilities.  ","version":"0.3.2+","tagName":"h2"},{"title":"Practical: Custom Alert Method​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.3.2+/build-your-own-theme#practical-custom-alert-method","content":" In general, we need to provide a #alert[..] function for users, similar to #strong[..]. Typically, #alert[..] emphasizes text using the primary theme color for aesthetics. We add a line in the register function:  self.methods.alert = (self: none, it) =&gt; text(fill: self.colors.primary, it)   This code sets the text color to self.colors.primary, utilizing the theme's primary color.  ","version":"0.3.2+","tagName":"h2"},{"title":"Custom Header and Footer​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.3.2+/build-your-own-theme#custom-header-and-footer","content":" Here, assuming you've already read the Page Layout section, we know we should add headers and footers to the slides.  Firstly, we add self.bamboo-title = []. This means we save the title of the current slide as a member variable self.bamboo-title, stored in self. This makes it easy to use in the header and later modifications. Similarly, we create self.bamboo-footer, saving the footer: [] parameter from the register function for displaying in the bottom-left corner.  It's worth noting that our header is actually a content function in the form of let header(self) = { .. } with the self parameter, allowing us to get the latest information from self. For example, self.bamboo-title. The footer is similar.  The components.cell used inside is actually #let cell = block.with(width: 100%, height: 100%, above: 0pt, below: 0pt, breakable: false), and show: components.cell is shorthand for components.cell(body). The show: pad.with(.4em) in the footer is similar.  Another point to note is the states module, which contains many counters and state-related content. For example, states.current-section-title is used to display the current section, and states.slide-counter.display() + &quot; / &quot; + states.last-slide-number is used to display the current page number and total number of pages.  We observe the usage of utils.call-or-display(self, self.bamboo-footer) to display self.bamboo-footer. This is used to handle situations like self.bamboo-footer = (self) =&gt; {..}, ensuring a unified approach to displaying content functions and content.  To ensure proper display of the header and footer and sufficient spacing from the main content, we also set top and bottom margins and left and right padding, such as self.page-args += (margin: (top: 4em, bottom: 1.5em, x: 0em)) and self.padding = (x: 2em, y: 0em). The left and right margin is 0em to allow the header to occupy the full page width. The left and right spacing of the main content is achieved through left and right padding of 2em.  We also need to customize a slide method that accepts slide(self: none, title: auto, ..args). The first self: none is a required method parameter for getting the latest self. The second title is used to update self.bamboo-title for displaying in the header. The third ..args collects the remaining parameters and passes them to (self.methods.touying-slide)(self: self, ..args), which is necessary for the Touying slide functionality to work properly. Additionally, we need to register this method in the register function with self.methods.slide = slide.  // bamboo.typ #import &quot;@preview/touying:0.3.3&quot;: * #let slide(self: none, title: auto, ..args) = { if title != auto { self.bamboo-title = title } (self.methods.touying-slide)(self: self, ..args) } #let register( self: themes.default.register(), aspect-ratio: &quot;16-9&quot;, footer: [], ) = { // color theme self = (self.methods.colors)( self: self, primary: rgb(&quot;#5E8B65&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), neutral-darkest: rgb(&quot;#000000&quot;), ) // variables for later use self.bamboo-title = [] self.bamboo-footer = footer // set page let header(self) = { set align(top) show: components.cell.with(fill: self.colors.primary, inset: 1em) set align(horizon) set text(fill: self.colors.neutral-lightest, size: .7em) states.current-section-title linebreak() set text(size: 1.5em) utils.call-or-display(self, self.bamboo-title) } let footer(self) = { set align(bottom) show: pad.with(.4em) set text(fill: self.colors.neutral-darkest, size: .8em) utils.call-or-display(self, self.bamboo-footer) h(1fr) states.slide-counter.display() + &quot; / &quot; + states.last-slide-number } self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, header: header, footer: footer, margin: (top: 4em, bottom: 1.5em, x: 0em), ) self.padding = (x: 2em, y: 0em) // register methods self.methods.slide = slide self.methods.alert = (self: none, it) =&gt; text(fill: self.colors.primary, it) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self } // main.typ #import &quot;@preview/touying:0.3.3&quot;: * #import &quot;bamboo.typ&quot; #let s = bamboo.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide) = utils.slides(s) #show: slides = First Section == First Slide #slide[ A slide with a title and an *important* information. ]     ","version":"0.3.2+","tagName":"h2"},{"title":"Custom Special Slide​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.3.2+/build-your-own-theme#custom-special-slide","content":" Building upon the basic slide, we further add some special slide functions such as title-slide, focus-slide, and a custom slides method.  For the title-slide method, first, we call self = utils.empty-page(self). This function clears self.page-args.header, self.page-args.footer, and sets margin and padding to 0em, creating a blank page effect. Then, we use let info = self.info + args.named() to get information stored in self.info and update it with the passed args.named() for later use as info.title. The specific page content body will vary for each theme, so we won't go into details here. Finally, we call `(self.methods.touying-slide)(self: self, repeat: none, body  ), where repeat: noneindicates that this page does not require animation effects, and passing thebody` parameter displays its content.  For the new-section-slide method, the process is similar. The only thing to note is that in (self.methods.touying-slide)(self: self, repeat: none, section: section, body), we pass an additional section: section parameter to declare the creation of a new section. Another point to note is that besides self.methods.new-section-slide = new-section-slide, we also register self.methods.touying-new-section-slide = new-section-slide, so new-section-slide will be automatically called when encountering a first-level title.  For the focus-slide method, most of the content is similar, but it's worth noting that we use self.page-args += (..) to update the page's background color.  Finally, we update the slides(self: none, title-slide: true, slide-level: 1, ..args) method. When title-slide is true, using #show: slides will automatically create a title-slide. Setting slide-level: 1 indicates that the first-level and second-level titles correspond to section and title, respectively.  // bamboo.typ #import &quot;@preview/touying:0.3.3&quot;: * #let slide(self: none, title: auto, ..args) = { if title != auto { self.bamboo-title = title } (self.methods.touying-slide)(self: self, ..args) } #let title-slide(self: none, ..args) = { self = utils.empty-page(self) let info = self.info + args.named() let body = { set align(center + horizon) block( fill: self.colors.primary, width: 80%, inset: (y: 1em), radius: 1em, text(size: 2em, fill: self.colors.neutral-lightest, weight: &quot;bold&quot;, info.title) ) set text(fill: self.colors.neutral-darkest) if info.author != none { block(info.author) } if info.date != none { block(if type(info.date) == datetime { info.date.display(self.datetime-format) } else { info.date }) } } (self.methods.touying-slide)(self: self, repeat: none, body) } #let new-section-slide(self: none, section) = { self = utils.empty-page(self) let body = { set align(center + horizon) set text(size: 2em, fill: self.colors.primary, weight: &quot;bold&quot;, style: &quot;italic&quot;) section } (self.methods.touying-slide)(self: self, repeat: none, section: section, body) } #let focus-slide(self: none, body) = { self = utils.empty-page(self) self.page-args += ( fill: self.colors.primary, margin: 2em, ) set text(fill: self.colors.neutral-lightest, size: 2em) (self.methods.touying-slide)(self: self, repeat: none, align(horizon + center, body)) } #let slides(self: none, title-slide: true, slide-level: 1, ..args) = { if title-slide { (self.methods.title-slide)(self: self) } (self.methods.touying-slides)(self: self, slide-level: slide-level, ..args) } #let register( self: themes.default.register(), aspect-ratio: &quot;16-9&quot;, footer: [], ) = { // color theme self = (self.methods.colors)( self: self, primary: rgb(&quot;#5E8B65&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), neutral-darkest: rgb(&quot;#000000&quot;), ) // variables for later use self.bamboo-title = [] self.bamboo-footer = footer // set page let header(self) = { set align(top) show: components.cell.with(fill: self.colors.primary, inset: 1em) set align(horizon) set text(fill: self.colors.neutral-lightest, size: .7em) states.current-section-title linebreak() set text(size: 1.5em) utils.call-or-display(self, self.bamboo-title) } let footer(self) = { set align(bottom) show: pad.with(.4em) set text(fill: self.colors.neutral-darkest, size: .8em) utils.call-or-display(self, self.bamboo-footer) h(1fr) states.slide-counter.display() + &quot; / &quot; + states.last-slide-number } self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, header: header, footer: footer, margin: (top: 4em, bottom: 1.5em, x: 0em), ) self.padding = (x: 2em, y: 0em) // register methods self.methods.slide = slide self.methods.title-slide = title-slide self.methods.new-section-slide = new-section-slide self.methods.touying-new-section-slide = new-section-slide self.methods.focus-slide = focus-slide self.methods.slides = slides self.methods.alert = (self: none, it) =&gt; text(fill: self.colors.primary, it) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self } // main.typ #import &quot;@preview/touying:0.3.3&quot;: * #import &quot;bamboo.typ&quot; #let s = bamboo.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, focus-slide) = utils.slides(s) #show: slides = First Section == First Slide #slide[ A slide with a title and an *important* information. ] #focus-slide[ Focus on it! ]     ","version":"0.3.2+","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.3.2+/build-your-own-theme#conclusion","content":" Congratulations! You've created a simple and elegant theme. Perhaps you may find that Touying introduces a wealth of concepts, making it initially challenging to grasp. This is normal, as Touying opts for functionality over simplicity. However, thanks to Touying's comprehensive and unified approach, you can easily extract commonalities between different themes and transfer your knowledge seamlessly. You can also save global variables, modify existing themes, or switch between themes effortlessly, showcasing the benefits of Touying's decoupling and object-oriented programming. ","version":"0.3.2+","tagName":"h2"},{"title":"Math Equation Animations","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/dynamic/equation","content":"","keywords":"","version":"0.3.2+"},{"title":"Simple Animation​","type":1,"pageTitle":"Math Equation Animations","url":"/touying/docs/0.3.2+/dynamic/equation#simple-animation","content":" Let's start with an example:  #slide[ Touying equation with pause: #touying-equation(` f(x) &amp;= pause x^2 + 2x + 1 \\ &amp;= pause (x + 1)^2 \\ `) #meanwhile Touying equation is very simple. ]     We use the touying-equation function to incorporate pause and meanwhile within the text of math equations (in fact, you can also use #pause or #pause;).  As you would expect, the math equation is displayed step by step, making it suitable for presenters to demonstrate their math reasoning.  Warning While the touying-equation function is convenient, you should always be aware that it doesn't perform complex syntax analysis. It simply splits the string using regular expressions. Therefore, you should not use pause or meanwhile within functions like display(..)!  ","version":"0.3.2+","tagName":"h2"},{"title":"Complex Animation​","type":1,"pageTitle":"Math Equation Animations","url":"/touying/docs/0.3.2+/dynamic/equation#complex-animation","content":" In fact, we can also use only, uncover, and alternatives within touying-equation with a little trick:  #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) #touying-equation(scope: (uncover: uncover), ` f(x) &amp;= pause x^2 + 2x + uncover(&quot;3-&quot;, 1) \\ &amp;= pause (x + 1)^2 \\ `) ])     We can pass the functions we need into the touying-equation through the scope parameter, such as uncover in this example.  ","version":"0.3.2+","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Math Equation Animations","url":"/touying/docs/0.3.2+/dynamic/equation#parameters","content":" The function definition of touying-equation is:  #let touying-equation(block: true, numbering: none, supplement: auto, scope: (:), body) = { .. }   Therefore, you can pass parameters like block, numbering, and supplement to touying-equation just like using normal math equations. ","version":"0.3.2+","tagName":"h2"},{"title":"Handout Mode","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/dynamic/handout","content":"Handout Mode While watching slides and attending lectures, the audience often wishes to have handouts for reviewing challenging concepts. Therefore, it's beneficial for the author to provide handouts for the audience, preferably before the lecture for better preparation. The handout mode differs from the regular mode as it doesn't require intricate animation effects. It retains only the last subslide of each slide. Enabling handout mode is simple: #let s = (s.methods.enable-handout-mode)(self: s) ","keywords":"","version":"0.3.2+"},{"title":"Cover Function","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/dynamic/cover","content":"","keywords":"","version":"0.3.2+"},{"title":"Default Cover Function: hide​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/0.3.2+/dynamic/cover#default-cover-function-hide","content":" The cover function is a method stored in s.methods.cover, which is later used by uncover and #pause.  The default cover function is the hide function. This function makes the internal content invisible without affecting the layout.  ","version":"0.3.2+","tagName":"h2"},{"title":"Updating the Cover Function​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/0.3.2+/dynamic/cover#updating-the-cover-function","content":" In some cases, you might want to use your own cover function. In that case, you can set your own cover function using:  let s = (s.methods.update-cover)(self: s, is-method: true, cover-fn)   Here, if you set is-method: false, Touying will wrap cover-fn into a method for you.  ","version":"0.3.2+","tagName":"h2"},{"title":"Semi-Transparent Cover Function​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/0.3.2+/dynamic/cover#semi-transparent-cover-function","content":" Touying supports a semi-transparent cover function, which can be enabled by adding:  #let s = (s.methods.enable-transparent-cover)(self: s)   You can adjust the transparency through the alpha: .. parameter.  Warning Note that the transparent-cover here does not preserve text layout like hide does because it adds an extra layer of box, which may disrupt the original structure of the page.  Internals The enable-transparent-cover method is defined as: #let s.methods.enable-transparent-cover = ( self: none, constructor: rgb, alpha: 85%, ) =&gt; { self.methods.cover = (self: none, body) =&gt; { utils.cover-with-rect( fill: utils.update-alpha( constructor: constructor, self.page-args.fill, alpha, ), body ) } self } It creates a semi-transparent rectangular mask with the same color as the background to simulate the effect of transparent content. Here, constructor: rgb and alpha: 85% indicate the background color's construction function and transparency level, respectively. ","version":"0.3.2+","tagName":"h2"},{"title":"Simple Animations","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/dynamic/simple","content":"","keywords":"","version":"0.3.2+"},{"title":"pause​","type":1,"pageTitle":"Simple Animations","url":"/touying/docs/0.3.2+/dynamic/simple#pause","content":" The purpose of #pause is straightforward – it separates the subsequent content into the next subslide. You can use multiple #pause to create multiple subslides. Here's a simple example:  #slide[ First #pause Second #pause Third ]     This example will create three subslides, gradually revealing the content.  As you can see, #pause can be used inline or on a separate line.  ","version":"0.3.2+","tagName":"h2"},{"title":"meanwhile​","type":1,"pageTitle":"Simple Animations","url":"/touying/docs/0.3.2+/dynamic/simple#meanwhile","content":" In some cases, you may need to display additional content simultaneously with #pause. In such cases, you can use #meanwhile.  #slide[ First #pause Second #meanwhile Third #pause Fourth ]     This example will create only two subslides, with &quot;First&quot; and &quot;Third&quot; displayed simultaneously, and &quot;Second&quot; and &quot;Fourth&quot; displayed simultaneously.  ","version":"0.3.2+","tagName":"h2"},{"title":"Handling layout functions​","type":1,"pageTitle":"Simple Animations","url":"/touying/docs/0.3.2+/dynamic/simple#handling-layout-functions","content":" If you use layout functions like grid inside slide[..], you might be surprised to find that subsequent #pause and #meanwhile do not work. This is because Touying cannot detect the content inside layout functions. But you can use the composer parameter of #slide() to meet most requirements.  Internals Touying doesn't rely on counter and locate to implement #pause. Instead, it has a parser written in Typst script. It parses the input content block as a sequence and then transforms and reorganizes this sequence into the series of subslides we need. ","version":"0.3.2+","tagName":"h2"},{"title":"Typst Preview","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/external/typst-preview","content":"Typst Preview The Typst Preview extension for VS Code provides an excellent slide mode, allowing us to preview and present slides. Press Ctrl/Cmd + Shift + P and type Typst Preview: Preview current file in slide mode to open the preview in slide mode. Press Ctrl/Cmd + Shift + P and type Typst Preview: Preview current file in browser and slide mode to open the slide mode in the browser. Now, you can press keys like F11 to enter fullscreen mode in the browser, making it suitable for slide presentations. Since Typst Preview is based on SVG, it can play GIF animations, which is very helpful for dynamic slides.","keywords":"","version":"0.3.2+"},{"title":"Other Animations","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/dynamic/other","content":"","keywords":"","version":"0.3.2+"},{"title":"Simple Animations​","type":1,"pageTitle":"Other Animations","url":"/touying/docs/0.3.2+/dynamic/other#simple-animations","content":" Here's an example:  #import &quot;@preview/touying:0.3.3&quot;: * #import &quot;@preview/cetz:0.2.1&quot; #import &quot;@preview/fletcher:0.4.2&quot; as fletcher: node, edge #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: (arr, ..args) =&gt; fletcher.diagram(..args, ..arr)) #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides.with(title-slide: false, outline-slide: false) // cetz animation #slide[ Cetz in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) ] // fletcher animation #slide[ Fletcher in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) ]     ","version":"0.3.2+","tagName":"h2"},{"title":"only and uncover​","type":1,"pageTitle":"Other Animations","url":"/touying/docs/0.3.2+/dynamic/other#only-and-uncover","content":" In fact, we can also use only and uncover within cetz, just requiring a bit of skill:  #slide(repeat: 3, self =&gt; [ #let (uncover, only) = utils.methods(self) Cetz in Touying in subslide #self.subslide: #cetz.canvas({ import cetz.draw: * let self = (self.methods.update-cover)(self: self, hide) let (uncover,) = utils.methods(self) rect((0,0), (5,5)) uncover(&quot;2-3&quot;, { rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) }) only(3, line((0,0), (2.5, 2.5), name: &quot;line&quot;)) }) ])  ","version":"0.3.2+","tagName":"h2"},{"title":"Pdfpc","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/external/pdfpc","content":"","keywords":"","version":"0.3.2+"},{"title":"Adding Metadata​","type":1,"pageTitle":"Pdfpc","url":"/touying/docs/0.3.2+/external/pdfpc#adding-metadata","content":" Touying remains consistent with Polylux to avoid conflicts between APIs.  For example, you can add notes using #pdfpc.speaker-note(&quot;This is a note that only the speaker will see.&quot;).  ","version":"0.3.2+","tagName":"h2"},{"title":"Pdfpc Configuration​","type":1,"pageTitle":"Pdfpc","url":"/touying/docs/0.3.2+/external/pdfpc#pdfpc-configuration","content":" To add pdfpc configurations, you can use  #let s = (s.methods.append-preamble)(self: s, pdfpc.config( duration-minutes: 30, start-time: datetime(hour: 14, minute: 10, second: 0), end-time: datetime(hour: 14, minute: 40, second: 0), last-minutes: 5, note-font-size: 12, disable-markdown: false, default-transition: ( type: &quot;push&quot;, duration-seconds: 2, angle: ltr, alignment: &quot;vertical&quot;, direction: &quot;inward&quot;, ), ))   Add the corresponding configurations. Refer to Polylux for specific configuration details.  ","version":"0.3.2+","tagName":"h2"},{"title":"Exporting .pdfpc File​","type":1,"pageTitle":"Pdfpc","url":"/touying/docs/0.3.2+/external/pdfpc#exporting-pdfpc-file","content":" Assuming your document is ./example.typ, you can export the .pdfpc file directly using:  typst query --root . ./example.typ --field value --one &quot;&lt;pdfpc-file&gt;&quot; &gt; ./example.pdfpc   With the compatibility of Touying and Polylux, you can make Polylux also support direct export by adding the following code:  #import &quot;@preview/touying:0.3.3&quot; #locate(loc =&gt; touying.pdfpc.pdfpc-file(loc))  ","version":"0.3.2+","tagName":"h2"},{"title":"Codly","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/integration/codly","content":"Codly When using Codly, we should initialize it using the s.methods.append-preamble method. #import &quot;@preview/touying:0.3.3&quot;: * #import &quot;@preview/codly:0.2.0&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.append-preamble)(self: s)[ #codly(languages: ( rust: (name: &quot;Rust&quot;, icon: &quot;\\u{fa53}&quot;, color: rgb(&quot;#CE412B&quot;)), )) ] #let (init, slides) = utils.methods(s) #show heading.where(level: 2): set block(below: 1em) #show: init #show: codly-init.with() #let (slide, empty-slide) = utils.slides(s) #show: slides #slide[ == First slide #raw(lang: &quot;rust&quot;, block: true, `pub fn main() { println!(&quot;Hello, world!&quot;); }`.text) ] ","keywords":"","version":"0.3.2+"},{"title":"Fletcher","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/integration/fletcher","content":"Fletcher Touying provides the touying-reducer, which adds pause and meanwhile animations to Fletcher. An example: #import &quot;@preview/touying:0.3.3&quot;: * #import &quot;@preview/cetz:0.2.1&quot; #import &quot;@preview/fletcher:0.4.2&quot; as fletcher: node, edge #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: (arr, ..args) =&gt; fletcher.diagram(..args, ..arr)) #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides.with(title-slide: false, outline-slide: false) // cetz animation #slide[ Cetz in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) ] // fletcher animation #slide[ Fletcher in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) ] ","keywords":"","version":"0.3.2+"},{"title":"MiTeX","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/integration/mitex","content":"MiTeX During the process of creating slides, we often already have a LaTeX math equation that we simply want to paste into the slides without transcribing it into a Typst math equation. In such cases, we can use MiTeX. Example: #import &quot;@preview/mitex:0.2.3&quot;: * Write inline equations like #mi(&quot;x&quot;) or #mi[y]. Also block equations (this case is from #text(blue.lighten(20%), link(&quot;https://katex.org/&quot;)[katex.org])): #mitex(` \\newcommand{\\f}[2]{#1f(#2)} \\f\\relax{x} = \\int_{-\\infty}^\\infty \\f\\hat\\xi\\,e^{2 \\pi i \\xi x} \\,d\\xi `) ","keywords":"","version":"0.3.2+"},{"title":"Global Settings","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/global-settings","content":"","keywords":"","version":"0.3.2+"},{"title":"Global Styles​","type":1,"pageTitle":"Global Settings","url":"/touying/docs/0.3.2+/global-settings#global-styles","content":" For Touying, global styles refer to set rules or show rules that need to be applied everywhere, such as #set text(size: 20pt).  Themes in Touying encapsulate some of their own global styles, which are placed in #show: init. For example, the university theme encapsulates the following:  self.methods.init = (self: none, body) =&gt; { set text(size: 25pt) show footnote.entry: set text(size: .6em) body }   If you are not a theme creator but want to add your own global styles to your slides, you can simply place them after #show: init and before #show: slides. For example, the metropolis theme recommends adding the following global styles:  #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init // global styles #set text(font: &quot;Fira Sans&quot;, weight: &quot;light&quot;, size: 20pt) #show math.equation: set text(font: &quot;Fira Math&quot;) #set strong(delta: 100) #set par(justify: true) #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides   However, note that you should not use #set page(..). Instead, modify s.page-args and s.padding, for example:  #(s.page-args += ( margin: (x: 0em, y: 2em), header: align(top)[Header], footer: align(bottom)[Footer], header-ascent: 0em, footer-descent: 0em, )) #(s.padding += (x: 4em, y: 0em))   ","version":"0.3.2+","tagName":"h2"},{"title":"Global Information​","type":1,"pageTitle":"Global Settings","url":"/touying/docs/0.3.2+/global-settings#global-information","content":" Like Beamer, Touying, through an OOP-style unified API design, can help you better maintain global information, allowing you to easily switch between different themes. Global information is a typical example of this.  You can set the title, subtitle, author, date, and institution information for slides using:  #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], )   In subsequent slides, you can access them through s.info or self.info.  This information is generally used in the title-slide, header, and footer of the theme, for example:  #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution)   The date can accept datetime format or content format, and the display format for the datetime format can be changed using:  #let s = (s.methods.datetime-format)(self: s, &quot;[year]-[month]-[day]&quot;)   Principle Here, we will introduce a bit of OOP concept in Touying. You should know that Typst is a typesetting language that supports incremental rendering, which means Typst caches the results of previous function calls. This requires that Typst consists of pure functions, meaning functions that do not change external variables. Thus, it is challenging to modify a global variable in the true sense, even with the use of state or counter. This would require the use of locate with callback functions to obtain the values inside, and this approach would have a significant impact on performance. Touying does not use state or counter and does not violate the principle of pure functions in Typst. Instead, it uses a clever approach in an object-oriented style, maintaining a global singleton s. In Touying, an object refers to a Typst dictionary with its own member variables and methods. We agree that methods all have a named parameter self for passing the object itself, and methods are placed in the .methods domain. With this concept, it becomes easier to write methods to update info: #let s = ( info: (:), methods: ( // update info info: (self: none, ..args) =&gt; { self.info += args.named() self }, ) ) #let s = (s.methods.info)(self: s, title: [title]) Title is #s.info.title Now you can understand the purpose of the utils.methods() function: to bind self to all methods of s and return it, simplifying the subsequent usage through unpacking syntax. #let (init, slides, alert) = utils.methods(s)   ","version":"0.3.2+","tagName":"h2"},{"title":"State Initialization​","type":1,"pageTitle":"Global Settings","url":"/touying/docs/0.3.2+/global-settings#state-initialization","content":" In general, the two ways mentioned above are sufficient for adding global settings. However, there are still situations where we need to initialize counters or states. If you place this code before #show: slides, a blank page will be created, which is something we don't want to see. In such cases, you can use the s.methods.append-preamble method. For example, when using the codly package:  #import &quot;@preview/touying:0.3.3&quot;: * #import &quot;@preview/codly:0.2.0&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.append-preamble)(self: s)[ #codly(languages: ( rust: (name: &quot;Rust&quot;, icon: &quot;\\u{fa53}&quot;, color: rgb(&quot;#CE412B&quot;)), )) ] #let (init, slides) = utils.methods(s) #show heading.where(level: 2): set block(below: 1em) #show: init #show: codly-init.with() #let (slide, empty-slide) = utils.slides(s) #show: slides #slide[ == First slide #raw(lang: &quot;rust&quot;, block: true, `pub fn main() { println!(&quot;Hello, world!&quot;); }`.text) ]     Or when configuring Pdfpc:  // Pdfpc configuration // typst query --root . ./example.typ --field value --one &quot;&lt;pdfpc-file&gt;&quot; &gt; ./example.pdfpc #let s = (s.methods.append-preamble)(self: s, pdfpc.config( duration-minutes: 30, start-time: datetime(hour: 14, minute: 10, second: 0), end-time: datetime(hour: 14, minute: 40, second: 0), last-minutes: 5, note-font-size: 12, disable-markdown: false, default-transition: ( type: &quot;push&quot;, duration-seconds: 2, angle: ltr, alignment: &quot;vertical&quot;, direction: &quot;inward&quot;, ), ))  ","version":"0.3.2+","tagName":"h2"},{"title":"CeTZ","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/integration/cetz","content":"","keywords":"","version":"0.3.2+"},{"title":"Simple Animation​","type":1,"pageTitle":"CeTZ","url":"/touying/docs/0.3.2+/integration/cetz#simple-animation","content":" An example:  #import &quot;@preview/touying:0.3.3&quot;: * #import &quot;@preview/cetz:0.2.1&quot; #import &quot;@preview/fletcher:0.4.2&quot; as fletcher: node, edge #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: (arr, ..args) =&gt; fletcher.diagram(..args, ..arr)) #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides.with(title-slide: false, outline-slide: false) // cetz animation #slide[ Cetz in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) ] // fletcher animation #slide[ Fletcher in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) ]     ","version":"0.3.2+","tagName":"h2"},{"title":"only and uncover​","type":1,"pageTitle":"CeTZ","url":"/touying/docs/0.3.2+/integration/cetz#only-and-uncover","content":" In fact, we can also use only and uncover within CeTZ, but it requires a bit of technique:  #slide(repeat: 3, self =&gt; [ #let (uncover, only) = utils.methods(self) Cetz in Touying in subslide #self.subslide: #cetz.canvas({ import cetz.draw: * let self = (self.methods.update-cover)(self: self, hide) let (uncover,) = utils.methods(self) rect((0,0), (5,5)) uncover(&quot;2-3&quot;, { rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) }) only(3, line((0,0), (2.5, 2.5), name: &quot;line&quot;)) }) ])  ","version":"0.3.2+","tagName":"h2"},{"title":"Polylux","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/integration/polylux","content":"Polylux With the compatibility between Touying and Polylux, you can make Polylux support direct export as well. Just add the following code to your Polylux source code: #import &quot;@preview/touying:0.3.3&quot; #locate(loc =&gt; touying.pdfpc.pdfpc-file(loc)) Assuming your document is ./example.typ, you can then export the .pdfpc file directly using the following command: typst query --root . ./example.typ --field value --one &quot;&lt;pdfpc-file&gt;&quot; &gt; ./example.pdfpc This eliminates the need for an additional polylux2pdfpc program.","keywords":"","version":"0.3.2+"},{"title":"Introduction to Touying","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/intro","content":"","keywords":"","version":"0.3.2+"},{"title":"Why Use Touying​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.3.2+/intro#why-use-touying","content":" Unlike PowerPoint, Touying is not a &quot;what you see is what you get&quot; tool. You can write your slides in a &quot;content and style separation&quot; manner, especially with Typst, which offers a concise yet powerful syntax, better supporting content like code blocks, mathematical formulas, and theorems. Another advantage is that, with templates, writing slides with Touying is much faster than PowerPoint. Therefore, Touying is more suitable for users with a demand for &quot;research writing.&quot;Compared to Markdown Slides, Touying, relying on Typst, has more powerful typesetting control, such as headers, footers, layout, and convenient custom functions. These are capabilities that Markdown struggles to provide, or does not do well. Additionally, Touying offers #pause and #meanwhile markers, providing more convenient dynamic slide capabilities.Compared to Beamer, Touying has faster compilation speed, a more concise syntax, and simpler theme customization capabilities. Touying's compilation speed can be maintained in milliseconds or tens of milliseconds, compared to Beamer's compilation time of seconds or tens of seconds. Touying's syntax is more concise than Beamer, making it easier to change templates and create your own templates. In terms of features, Touying supports most of Beamer's capabilities and provides some convenient features that Beamer lacks.Compared to Polylux, Touying provides an object-oriented programming (OOP) style syntax, allowing the simulation of &quot;global variables&quot; through a global singleton. This makes it easy to write themes. Touying does not rely on counter and locate to implement #pause, resulting in better performance. Touying is a community-driven project (we welcome more people to join), and it does not overly emphasize maintaining API consistency. Instead, it chooses to maintain documentation for multiple versions, providing more novel yet powerful features.  ","version":"0.3.2+","tagName":"h2"},{"title":"About the Name​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.3.2+/intro#about-the-name","content":" &quot;Touying&quot; is derived from the Chinese word &quot;投影&quot; (tóuyǐng), which means &quot;projection&quot; In English, it also conveys the meaning of a &quot;project&quot;. In comparison, the term &quot;beamer&quot; in LaTeX means a projector in German.  ","version":"0.3.2+","tagName":"h2"},{"title":"About the Documentation​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.3.2+/intro#about-the-documentation","content":" This documentation is powered by Docusaurus. We will maintain English and Chinese versions of the documentation for Touying, and for each major version, we will maintain a documentation copy. This allows you to easily refer to old versions of the Touying documentation and migrate to new versions.  Docusaurus creates a new version:  npm run docusaurus docs:version 0.y.x   ","version":"0.3.2+","tagName":"h2"},{"title":"Contribution​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.3.2+/intro#contribution","content":" Touying is free, open-source, and community-driven. If you're interested, you can visit GitHub anytime and raise issues or submit pull requests. We also welcome you to join the touying-typ organization.  ","version":"0.3.2+","tagName":"h2"},{"title":"License​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.3.2+/intro#license","content":" Touying is released under the MIT license. ","version":"0.3.2+","tagName":"h2"},{"title":"Pinit","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/integration/pinit","content":"","keywords":"","version":"0.3.2+"},{"title":"Simple Example​","type":1,"pageTitle":"Pinit","url":"/touying/docs/0.3.2+/integration/pinit#simple-example","content":" #import &quot;@preview/pinit:0.1.3&quot;: * #set text(size: 24pt) A simple #pin(1)highlighted text#pin(2). #pinit-highlight(1, 2) #pinit-point-from(2)[It is simple.]     Another example:    ","version":"0.3.2+","tagName":"h2"},{"title":"Complex Example​","type":1,"pageTitle":"Pinit","url":"/touying/docs/0.3.2+/integration/pinit#complex-example","content":"   An example of shared usage with Touying:  #import &quot;@preview/touying:0.3.3&quot;: * #import &quot;@preview/pinit:0.1.3&quot;: * #(s.page-args.paper = &quot;presentation-4-3&quot;) #let (init, slides) = utils.methods(s) #show: init #set text(size: 20pt, font: &quot;Calibri&quot;, ligatures: false) #show heading: set text(weight: &quot;regular&quot;) #show heading: set block(above: 1.4em, below: 1em) #show heading.where(level: 1): set text(size: 1.5em) // Useful functions #let crimson = rgb(&quot;#c00000&quot;) #let greybox(..args, body) = rect(fill: luma(95%), stroke: 0.5pt, inset: 0pt, outset: 10pt, ..args, body) #let redbold(body) = { set text(fill: crimson, weight: &quot;bold&quot;) body } #let blueit(body) = { set text(fill: blue) body } #let (slide, empty-slide) = utils.slides(s) #show: slides // Main body #slide(self =&gt; [ #let (uncover, only) = utils.methods(self) = Asymptotic Notation: $O$ Use #pin(&quot;h1&quot;)asymptotic notations#pin(&quot;h2&quot;) to describe asymptotic efficiency of algorithms. (Ignore constant coefficients and lower-order terms.) #pause #greybox[ Given a function $g(n)$, we denote by $O(g(n))$ the following *set of functions*: #redbold(${f(n): &quot;exists&quot; c &gt; 0 &quot;and&quot; n_0 &gt; 0, &quot;such that&quot; f(n) &lt;= c dot g(n) &quot;for all&quot; n &gt;= n_0}$) ] #pinit-highlight(&quot;h1&quot;, &quot;h2&quot;) #pause $f(n) = O(g(n))$: #pin(1)$f(n)$ is *asymptotically smaller* than $g(n)$.#pin(2) // #absolute-place(dx: 550pt, dy: 320pt, image(width: 25%, &quot;asymptotic.png&quot;)) #pause $f(n) redbold(in) O(g(n))$: $f(n)$ is *asymptotically* #redbold[at most] $g(n)$. #only(&quot;4-&quot;, pinit-line(stroke: 3pt + crimson, start-dy: -0.25em, end-dy: -0.25em, 1, 2)) #pause #block[Insertion Sort as an #pin(&quot;r1&quot;)example#pin(&quot;r2&quot;):] - Best Case: $T(n) approx c n + c' n - c''$ #pin(3) - Worst case: $T(n) approx c n + (c' \\/ 2) n^2 - c''$ #pin(4) #pinit-rect(&quot;r1&quot;, &quot;r2&quot;) #pause #pinit-place(3, dx: 15pt, dy: -15pt)[#redbold[$T(n) = O(n)$]] #pinit-place(4, dx: 15pt, dy: -15pt)[#redbold[$T(n) = O(n)$]] #pause #blueit[Q: Is $n^(3) = O(n^2)$#pin(&quot;que&quot;)? How to prove your answer#pin(&quot;ans&quot;)?] #pause #only(&quot;8-&quot;, pinit-point-to(&quot;que&quot;, fill: crimson, redbold[No.])) #only(&quot;8-&quot;, pinit-point-from(&quot;ans&quot;, body-dx: -150pt)[ Show that the equation $(3/2)^n &gt;= c$ \\ has infinitely many solutions for $n$. ]) ])    ","version":"0.3.2+","tagName":"h2"},{"title":"Touying Counters","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/progress/counters","content":"","keywords":"","version":"0.3.2+"},{"title":"Slide Counter​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/0.3.2+/progress/counters#slide-counter","content":" You can access the slide counter using states.slide-counter and display the current slide number with states.slide-counter.display().  ","version":"0.3.2+","tagName":"h2"},{"title":"Last-Slide Counter​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/0.3.2+/progress/counters#last-slide-counter","content":" In some cases, we may need to add an appendix to slides, leading to the requirement to freeze the last-slide counter. Therefore, a second counter is maintained here.  You can use states.last-slide-number to display the number of the last slide before the appendix.  ","version":"0.3.2+","tagName":"h2"},{"title":"Progress​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/0.3.2+/progress/counters#progress","content":" You can use  #states.touying-progress(ratio =&gt; ..)   to show the current progress.  ","version":"0.3.2+","tagName":"h2"},{"title":"Appendix​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/0.3.2+/progress/counters#appendix","content":" You can use  // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide, empty-slide) = utils.methods(s) #slide[ appendix ]   syntax to enter the appendix.  Additionally, #let s = (s.methods.appendix-in-outline)(self: s, false) can be used to hide the appendix section from the outline. ","version":"0.3.2+","tagName":"h2"},{"title":"Touying Sections","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/progress/sections","content":"","keywords":"","version":"0.3.2+"},{"title":"touying-outline​","type":1,"pageTitle":"Touying Sections","url":"/touying/docs/0.3.2+/progress/sections#touying-outline","content":" #touying-outline(enum-args: (:), padding: 0pt) is used to display a simple outline.  ","version":"0.3.2+","tagName":"h2"},{"title":"touying-final-sections​","type":1,"pageTitle":"Touying Sections","url":"/touying/docs/0.3.2+/progress/sections#touying-final-sections","content":" #states.touying-final-sections(final-sections =&gt; ..) is used to customize the display of the outline.  ","version":"0.3.2+","tagName":"h2"},{"title":"touying-progress-with-sections​","type":1,"pageTitle":"Touying Sections","url":"/touying/docs/0.3.2+/progress/sections#touying-progress-with-sections","content":" #states.touying-progress-with-sections((current-sections: .., final-sections: .., current-slide-number: .., last-slide-number: ..) =&gt; ..)   This is the most powerful one, allowing you to build any complex progress display with its functionalities. ","version":"0.3.2+","tagName":"h2"},{"title":"Sections and Subsections","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/sections","content":"","keywords":"","version":"0.3.2+"},{"title":"Structure​","type":1,"pageTitle":"Sections and Subsections","url":"/touying/docs/0.3.2+/sections#structure","content":" Similar to Beamer, Touying also has the concept of sections and subsections.  Generally, level 1, level 2, and level 3 headings correspond to section, subsection, and title, respectively, as in the dewdrop theme.  #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.dewdrop.register() #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Section == Subsection === Title Hello, Touying!     However, often we don't need subsections, and we can use level 1 and level 2 headings to correspond to section and title, as in the university theme.  #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.university.register() #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Section == Title Hello, Touying!     In fact, we can control this behavior through the slide-level parameter of the slides function. slide-level represents the complexity of the nested structure, starting from 0. For example, #show: slides.with(slide-level: 2) is equivalent to the section, subsection, and title structure; while #show: slides.with(slide-level: 1) is equivalent to the section and title structure.  ","version":"0.3.2+","tagName":"h2"},{"title":"Table of Contents​","type":1,"pageTitle":"Sections and Subsections","url":"/touying/docs/0.3.2+/sections#table-of-contents","content":" Displaying a table of contents in Touying is straightforward:  #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.simple.register() #let (init, slides, alert, touying-outline) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides.with(slide-level: 2) = Section == Subsection === Title ==== Table of contents #touying-outline()     Where the definition of touying-outline() is:  #let touying-outline(enum-args: (:), padding: 0pt) = { .. }   You can modify the parameters of the internal enum through enum-args.  If you have complex custom requirements for the table of contents, you can use:  #states.touying-final-sections(sections =&gt; ..)   As done in the dewdrop theme. ","version":"0.3.2+","tagName":"h2"},{"title":"Page Layout","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/layout","content":"","keywords":"","version":"0.3.2+"},{"title":"Basic Concepts​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/0.3.2+/layout#basic-concepts","content":" To create aesthetically pleasing slides using Typst, it is essential to understand Typst's page model correctly. If you don't care about customizing the page style, you can choose to skip this section. However, it is still recommended to go through this part.  Here, we illustrate Typst's default page model with a specific example.  #let container = rect.with(height: 100%, width: 100%, inset: 0pt) #let innerbox = rect.with(stroke: (dash: &quot;dashed&quot;)) #set text(size: 30pt) #set page( paper: &quot;presentation-16-9&quot;, header: container[#innerbox[Header]], header-ascent: 30%, footer: container[#innerbox[Footer]], footer-descent: 30%, ) #let padding = (x: 2em, y: 2em) #place(top + right)[Margin→] #container[ #place[Padding] #pad(..padding)[ #container[ #innerbox[Content] ] ] ]     We need to distinguish the following concepts:  Model: Typst has a model similar to the CSS Box Model, divided into Margin, Padding, and Content. However, padding is not a property of set page(..) but is obtained manually by adding #pad(..).Margin: Margins, including top, bottom, left, and right, are the core of Typst's page model. Other properties are influenced by margins, especially Header and Footer, which are actually inside the Margin.Padding: Used to add additional space between Margin and Content.Header: The Header is the content at the top of the page, divided into container and innerbox. We can notice that the edge of the header container and padding does not align but has a certain gap. This gap is actually header-ascent: 30%, and the percentage is relative to margin-top. Also, we notice that the header innerbox is actually located at the bottom left corner of the header container, meaning the innerbox defaults to #set align(left + bottom).Footer: The Footer is the content at the bottom of the page, divided into container and innerbox. We can notice that the edge of the footer container and padding does not align but has a certain gap. This gap is actually footer-descent: 30%, and the percentage is relative to margin-bottom. Also, we notice that the footer innerbox is actually located at the top left corner of the footer container, meaning the innerbox defaults to #set align(left + top).Place: The place function can achieve absolute positioning, relative to the parent container, without affecting other elements within the parent container. It can take parameters like alignment, dx, and dy, making it suitable for placing decorative elements such as logos.  Therefore, to apply Typst to create slides, we only need to set  #set page( margin: (x: 0em, y: 2em), header: align(top)[Header], footer: align(bottom)[Footer], header-ascent: 0em, footer-descent: 0em, ) #let padding = (x: 4em, y: 0em)   For example, we have  #let container = rect.with(stroke: (dash: &quot;dashed&quot;), height: 100%, width: 100%, inset: 0pt) #let innerbox = rect.with(fill: rgb(&quot;#d0d0d0&quot;)) #set text(size: 30pt) #set page( paper: &quot;presentation-16-9&quot;, margin: (x: 0em, y: 2em), header: container[#align(top)[#innerbox(width: 100%)[Header]]], header-ascent: 0em, footer: container[#align(bottom)[#innerbox(width: 100%)[Footer]]], footer-descent: 0em, ) #let padding = (x: 4em, y: 0em) #place(top + right)[↑Margin] #container[ #place[Padding] #pad(..padding)[ #container[ #innerbox[Content] ] ] ]     ","version":"0.3.2+","tagName":"h2"},{"title":"Page Management​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/0.3.2+/layout#page-management","content":" Since using the set page(..) command in Typst to modify page parameters creates a new page and cannot modify the current one, Touying chooses to maintain an s.page-args member variable and an s.padding member variable. Touying applies these parameters only when creating new slides, so users only need to focus on s.page-args and s.padding.  For example, the previous example can be transformed into  #(s.page-args += ( margin: (x: 0em, y: 2em), header: align(top)[Header], footer: align(bottom)[Footer], header-ascent: 0em, footer-descent: 0em, )) #(s.padding += (x: 4em, y: 0em))   Similarly, if you are not satisfied with the header or footer style of a theme, you can use  #(s.page-args.footer = [Custom Footer])   to replace it. However, please note that if you replace the page parameters in this way, you need to place it before #let (slide, empty-slide) = utils.slides(s), or you need to call #let (slide, empty-slide) = utils.slides(s) again.  Warning Therefore, you should not use the set page(..) command on your own; instead, you should modify the s.page-args member variable internally.  In this way, we can also query the current page parameters in real-time through s.page-args. This is useful for some functions that need to get margin or the current page's background color, such as transparent-cover. This is partly equivalent to the context get rule, and it is actually more convenient to use.  ","version":"0.3.2+","tagName":"h2"},{"title":"Application: Adding a Logo​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/0.3.2+/layout#application-adding-a-logo","content":" Adding a logo to slides is a very common but also a very versatile requirement. The difficulty lies in the fact that the required size and position of the logo often vary from person to person. Therefore, most of Touying's themes do not include configuration options for logos. But with the concepts of page layout mentioned in this section, we know that we can use the place function in the header or footer to place a logo image.  For example, suppose we decide to add the GitHub icon to the metropolis theme. We can implement it like this:  #import &quot;@preview/touying:0.3.3&quot;: * #import &quot;@preview/octique:0.1.0&quot;: * #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;) #(s.page-args.header = self =&gt; { // display the original header utils.call-or-display(self, s.page-args.header) // place logo at the top-right place(top + right, dx: -0.5em, dy: 0.3em)[ #octique(&quot;mark-github&quot;, color: rgb(&quot;#fafafa&quot;), width: 1.5em, height: 1.5em) ] }) #let (init, slide) = utils.methods(s) #show: init #slide(title: [Title])[ Logo example. ]     Here, utils.call-or-display(self, body) can be used to display body as content or a callback function in the form self =&gt; content.  ","version":"0.3.2+","tagName":"h2"},{"title":"Page Columns​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/0.3.2+/layout#page-columns","content":" If you need to divide the page into two or three columns, you can use the compose feature provided by the default slide function in Touying. The simplest example is as follows:  #slide[ First column. ][ Second column. ]     If you need to change the way columns are composed, you can modify the composer parameter of slide. The default parameter is utils.side-by-side.with(columns: auto, gutter: 1em). If we want the left column to occupy the remaining width, we can use  #slide(composer: (1fr, auto))[ First column. ][ Second column. ]    ","version":"0.3.2+","tagName":"h2"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/start","content":"","keywords":"","version":"0.3.2+"},{"title":"More Complex Examples​","type":1,"pageTitle":"Getting Started","url":"/touying/docs/0.3.2+/start#more-complex-examples","content":" In fact, Touying provides various styles for slide writing. You can also use the #slide[..] syntax to access more powerful features provided by Touying.    Touying offers many built-in themes to easily create beautiful slides. For example, in this case:  #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;)   you can use the university theme. For more detailed tutorials on themes, you can refer to the following sections.  #import &quot;@preview/touying:0.3.3&quot;: * #import &quot;@preview/cetz:0.2.1&quot; #import &quot;@preview/fletcher:0.4.2&quot; as fletcher: node, edge // cetz and fletcher bindings for touying #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: (arr, ..args) =&gt; fletcher.diagram(..args, ..arr)) // Register university theme // You can replace it with other themes and it can still work normally #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) // Global information configuration #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) // Pdfpc configuration // typst query --root . ./example.typ --field value --one &quot;&lt;pdfpc-file&gt;&quot; &gt; ./example.pdfpc #let s = (s.methods.append-preamble)(self: s, pdfpc.config( duration-minutes: 30, start-time: datetime(hour: 14, minute: 10, second: 0), end-time: datetime(hour: 14, minute: 40, second: 0), last-minutes: 5, note-font-size: 12, disable-markdown: false, default-transition: ( type: &quot;push&quot;, duration-seconds: 2, angle: ltr, alignment: &quot;vertical&quot;, direction: &quot;inward&quot;, ), )) // Extract methods #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert // Extract slide functions #let (slide, empty-slide) = utils.slides(s) #show: slides = Animation == Simple Animation #slide[ We can use `#pause` to #pause display something later. #pause Just like this. #meanwhile Meanwhile, #pause we can also use `#meanwhile` to #pause display other content synchronously. ] == Complex Animation #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) At subslide #self.subslide, we can use #uncover(&quot;2-&quot;)[`#uncover` function] for reserving space, use #only(&quot;2-&quot;)[`#only` function] for not reserving space, #alternatives[call `#only` multiple times \\u{2717}][use `#alternatives` function #sym.checkmark] for choosing one of the alternatives. ]) == Math Equation Animation #slide[ Touying equation with `pause`: #touying-equation(` f(x) &amp;= pause x^2 + 2x + 1 \\ &amp;= pause (x + 1)^2 \\ `) #meanwhile Here, #pause we have the expression of $f(x)$. #pause By factorizing, we can obtain this result. ] == CeTZ Animation #slide[ CeTZ Animation in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) ] == Fletcher Animation #slide[ Fletcher Animation in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) ] = Others == Side-by-side #slide[ First column. ][ Second column. ] == Multiple Pages #slide[ #lorem(200) ] // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide, empty-slide) = utils.slides(s) == Appendix #slide[ Please pay attention to the current slide number. ]     Touying offers many built-in themes to easily create beautiful slides. For example, in this case:  #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;)   you can use the university theme. For more detailed tutorials on themes, you can refer to the following sections. ","version":"0.3.2+","tagName":"h2"},{"title":"Aqua Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/themes/aqua","content":"","keywords":"","version":"0.3.2+"},{"title":"Initialization​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/0.3.2+/themes/aqua#initialization","content":" You can initialize it with the following code:  #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.aqua.register(aspect-ratio: &quot;16-9&quot;, lang: &quot;en&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, outline-slide, focus-slide) = utils.slides(s) #show: slides   Where register takes parameters:  aspect-ratio: The aspect ratio of slides, either &quot;16-9&quot; or &quot;4-3&quot;, default is &quot;16-9&quot;.footer: Content shown on the right side of the footer, default is states.slide-counter.display().lang: Language configuration, currently supports &quot;en&quot; and &quot;zh&quot;, default is &quot;en&quot;.  Aqua theme also provides an #alert[..] function, which you can utilize with #show strong: alert using *alert text* syntax.  ","version":"0.3.2+","tagName":"h2"},{"title":"Color Themes​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/0.3.2+/themes/aqua#color-themes","content":" Aqua by default uses:  #let s = (s.methods.colors)( self: s, primary: rgb(&quot;#003F88&quot;), primary-light: rgb(&quot;#2159A5&quot;), primary-lightest: rgb(&quot;#F2F4F8&quot;),   color themes, which you can modify by #let s = (s.methods.colors)(self: s, ..).  ","version":"0.3.2+","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/0.3.2+/themes/aqua#slide-function-family","content":" Aqua theme offers a series of custom slide functions:  #title-slide(..args)   title-slide will read information from self.info for display.    #let outline-slide(self: none, enum-args: (:), leading: 50pt)   Display an outline slide.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // Aqua theme title: auto, )[ ... ]   A default ordinary slide function with title and footer, where title defaults to the current section title.    #focus-slide[ ... ]   Used to draw the audience's attention. The background color is self.colors.primary.    #new-section-slide(title)   Start a new section with the given title.  ","version":"0.3.2+","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/0.3.2+/themes/aqua#slides-function","content":" The slides function has parameters:  title-slide: Default is true.outline-slide: Default is true.slide-level: Default is 1.  They can be set via #show: slides.with(..).  PS: The outline title can be modified via #(s.outline-title = [Outline]).  Additionally, you can disable the automatic inclusion of new-section-slide functionality by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.aqua.register(aspect-ratio: &quot;16-9&quot;, lang: &quot;en&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, outline-slide, focus-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.3.2+","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/0.3.2+/themes/aqua#example","content":" #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.aqua.register(aspect-ratio: &quot;16-9&quot;, lang: &quot;en&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, outline-slide, focus-slide) = utils.slides(s) #show: slides = The Section == Slide Title #slide[ #lorem(40) ] #focus-slide[ Another variant with primary color in background... ] == Summary #align(center + horizon)[ #set text(size: 3em, weight: &quot;bold&quot;, s.colors.primary) THANKS FOR ALL ]  ","version":"0.3.2+","tagName":"h2"},{"title":"Dewdrop Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/themes/dewdrop","content":"","keywords":"","version":"0.3.2+"},{"title":"Initialization​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.3.2+/themes/dewdrop#initialization","content":" You can initialize it using the following code:  #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.dewdrop.register( aspect-ratio: &quot;16-9&quot;, footer: [Dewdrop], navigation: &quot;mini-slides&quot;, // navigation: &quot;sidebar&quot;, // navigation: none, ) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides   The register function takes the following parameters:  aspect-ratio: The aspect ratio of the slides, either &quot;16-9&quot; or &quot;4-3,&quot; defaulting to &quot;16-9.&quot;navigation: The navigation bar style, which can be &quot;sidebar&quot;, &quot;mini-slides&quot;, or none, defaulting to &quot;sidebar&quot;.sidebar: Sidebar navigation settings, defaulting to (width: 10em).mini-slides: Mini-slides settings, defaulting to (height: 2em, x: 2em, section: false, subsection: true). height: The height of mini-slides, defaulting to 2em.x: Padding on the x-axis for mini-slides, defaulting to 2em.section: Whether to display slides after the section and before the subsection, defaulting to false.subsection: Whether to split mini-slides based on subsections or compress them into one line, defaulting to true. footer: Content displayed in the footer, defaulting to [], or it can be passed as a function like self =&gt; self.info.author.footer-right: Content displayed on the right side of the footer, defaulting to states.slide-counter.display() + &quot; / &quot; + states.last-slide-number.primary: Primary color, defaulting to rgb(&quot;#0c4842&quot;).alpha: Transparency, defaulting to 70%.  The Dewdrop theme also provides an #alert[..] function, which you can use with #show strong: alert using the *alert text* syntax.  ","version":"0.3.2+","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.3.2+/themes/dewdrop#color-theme","content":" Dewdrop uses the following default color theme:  #let s = (s.methods.colors)( self: s, neutral-darkest: rgb(&quot;#000000&quot;), neutral-dark: rgb(&quot;#202020&quot;), neutral-light: rgb(&quot;#f3f3f3&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), primary: primary, )   You can modify this color theme using #let s = (s.methods.colors)(self: s, ..).  ","version":"0.3.2+","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.3.2+/themes/dewdrop#slide-function-family","content":" The Dewdrop theme provides a variety of custom slide functions:  #title-slide(extra: none, ..args)   title-slide reads information from self.info for display, and you can also pass in an extra parameter to display additional information.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // Dewdrop theme footer: auto, )[ ... ]   A default slide with navigation and footer, where the footer is what you set.    #focus-slide[ ... ]   Used to draw attention, with the background color set to self.colors.primary.  ","version":"0.3.2+","tagName":"h2"},{"title":"Special Functions​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.3.2+/themes/dewdrop#special-functions","content":" #d-outline(enum-args: (:), list-args: (:), cover: true)   Displays the current table of contents. The cover parameter specifies whether to hide sections in an inactive state.    #d-sidebar()   An internal function used to display the sidebar.    #d-mini-slides()   An internal function used to display mini-slides.  ","version":"0.3.2+","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.3.2+/themes/dewdrop#slides-function","content":" The slides function has the following parameters:  title-slide: Defaults to true.outline-slide: Defaults to true.slide-level: Defaults to 2.  You can set these using #show: slides.with(..).  PS: You can modify the outline title using #(s.outline-title = [Outline]).  And the function of automatically adding new-section-slide can be turned off by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.dewdrop.register(aspect-ratio: &quot;16-9&quot;, footer: [Dewdrop]) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.3.2+","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.3.2+/themes/dewdrop#example","content":" #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.dewdrop.register( aspect-ratio: &quot;16-9&quot;, footer: [Dewdrop], navigation: &quot;mini-slides&quot;, // navigation: none, ) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides = Section A == Subsection A.1 #slide[ A slide with equation: $ x_(n+1) = (x_n + a/x_n) / 2 $ ] == Subsection A.2 #slide[ A slide without a title but with *important* infos ] = Section B == Subsection B.1 #slide[ #lorem(80) ] #focus-slide[ Wake up! ] == Subsection B.2 #slide[ We can use `#pause` to #pause display something later. #pause Just like this. #meanwhile Meanwhile, #pause we can also use `#meanwhile` to #pause display other content synchronously. ] // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide, empty-slide) = utils.slides(s) = Appendix === Appendix #slide[ Please pay attention to the current slide number. ]  ","version":"0.3.2+","tagName":"h2"},{"title":"Fit to Height / Width","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/utilities/fit-to","content":"","keywords":"","version":"0.3.2+"},{"title":"Fit to Height​","type":1,"pageTitle":"Fit to Height / Width","url":"/touying/docs/0.3.2+/utilities/fit-to#fit-to-height","content":" If you need to make an image fill the remaining slide height, you can try the fit-to-height function:  #utils.fit-to-height(1fr)[BIG]   Function definition:  #let fit-to-height( width: none, prescale-width: none, grow: true, shrink: true, height, body ) = { .. }   Parameters:  width: If specified, this will determine the width of the content after scaling. So, if you want the scaled content to fill half of the slide width, you can use width: 50%.prescale-width: This parameter allows you to make Typst's layout assume that the given content is to be laid out in a container of a certain width before scaling. For example, you can use prescale-width: 200% assuming the slide's width is twice the original.grow: Whether it can grow, default is true.shrink: Whether it can shrink, default is true.height: The specified height.body: The specific content.  ","version":"0.3.2+","tagName":"h2"},{"title":"Fit to Width​","type":1,"pageTitle":"Fit to Height / Width","url":"/touying/docs/0.3.2+/utilities/fit-to#fit-to-width","content":" If you need to limit the title width to exactly fill the slide width, you can try the fit-to-width function:  #utils.fit-to-width(1fr)[#lorem(20)]   Function definition:  #let fit-to-width(grow: true, shrink: true, width, body) = { .. }   Parameters:  grow: Whether it can grow, default is true.shrink: Whether it can shrink, default is true.width: The specified width.body: The specific content. ","version":"0.3.2+","tagName":"h2"},{"title":"Simple Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/themes/simple","content":"","keywords":"","version":"0.3.2+"},{"title":"Initialization​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/0.3.2+/themes/simple#initialization","content":" You can initialize it using the following code:  #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;, footer: [Simple slides]) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide, title-slide, centered-slide, focus-slide) = utils.slides(s) #show: slides   The register function takes the following parameters:  aspect-ratio: The aspect ratio of the slides, either &quot;16-9&quot; or &quot;4-3,&quot; defaulting to &quot;16-9.&quot;footer: Content displayed in the footer, defaulting to [], or it can be passed as a function like self =&gt; self.info.author.footer-right: Content displayed on the right side of the footer, defaulting to states.slide-counter.display() + &quot; / &quot; + states.last-slide-number.background: Background color, defaulting to white.foreground: Text color, defaulting to black.primary: Theme color, defaulting to aqua.darken(50%).  ","version":"0.3.2+","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/0.3.2+/themes/simple#slide-function-family","content":" The Simple theme provides a variety of custom slide functions:  #centered-slide(section: ..)[ ... ]   A slide with content centered, and the section parameter can be used to create a new section.    #title-slide[ ... ]   Similar to centered-slide, this is provided for consistency with Polylux syntax.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // simple theme args footer: auto, )[ ... ]   A default slide with headers and footers, where the header corresponds to the current section, and the footer is what you set.    #focus-slide(foreground: ..., background: ...)[ ... ]   Used to draw attention, it optionally accepts a foreground color (defaulting to white) and a background color (defaulting to auto, i.e., self.colors.primary).  ","version":"0.3.2+","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/0.3.2+/themes/simple#slides-function","content":" The slides function has the following parameter:  slide-level: Defaults to 1.  You can set it using #show: slides.with(..).  And the function of automatically adding new-section-slide can be turned off by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;, footer: [Simple slides]) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide, title-slide, centered-slide, focus-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.3.2+","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/0.3.2+/themes/simple#example","content":" #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;, footer: [Simple slides]) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide, title-slide, centered-slide, focus-slide) = utils.slides(s) #show: slides #title-slide[ = Keep it simple! #v(2em) Alpha #footnote[Uni Augsburg] #h(1em) Bravo #footnote[Uni Bayreuth] #h(1em) Charlie #footnote[Uni Chemnitz] #h(1em) July 23 ] == First slide #slide[ #lorem(20) ] #focus-slide[ _Focus!_ This is very important. ] = Let's start a new section! == Dynamic slide #slide[ Did you know that... #pause ...you can see the current section at the top of the slide? ]  ","version":"0.3.2+","tagName":"h2"},{"title":"Metropolis Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/themes/metropolis","content":"","keywords":"","version":"0.3.2+"},{"title":"Initialization​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.3.2+/themes/metropolis#initialization","content":" You can initialize it using the following code:  #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides   The register function takes the following parameters:  aspect-ratio: The aspect ratio of the slides, either &quot;16-9&quot; or &quot;4-3,&quot; defaulting to &quot;16-9.&quot;header: Content displayed in the header, defaulting to states.current-section-title, or it can be passed as a function like self =&gt; self.info.title.footer: Content displayed in the footer, defaulting to [], or it can be passed as a function like self =&gt; self.info.author.footer-right: Content displayed on the right side of the footer, defaulting to states.slide-counter.display() + &quot; / &quot; + states.last-slide-number.footer-progress: Whether to show the progress bar at the bottom of the slide, defaulting to true.  The Metropolis theme also provides an #alert[..] function, which you can use with #show strong: alert using the *alert text* syntax.  ","version":"0.3.2+","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.3.2+/themes/metropolis#color-theme","content":" Metropolis uses the following default color theme:  #let s = (s.methods.colors)( self: s, neutral-lightest: rgb(&quot;#fafafa&quot;), primary-dark: rgb(&quot;#23373b&quot;), secondary-light: rgb(&quot;#eb811b&quot;), secondary-lighter: rgb(&quot;#d6c6b7&quot;), )   You can modify this color theme using #let s = (s.methods.colors)(self: s, ..).  ","version":"0.3.2+","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.3.2+/themes/metropolis#slide-function-family","content":" The Metropolis theme provides a variety of custom slide functions:  #title-slide(extra: none, ..args)   title-slide reads information from self.info for display, and you can also pass in an extra parameter to display additional information.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // metropolis theme title: auto, footer: auto, align: horizon, )[ ... ]   A default slide with headers and footers, where the title defaults to the current section title, and the footer is what you set.    #focus-slide[ ... ]   Used to draw attention, with the background color set to self.colors.primary-dark.    #new-section-slide(short-title: auto, title)   Creates a new section with the given title.  ","version":"0.3.2+","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.3.2+/themes/metropolis#slides-function","content":" The slides function has the following parameters:  title-slide: Defaults to true.outline-slide: Defaults to true.slide-level: Defaults to 1.  You can set these using #show: slides.with(..).  PS: You can modify the outline title using #(s.outline-title = [Outline]).  And the function of automatically adding new-section-slide can be turned off by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slide, slides, title-slide, new-section-slide, focus-slide, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.3.2+","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.3.2+/themes/metropolis#example","content":" #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #set text(font: &quot;Fira Sans&quot;, weight: &quot;light&quot;, size: 20pt) #show math.equation: set text(font: &quot;Fira Math&quot;) #set strong(delta: 100) #set par(justify: true) #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides = First Section #slide[ A slide without a title but with some *important* information. ] == A long long long long long long long long long long long long long long long long long long long long long long long long Title #slide[ A slide with equation: $ x_(n+1) = (x_n + a/x_n) / 2 $ #lorem(200) ] = Second Section #focus-slide[ Wake up! ] == Simple Animation #slide[ A simple #pause dynamic slide with #alert[alert] #pause text. ] // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide, empty-slide) = utils.slides(s) = Appendix #slide[ Appendix. ]  ","version":"0.3.2+","tagName":"h2"},{"title":"University Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/themes/university","content":"","keywords":"","version":"0.3.2+"},{"title":"Initialization​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.3.2+/themes/university#initialization","content":" You can initialize the University theme using the following code:  #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #let (slide, empty-slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) #show: slides   The register function accepts the following parameters:  aspect-ratio: Sets the aspect ratio of the slides to &quot;16-9&quot; or &quot;4-3,&quot; with the default being &quot;16-9.&quot;progress-bar: Controls whether the progress bar at the top of each slide is displayed, with the default being true.display-current-section: Whether to display the current section.footer-columns: The width of the footer in the bottom three columns, the default is (25%, 1fr, 25%).footer-a: The first column, default is self =&gt; self.info.author.footer-b: Second column, default is self =&gt; if self.info.short-title == auto { self.info.title } else { self.info.short-title }.footer-c: third column, default is  self =&gt; { h(1fr) utils.info-date(self) h(1fr) states.slide-counter.display() + &quot; / &quot; + states.last-slide-number h(1fr) }   Additionally, the University theme provides an #alert[..] function, which you can use with the #show strong: alert syntax for emphasizing text with *alert text*.  ","version":"0.3.2+","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.3.2+/themes/university#color-theme","content":" The University theme defaults to the following color theme:  #let s = (s.methods.colors)( self: s, primary: rgb(&quot;#04364A&quot;), secondary: rgb(&quot;#176B87&quot;), tertiary: rgb(&quot;#448C95&quot;), )   You can modify this color theme using #let s = (s.methods.colors)(self: s, ..).  ","version":"0.3.2+","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.3.2+/themes/university#slide-function-family","content":" The University theme provides a series of custom slide functions:  ","version":"0.3.2+","tagName":"h2"},{"title":"Title Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.3.2+/themes/university#title-slide","content":" #title-slide(logo: none, authors: none, ..args)   The title-slide function reads information from self.info for display. You can also pass the logo parameter and an array-type authors parameter.  ","version":"0.3.2+","tagName":"h3"},{"title":"Regular Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.3.2+/themes/university#regular-slide","content":" #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // university theme title: none, subtitle: none, header: none, footer: auto, )[ ... ]   The default slide function with a title and footer. The title defaults to the current section title, and the footer is set as per your configuration.  ","version":"0.3.2+","tagName":"h3"},{"title":"Focus Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.3.2+/themes/university#focus-slide","content":" #focus-slide(background-img: ..., background-color: ...)[ ... ]   Used to capture the audience's attention. The default background color is self.colors.primary.  ","version":"0.3.2+","tagName":"h3"},{"title":"Matrix Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.3.2+/themes/university#matrix-slide","content":" #matrix-slide(columns: ..., rows: ...)[ ... ][ ... ]   Refer to the documentation.  ","version":"0.3.2+","tagName":"h3"},{"title":"slides Function​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.3.2+/themes/university#slides-function","content":" The slides function has parameters:  title-slide: Defaults to true.slide-level: Defaults to 1.  You can set these parameters using #show: slides.with(..).  And the function of automatically adding new-section-slide can be turned off by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #let (slide, empty-slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.3.2+","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.3.2+/themes/university#example","content":" #import &quot;@preview/touying:0.3.3&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #let (slide, empty-slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) #show: slides.with(title-slide: false) #title-slide(authors: ([Author A], [Author B])) = The Section == Slide Title #slide[ #lorem(40) ] #slide(subtitle: emph[What is the problem?])[ #lorem(40) ] #focus-slide[ *Another variant with primary color in background...* ] #matrix-slide[ left ][ middle ][ right ] #matrix-slide(columns: 1)[ top ][ bottom ] #matrix-slide(columns: (1fr, 2fr, 1fr), ..(lorem(8),) * 9)  ","version":"0.3.2+","tagName":"h2"},{"title":"Object-Oriented Programming","type":0,"sectionRef":"#","url":"/touying/docs/0.3.2+/utilities/oop","content":"Object-Oriented Programming Touying provides some convenient utility functions for object-oriented programming. #let call-or-display(self, it) = { if type(it) == function { return it(self) } else { return it } } Call or display as-is. #let methods(self) = { .. } Used to bind self to methods and return, very commonly used.","keywords":"","version":"0.3.2+"},{"title":"Changelog","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/changelog","content":"","keywords":"","version":"0.3.x"},{"title":"v0.3.1​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.x/changelog#v031","content":" fix some typosfix slide-level bugfix bug of pdfpc label  ","version":"0.3.x","tagName":"h2"},{"title":"v0.3.0​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.x/changelog#v030","content":" ","version":"0.3.x","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.x/changelog#features","content":" better show-slides mode.support align and pad.  ","version":"0.3.x","tagName":"h3"},{"title":"Documentation​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.x/changelog#documentation","content":" Add more detailed documentation.  ","version":"0.3.x","tagName":"h3"},{"title":"Refactor​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.x/changelog#refactor","content":" simplify theme.  ","version":"0.3.x","tagName":"h3"},{"title":"Fix​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.x/changelog#fix","content":" fix many bugs.  ","version":"0.3.x","tagName":"h3"},{"title":"v0.2.1​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.x/changelog#v021","content":" ","version":"0.3.x","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.x/changelog#features-1","content":" Touying-reducer: support cetz and fletcher animationuniversity theme: add university theme  ","version":"0.3.x","tagName":"h3"},{"title":"Fix​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.x/changelog#fix-1","content":" fix footer progress in metropolis themefix some bugs in simple and dewdrop themesfix bug that outline does not display more than 4 sections  ","version":"0.3.x","tagName":"h3"},{"title":"v0.2.0​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.3.x/changelog#v020","content":" Object-oriented programming: Singleton s, binding methods utils.methods(s) and (self: obj, ..) =&gt; {..} methods.Page arguments management: Instead of using #set page(..), you should use self.page-args to retrieve or set page parameters, thereby avoiding unnecessary creation of new pages.#pause for sequence content: You can use #pause at the outermost level of a slide, including inline and list.#pause for layout functions: You can use the composer parameter to add yourself layout function like utils.side-by-side, and simply use multiple pos parameters like #slide[..][..].#meanwhile for synchronous display: Provide a #meanwhile for resetting subslides counter.#pause and #meanwhile for math equation: Provide a #touying-equation(&quot;x + y pause + z&quot;) for math equation animations.Slides: Create simple slides using standard headings.Callback-style uncover, only and alternatives: Based on the concise syntax provided by Polylux, allow precise control of the timing for displaying content. You should manually control the number of subslides using the repeat parameter. Transparent cover: Enable transparent cover using oop syntax like #let s = (s.methods.enable-transparent-cover)(self: s).Handout mode: enable handout mode by #let s = (s.methods.enable-handout-mode)(self: s).Fit-to-width and fit-to-height: Fit-to-width for title in header and fit-to-height for image. utils.fit-to-width(grow: true, shrink: true, width, body)utils.fit-to-height(width: none, prescale-width: none, grow: true, shrink: true, height, body) Slides counter: states.slide-counter.display() + &quot; / &quot; + states.last-slide-number and states.touying-progress(ratio =&gt; ..).Appendix: Freeze the last-slide-number to prevent the slide number from increasing further.Sections: Touying's built-in section support can be used to display the current section title and show progress. section and subsection parameter in #slide to register a new section or subsection.states.current-section-title to get the current section.states.touying-outline or s.methods.touying-outline to display a outline of sections.states.touying-final-sections(sections =&gt; ..) for custom outline display.states.touying-progress-with-sections((current-sections: .., final-sections: .., current-slide-number: .., last-slide-number: ..) =&gt; ..) for powerful progress display. Navigation bar: Navigation bar like here by states.touying-progress-with-sections(..), in dewdrop theme.Pdfpc: pdfpc support and export .pdfpc file without external tool by typst query command simply. ","version":"0.3.x","tagName":"h2"},{"title":"Creating Your Own Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/build-your-own-theme","content":"","keywords":"","version":"0.3.x"},{"title":"Import​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.3.x/build-your-own-theme#import","content":" Depending on whether the theme is for personal use or part of Touying, you can import in two ways:  If for personal use:  #import &quot;@preview/touying:0.3.1&quot;: *   If part of Touying themes:  #import &quot;../utils/utils.typ&quot; #import &quot;../utils/states.typ&quot; #import &quot;../utils/components.typ&quot;   Additionally, add the import statement in Touying's themes/themes.typ:  #import &quot;bamboo.typ&quot;   ","version":"0.3.x","tagName":"h2"},{"title":"Register Function and Init Method​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.3.x/build-your-own-theme#register-function-and-init-method","content":" Next, we'll distinguish between the bamboo.typ template file and the main.typ file, the latter of which is sometimes omitted.  Generally, the first step in creating slides is to determine font size and page aspect ratio. Therefore, we need to register an initialization method:  // bamboo.typ #import &quot;@preview/touying:0.3.1&quot;: * #let register( aspect-ratio: &quot;16-9&quot;, self, ) = { self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, ) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self } // main.typ #import &quot;@preview/touying:0.3.1&quot;: * #import &quot;bamboo.typ&quot; #let s = bamboo.register(s, aspect-ratio: &quot;16-9&quot;) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide,) = utils.slides(s) #show: slides = First Section == First Slide #slide[ A slide with a title and an *important* information. ]   As you can see, we created a register function and passed an aspect-ratio parameter to set the page aspect ratio. As you might already know, in Touying, we should not use set page(..) to set page parameters but rather use the syntax self.page-args += (..) to set them, as explained in the Page Layout section.  In addition, we registered a self.methods.init method, which can be used for some global style settings. For example, in this case, we added set text(size: 20pt) to set the font size. You can also place additional global style settings here, such as set par(justify: true). Since the init function is placed inside self.methods, it is a method, not a regular function. Therefore, we need to add the parameter self: none to use it properly.  As you can see, later in main.typ, we apply the global style settings in init using #show: init, where init is bound and unpacked through utils.methods(s).  If you pay extra attention, you'll notice that the register function has an independent self at the end. This actually represents returning the modified self as the return value, which will be saved in #let s = ... This line is therefore indispensable.  ","version":"0.3.x","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.3.x/build-your-own-theme#color-theme","content":" Choosing an attractive color theme for your slides is crucial. Touying provides built-in color theme support to minimize API differences between different themes. Touying offers two dimensions of color selection: the first is neutral, primary, secondary, and tertiary for hue distinction, with primary being the most commonly used; the second is default, light, lighter, lightest, dark, darker, and darkest for brightness distinction.  As we are creating the Bamboo theme, we chose a color for the primary theme, similar to bamboo (rgb(&quot;#5E8B65&quot;)), and included neutral lightest/darkest as background and font colors.  As shown in the code below, we use (self.methods.colors)(self: self, ..) to modify the color theme. Essentially, it is a wrapper for self.colors += (..).  #let register( aspect-ratio: &quot;16-9&quot;, self, ) = { // color theme self = (self.methods.colors)( self: self, primary: rgb(&quot;#5E8B65&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), neutral-darkest: rgb(&quot;#000000&quot;), ) self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, ) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self }   After adding the color theme, we can access the color using syntax like self.colors.primary.  It's worth noting that users can change the theme color at any time using:  #let s = (s.methods.colors)(self: s, primary: rgb(&quot;#3578B9&quot;))   This flexibility demonstrates Touying's powerful customization capabilities.  ","version":"0.3.x","tagName":"h2"},{"title":"Practical: Custom Alert Method​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.3.x/build-your-own-theme#practical-custom-alert-method","content":" In general, we need to provide a #alert[..] function for users, similar to #strong[..]. Typically, #alert[..] emphasizes text using the primary theme color for aesthetics. We add a line in the register function:  self.methods.alert = (self: none, it) =&gt; text(fill: self.colors.primary, it)   This code sets the text color to self.colors.primary, utilizing the theme's primary color.  ","version":"0.3.x","tagName":"h2"},{"title":"Custom Header and Footer​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.3.x/build-your-own-theme#custom-header-and-footer","content":" Here, assuming you've already read the Page Layout section, we know we should add headers and footers to the slides.  Firstly, we add self.bamboo-title = []. This means we save the title of the current slide as a member variable self.bamboo-title, stored in self. This makes it easy to use in the header and later modifications. Similarly, we create self.bamboo-footer, saving the footer: [] parameter from the register function for displaying in the bottom-left corner.  It's worth noting that our header is actually a content function in the form of let header(self) = { .. } with the self parameter, allowing us to get the latest information from self. For example, self.bamboo-title. The footer is similar.  The components.cell used inside is actually #let cell = block.with(width: 100%, height: 100%, above: 0pt, below: 0pt, breakable: false), and show: components.cell is shorthand for components.cell(body). The show: pad.with(.4em) in the footer is similar.  Another point to note is the states module, which contains many counters and state-related content. For example, states.current-section-title is used to display the current section, and states.slide-counter.display() + &quot; / &quot; + states.last-slide-number is used to display the current page number and total number of pages.  We observe the usage of utils.call-or-display(self, self.bamboo-footer) to display self.bamboo-footer. This is used to handle situations like self.bamboo-footer = (self) =&gt; {..}, ensuring a unified approach to displaying content functions and content.  To ensure proper display of the header and footer and sufficient spacing from the main content, we also set top and bottom margins and left and right padding, such as self.page-args += (margin: (top: 4em, bottom: 1.5em, x: 0em)) and self.padding = (x: 2em, y: 0em). The left and right margin is 0em to allow the header to occupy the full page width. The left and right spacing of the main content is achieved through left and right padding of 2em.  We also need to customize a slide method that accepts slide(self: none, title: auto, ..args). The first self: none is a required method parameter for getting the latest self. The second title is used to update self.bamboo-title for displaying in the header. The third ..args collects the remaining parameters and passes them to (self.methods.touying-slide)(self: self, ..args), which is necessary for the Touying slide functionality to work properly. Additionally, we need to register this method in the register function with self.methods.slide = slide.  // bamboo.typ #import &quot;@preview/touying:0.3.1&quot;: * #let slide(self: none, title: auto, ..args) = { if title != auto { self.bamboo-title = title } (self.methods.touying-slide)(self: self, ..args) } #let register( aspect-ratio: &quot;16-9&quot;, footer: [], self, ) = { // color theme self = (self.methods.colors)( self: self, primary: rgb(&quot;#5E8B65&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), neutral-darkest: rgb(&quot;#000000&quot;), ) // variables for later use self.bamboo-title = [] self.bamboo-footer = footer // set page let header(self) = { set align(top) show: components.cell.with(fill: self.colors.primary, inset: 1em) set align(horizon) set text(fill: self.colors.neutral-lightest, size: .7em) states.current-section-title linebreak() set text(size: 1.5em) utils.call-or-display(self, self.bamboo-title) } let footer(self) = { set align(bottom) show: pad.with(.4em) set text(fill: self.colors.neutral-darkest, size: .8em) utils.call-or-display(self, self.bamboo-footer) h(1fr) states.slide-counter.display() + &quot; / &quot; + states.last-slide-number } self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, header: header, footer: footer, margin: (top: 4em, bottom: 1.5em, x: 0em), ) self.padding = (x: 2em, y: 0em) // register methods self.methods.slide = slide self.methods.alert = (self: none, it) =&gt; text(fill: self.colors.primary, it) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self } // main.typ #import &quot;@preview/touying:0.3.1&quot;: * #import &quot;bamboo.typ&quot; #let s = bamboo.register(s, aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide,) = utils.slides(s) #show: slides = First Section == First Slide #slide[ A slide with a title and an *important* information. ]     ","version":"0.3.x","tagName":"h2"},{"title":"Custom Special Slide​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.3.x/build-your-own-theme#custom-special-slide","content":" Building upon the basic slide, we further add some special slide functions such as title-slide, focus-slide, and a custom slides method.  For the title-slide method, first, we call self = utils.empty-page(self). This function clears self.page-args.header, self.page-args.footer, and sets margin and padding to 0em, creating a blank page effect. Then, we use let info = self.info + args.named() to get information stored in self.info and update it with the passed args.named() for later use as info.title. The specific page content body will vary for each theme, so we won't go into details here. Finally, we call `(self.methods.touying-slide)(self: self, repeat: none, body  ), where repeat: noneindicates that this page does not require animation effects, and passing thebody` parameter displays its content.  For the new-section-slide method, the process is similar. The only thing to note is that in (self.methods.touying-slide)(self: self, repeat: none, section: section, body), we pass an additional section: section parameter to declare the creation of a new section. Another point to note is that besides self.methods.new-section-slide = new-section-slide, we also register self.methods.touying-new-section-slide = new-section-slide, so new-section-slide will be automatically called when encountering a first-level title.  For the focus-slide method, most of the content is similar, but it's worth noting that we use self.page-args += (..) to update the page's background color.  Finally, we update the slides(self: none, title-slide: true, slide-level: 1, ..args) method. When title-slide is true, using #show: slides will automatically create a title-slide. Setting slide-level: 1 indicates that the first-level and second-level titles correspond to section and title, respectively.  // bamboo.typ #import &quot;@preview/touying:0.3.1&quot;: * #let slide(self: none, title: auto, ..args) = { if title != auto { self.bamboo-title = title } (self.methods.touying-slide)(self: self, ..args) } #let title-slide(self: none, ..args) = { self = utils.empty-page(self) let info = self.info + args.named() let body = { set align(center + horizon) block( fill: self.colors.primary, width: 80%, inset: (y: 1em), radius: 1em, text(size: 2em, fill: self.colors.neutral-lightest, weight: &quot;bold&quot;, info.title) ) set text(fill: self.colors.neutral-darkest) if info.author != none { block(info.author) } if info.date != none { block(if type(info.date) == datetime { info.date.display(self.datetime-format) } else { info.date }) } } (self.methods.touying-slide)(self: self, repeat: none, body) } #let new-section-slide(self: none, section) = { self = utils.empty-page(self) let body = { set align(center + horizon) set text(size: 2em, fill: self.colors.primary, weight: &quot;bold&quot;, style: &quot;italic&quot;) section } (self.methods.touying-slide)(self: self, repeat: none, section: section, body) } #let focus-slide(self: none, body) = { self = utils.empty-page(self) self.page-args += ( fill: self.colors.primary, margin: 2em, ) set text(fill: self.colors.neutral-lightest, size: 2em) (self.methods.touying-slide)(self: self, repeat: none, align(horizon + center, body)) } #let slides(self: none, title-slide: true, slide-level: 1, ..args) = { if title-slide { (self.methods.title-slide)(self: self) } (self.methods.touying-slides)(self: self, slide-level: slide-level, ..args) } #let register( aspect-ratio: &quot;16-9&quot;, footer: [], self, ) = { // color theme self = (self.methods.colors)( self: self, primary: rgb(&quot;#5E8B65&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), neutral-darkest: rgb(&quot;#000000&quot;), ) // variables for later use self.bamboo-title = [] self.bamboo-footer = footer // set page let header(self) = { set align(top) show: components.cell.with(fill: self.colors.primary, inset: 1em) set align(horizon) set text(fill: self.colors.neutral-lightest, size: .7em) states.current-section-title linebreak() set text(size: 1.5em) utils.call-or-display(self, self.bamboo-title) } let footer(self) = { set align(bottom) show: pad.with(.4em) set text(fill: self.colors.neutral-darkest, size: .8em) utils.call-or-display(self, self.bamboo-footer) h(1fr) states.slide-counter.display() + &quot; / &quot; + states.last-slide-number } self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, header: header, footer: footer, margin: (top: 4em, bottom: 1.5em, x: 0em), ) self.padding = (x: 2em, y: 0em) // register methods self.methods.slide = slide self.methods.title-slide = title-slide self.methods.new-section-slide = new-section-slide self.methods.touying-new-section-slide = new-section-slide self.methods.focus-slide = focus-slide self.methods.slides = slides self.methods.alert = (self: none, it) =&gt; text(fill: self.colors.primary, it) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self } // main.typ #import &quot;@preview/touying:0.3.1&quot;: * #import &quot;bamboo.typ&quot; #let s = bamboo.register(s, aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, title-slide, focus-slide) = utils.slides(s) #show: slides = First Section == First Slide #slide[ A slide with a title and an *important* information. ] #focus-slide[ Focus on it! ]     ","version":"0.3.x","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.3.x/build-your-own-theme#conclusion","content":" Congratulations! You've created a simple and elegant theme. Perhaps you may find that Touying introduces a wealth of concepts, making it initially challenging to grasp. This is normal, as Touying opts for functionality over simplicity. However, thanks to Touying's comprehensive and unified approach, you can easily extract commonalities between different themes and transfer your knowledge seamlessly. You can also save global variables, modify existing themes, or switch between themes effortlessly, showcasing the benefits of Touying's decoupling and object-oriented programming. ","version":"0.3.x","tagName":"h2"},{"title":"Code Style","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/code-styles","content":"","keywords":"","version":"0.3.x"},{"title":"Simple Style​","type":1,"pageTitle":"Code Style","url":"/touying/docs/0.3.x/code-styles#simple-style","content":" If we only need simplicity, we can directly input content under the heading, just like writing a normal Typst document. The heading here serves to divide the pages, and we can use commands like #pause to achieve animation effects.  #import &quot;@preview/touying:0.3.1&quot;: * #let s = themes.simple.register(s) #let (init, slides) = utils.methods(s) #show: init #let (slide,) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     You can use an empty heading == to create a new page. This skill also helps clear the continuation of the previous title.  PS: We can use the #slides-end marker to signify the end of #show: slides.  ","version":"0.3.x","tagName":"h2"},{"title":"Block Style​","type":1,"pageTitle":"Code Style","url":"/touying/docs/0.3.x/code-styles#block-style","content":" Many times, using simple style alone cannot achieve all the functions we need. For more powerful features and clearer structure, we can also use block style in the form of #slide[...]. The #slide function needs to be unpacked using the syntax #let (slide,) = utils.slides(s) to be used correctly after #show: slides.  For example, the previous example can be transformed into:  #import &quot;@preview/touying:0.3.1&quot;: * #let s = themes.simple.register(s) #let (init, slides) = utils.methods(s) #show: init #let (slide,) = utils.slides(s) #show: slides = Title == First Slide #slide[ Hello, Touying! #pause Hello, Typst! ]   There are many advantages to doing this:  Many times, we not only need the default #slide[...] but also special slide functions like #focus-slide[...].Different themes' #slide[...] functions may have more parameters than the default, such as the university theme's #slide[...] function having a subtitle parameter.Only slide functions can use the callback-style content block to achieve complex animation effects with #only and #uncover functions.It has a clearer structure. By identifying #slide[...] blocks, we can easily distinguish the specific pagination effects of slides.  ","version":"0.3.x","tagName":"h2"},{"title":"Convention Over Configuration​","type":1,"pageTitle":"Code Style","url":"/touying/docs/0.3.x/code-styles#convention-over-configuration","content":" You may have noticed that when using the simple theme, using a level-one heading automatically creates a new section slide. This is because the simple theme registers an s.methods.touying-new-section-slide method, so Touying will automatically call this method.  If we don't want it to automatically create such a section slide, we can delete this method:  #import &quot;@preview/touying:0.3.1&quot;: * #let s = themes.simple.register(s) #(s.methods.touying-new-section-slide = none) #let (init, slides) = utils.methods(s) #show: init #let (slide,) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     As you can see, there are only two pages left, and the default section slide is gone.  Similarly, we can register a new section slide:  #import &quot;@preview/touying:0.3.1&quot;: * #let s = themes.simple.register(s) #(s.methods.touying-new-section-slide = (self: none, section, ..args) =&gt; { self = utils.empty-page(self) (s.methods.touying-slide)(self: self, section: section, { set align(center + horizon) set text(size: 2em, fill: s.colors.primary, style: &quot;italic&quot;, weight: &quot;bold&quot;) section }, ..args) }) #let (init, slides, touying-outline) = utils.methods(s) #show: init #let (slide,) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     Similarly, we can modify s.methods.touying-new-subsection-slide to do the same for subsection.  In fact, besides s.methods.touying-new-section-slide, another special slide function is the s.methods.slide function, which will be called by default in simple style when #slide[...] is not explicitly used.  Also, since #slide[...] is registered in s.slides = (&quot;slide&quot;,), the section, subsection, and title parameters will be automatically passed, while others like #focus-slide[...] will not automatically receive these three parameters.  Principle In fact, you can also not use #show: slides and utils.slides(s), but only use utils.methods(s), for example: #import &quot;@preview/touying:0.3.1&quot;: * #let s = themes.simple.register(s) #let (init, touying-outline, slide) = utils.methods(s) #show: init #slide(section: [Title], title: [First Slide])[ Hello, Touying! #pause Hello, Typst! ] Here, you need to manually pass in section, subsection, and title, but it will have better performance, suitable for cases where faster performance is needed, such as when there are more than dozens or hundreds of pages. ","version":"0.3.x","tagName":"h2"},{"title":"Complex Animations","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/dynamic/complex","content":"","keywords":"","version":"0.3.x"},{"title":"Callback-Style Functions​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/0.3.x/dynamic/complex#callback-style-functions","content":" To overcome the limitations of styled and layout mentioned earlier, Touying cleverly implements always-effective only, uncover, and alternatives using callback functions. Specifically, you need to introduce these three functions as follows:  #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) In subslide #self.subslide, test #uncover(&quot;2-&quot;)[uncover] function, and test #only(&quot;2-&quot;)[only] function, #pause and paused text. ])     Notice that we no longer pass a content block but instead pass a callback function with a self parameter. Later, we extract only, uncover, and alternatives functions from self using:  #let (uncover, only, alternatives) = utils.methods(self)   We then call these functions in subsequent steps.  Here's an interesting fact: the self.subslide of type int indicates the current subslide index, and in fact, the only, uncover, and alternatives functions rely on self.subslide to determine the current subslide index.  Warning We manually specify the repeat: 3 parameter, indicating the display of 3 subslides. We need to do this manually because Touying cannot infer how many subslides only, uncover, and alternatives should display.  ","version":"0.3.x","tagName":"h2"},{"title":"only​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/0.3.x/dynamic/complex#only","content":" The only function means it &quot;appears&quot; only on selected subslides. If it doesn't appear, it completely disappears and doesn't occupy any space. In other words, #only(index, body) is either body or none.  The index can be an int type or a str type like &quot;2-&quot; or &quot;2-3&quot;. For more usage, refer to Polylux.  ","version":"0.3.x","tagName":"h2"},{"title":"uncover​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/0.3.x/dynamic/complex#uncover","content":" The uncover function means it &quot;displays&quot; only on selected subslides; otherwise, it will be covered by the cover function but still occupies the original space. In other words, #uncover(index, body) is either body or cover(body).  The index can be an int type or a str type like &quot;2-&quot; or &quot;2-3&quot;. For more usage, refer to Polylux.  You may also have noticed that #pause actually uses the cover function, providing a more convenient syntax. In reality, their effects are almost identical.  ","version":"0.3.x","tagName":"h2"},{"title":"alternatives​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/0.3.x/dynamic/complex#alternatives","content":" The alternatives function displays a series of different content in different subslides. For example:  #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) #alternatives[Ann][Bob][Christopher] likes #alternatives[chocolate][strawberry][vanilla] ice cream. ])     As you can see, alternatives can automatically expand to the most suitable width and height, a capability that only and uncover lack. In fact, alternatives has other parameters, such as start: 2, repeat-last: true, and position: center + horizon. For more usage, refer to Polylux. ","version":"0.3.x","tagName":"h2"},{"title":"Cover Function","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/dynamic/cover","content":"","keywords":"","version":"0.3.x"},{"title":"Default Cover Function: hide​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/0.3.x/dynamic/cover#default-cover-function-hide","content":" The cover function is a method stored in s.methods.cover, which is later used by uncover and #pause.  The default cover function is the hide function. This function makes the internal content invisible without affecting the layout.  ","version":"0.3.x","tagName":"h2"},{"title":"Updating the Cover Function​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/0.3.x/dynamic/cover#updating-the-cover-function","content":" In some cases, you might want to use your own cover function. In that case, you can set your own cover function using:  let s = (s.methods.update-cover)(self: s, is-method: true, cover-fn)   Here, if you set is-method: false, Touying will wrap cover-fn into a method for you.  ","version":"0.3.x","tagName":"h2"},{"title":"Semi-Transparent Cover Function​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/0.3.x/dynamic/cover#semi-transparent-cover-function","content":" Touying supports a semi-transparent cover function, which can be enabled by adding:  #let s = (s.methods.enable-transparent-cover)(self: s)   You can adjust the transparency through the alpha: .. parameter.  Warning Note that the transparent-cover here does not preserve text layout like hide does because it adds an extra layer of box, which may disrupt the original structure of the page.  Internals The enable-transparent-cover method is defined as: #let s.methods.enable-transparent-cover = ( self: none, constructor: rgb, alpha: 85%, ) =&gt; { self.methods.cover = (self: none, body) =&gt; { utils.cover-with-rect( fill: utils.update-alpha( constructor: constructor, self.page-args.fill, alpha, ), body ) } self } It creates a semi-transparent rectangular mask with the same color as the background to simulate the effect of transparent content. Here, constructor: rgb and alpha: 85% indicate the background color's construction function and transparency level, respectively. ","version":"0.3.x","tagName":"h2"},{"title":"Math Equation Animations","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/dynamic/equation","content":"","keywords":"","version":"0.3.x"},{"title":"Simple Animation​","type":1,"pageTitle":"Math Equation Animations","url":"/touying/docs/0.3.x/dynamic/equation#simple-animation","content":" Let's start with an example:  #slide[ Touying equation with pause: #touying-equation(` f(x) &amp;= pause x^2 + 2x + 1 \\ &amp;= pause (x + 1)^2 \\ `) #meanwhile Touying equation is very simple. ]     We use the touying-equation function to incorporate pause and meanwhile within the text of math equations (in fact, you can also use #pause or #pause;).  As you would expect, the math equation is displayed step by step, making it suitable for presenters to demonstrate their math reasoning.  Warning While the touying-equation function is convenient, you should always be aware that it doesn't perform complex syntax analysis. It simply splits the string using regular expressions. Therefore, you should not use pause or meanwhile within functions like display(..)!  ","version":"0.3.x","tagName":"h2"},{"title":"Complex Animation​","type":1,"pageTitle":"Math Equation Animations","url":"/touying/docs/0.3.x/dynamic/equation#complex-animation","content":" In fact, we can also use only, uncover, and alternatives within touying-equation with a little trick:  #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) #touying-equation(scope: (uncover: uncover), ` f(x) &amp;= pause x^2 + 2x + uncover(&quot;3-&quot;, 1) \\ &amp;= pause (x + 1)^2 \\ `) ])     We can pass the functions we need into the touying-equation through the scope parameter, such as uncover in this example.  ","version":"0.3.x","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Math Equation Animations","url":"/touying/docs/0.3.x/dynamic/equation#parameters","content":" The function definition of touying-equation is:  #let touying-equation(block: true, numbering: none, supplement: auto, scope: (:), body) = { .. }   Therefore, you can pass parameters like block, numbering, and supplement to touying-equation just like using normal math equations. ","version":"0.3.x","tagName":"h2"},{"title":"Handout Mode","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/dynamic/handout","content":"Handout Mode While watching slides and attending lectures, the audience often wishes to have handouts for reviewing challenging concepts. Therefore, it's beneficial for the author to provide handouts for the audience, preferably before the lecture for better preparation. The handout mode differs from the regular mode as it doesn't require intricate animation effects. It retains only the last subslide of each slide. Enabling handout mode is simple: #let s = (s.methods.enable-handout-mode)(self: s) ","keywords":"","version":"0.3.x"},{"title":"Other Animations","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/dynamic/other","content":"","keywords":"","version":"0.3.x"},{"title":"Simple Animations​","type":1,"pageTitle":"Other Animations","url":"/touying/docs/0.3.x/dynamic/other#simple-animations","content":" Here's an example:  #import &quot;@preview/touying:0.3.1&quot;: * #import &quot;@preview/cetz:0.2.1&quot; #import &quot;@preview/fletcher:0.4.2&quot; as fletcher: node, edge #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: (arr, ..args) =&gt; fletcher.diagram(..args, ..arr)) #let s = themes.metropolis.register(s, aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides) = utils.methods(s) #show: init #let (slide,) = utils.slides(s) #show: slides.with(title-slide: false, outline-slide: false) // cetz animation #slide[ Cetz in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) ] // fletcher animation #slide[ Fletcher in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) ]     ","version":"0.3.x","tagName":"h2"},{"title":"only and uncover​","type":1,"pageTitle":"Other Animations","url":"/touying/docs/0.3.x/dynamic/other#only-and-uncover","content":" In fact, we can also use only and uncover within cetz, just requiring a bit of skill:  #slide(repeat: 3, self =&gt; [ #let (uncover, only) = utils.methods(self) Cetz in Touying in subslide #self.subslide: #cetz.canvas({ import cetz.draw: * let self = (self.methods.update-cover)(self: self, hide) let (uncover,) = utils.methods(self) rect((0,0), (5,5)) uncover(&quot;2-3&quot;, { rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) }) only(3, line((0,0), (2.5, 2.5), name: &quot;line&quot;)) }) ])  ","version":"0.3.x","tagName":"h2"},{"title":"Simple Animations","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/dynamic/simple","content":"","keywords":"","version":"0.3.x"},{"title":"pause​","type":1,"pageTitle":"Simple Animations","url":"/touying/docs/0.3.x/dynamic/simple#pause","content":" The purpose of #pause is straightforward – it separates the subsequent content into the next subslide. You can use multiple #pause to create multiple subslides. Here's a simple example:  #slide[ First #pause Second #pause Third ]     This example will create three subslides, gradually revealing the content.  As you can see, #pause can be used inline or on a separate line.  ","version":"0.3.x","tagName":"h2"},{"title":"meanwhile​","type":1,"pageTitle":"Simple Animations","url":"/touying/docs/0.3.x/dynamic/simple#meanwhile","content":" In some cases, you may need to display additional content simultaneously with #pause. In such cases, you can use #meanwhile.  #slide[ First #pause Second #meanwhile Third #pause Fourth ]     This example will create only two subslides, with &quot;First&quot; and &quot;Third&quot; displayed simultaneously, and &quot;Second&quot; and &quot;Fourth&quot; displayed simultaneously.  ","version":"0.3.x","tagName":"h2"},{"title":"Handling set-show rules​","type":1,"pageTitle":"Simple Animations","url":"/touying/docs/0.3.x/dynamic/simple#handling-set-show-rules","content":" If you use set-show rules inside slide[..], you might be surprised to find that subsequent #pause and #meanwhile do not work. This is because Touying cannot detect the content inside styled(..) (content after set-show rules is encompassed by styled).  To address this issue, Touying provides a setting parameter for the #slide() function. You can place your set-show rules in the setting parameter. For example, changing the font color:  #slide(setting: body =&gt; { set text(fill: blue) body })[ First #pause Second ]     Similarly, Touying currently does not support #pause and #meanwhile inside layout functions like grid. This is due to the same limitation, but you can use the composer parameter of #slide() to meet most requirements.  Internals Touying doesn't rely on counter and locate to implement #pause. Instead, it has a parser written in Typst script. It parses the input content block as a sequence and then transforms and reorganizes this sequence into the series of subslides we need. ","version":"0.3.x","tagName":"h2"},{"title":"Pdfpc","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/external/pdfpc","content":"","keywords":"","version":"0.3.x"},{"title":"Adding Metadata​","type":1,"pageTitle":"Pdfpc","url":"/touying/docs/0.3.x/external/pdfpc#adding-metadata","content":" Touying remains consistent with Polylux to avoid conflicts between APIs.  For example, you can add notes using #pdfpc.speaker-note(&quot;This is a note that only the speaker will see.&quot;).  ","version":"0.3.x","tagName":"h2"},{"title":"Pdfpc Configuration​","type":1,"pageTitle":"Pdfpc","url":"/touying/docs/0.3.x/external/pdfpc#pdfpc-configuration","content":" To add pdfpc configurations, you can use  #let s = (s.methods.append-preamble)(self: s, pdfpc.config( duration-minutes: 30, start-time: datetime(hour: 14, minute: 10, second: 0), end-time: datetime(hour: 14, minute: 40, second: 0), last-minutes: 5, note-font-size: 12, disable-markdown: false, default-transition: ( type: &quot;push&quot;, duration-seconds: 2, angle: ltr, alignment: &quot;vertical&quot;, direction: &quot;inward&quot;, ), ))   Add the corresponding configurations. Refer to Polylux for specific configuration details.  ","version":"0.3.x","tagName":"h2"},{"title":"Exporting .pdfpc File​","type":1,"pageTitle":"Pdfpc","url":"/touying/docs/0.3.x/external/pdfpc#exporting-pdfpc-file","content":" Assuming your document is ./example.typ, you can export the .pdfpc file directly using:  typst query --root . ./example.typ --field value --one &quot;&lt;pdfpc-file&gt;&quot; &gt; ./example.pdfpc   With the compatibility of Touying and Polylux, you can make Polylux also support direct export by adding the following code:  #import &quot;@preview/touying:0.3.1&quot; #locate(loc =&gt; touying.pdfpc.pdfpc-file(loc))  ","version":"0.3.x","tagName":"h2"},{"title":"Typst Preview","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/external/typst-preview","content":"Typst Preview The Typst Preview extension for VS Code provides an excellent slide mode, allowing us to preview and present slides. Press Ctrl/Cmd + Shift + P and type Typst Preview: Preview current file in slide mode to open the preview in slide mode. Press Ctrl/Cmd + Shift + P and type Typst Preview: Preview current file in browser and slide mode to open the slide mode in the browser. Now, you can press keys like F11 to enter fullscreen mode in the browser, making it suitable for slide presentations. Since Typst Preview is based on SVG, it can play GIF animations, which is very helpful for dynamic slides.","keywords":"","version":"0.3.x"},{"title":"Codly","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/integration/codly","content":"Codly When using Codly, we should initialize it using the s.methods.append-preamble method. #import &quot;@preview/touying:0.3.1&quot;: * #import &quot;@preview/codly:0.2.0&quot;: * #let s = themes.simple.register(s, aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.append-preamble)(self: s)[ #codly(languages: ( rust: (name: &quot;Rust&quot;, icon: &quot;\\u{fa53}&quot;, color: rgb(&quot;#CE412B&quot;)), )) ] #let (init, slides) = utils.methods(s) #show heading.where(level: 2): set block(below: 1em) #show: init #show: codly-init.with() #let (slide,) = utils.slides(s) #show: slides #slide[ == First slide #raw(lang: &quot;rust&quot;, block: true, `pub fn main() { println!(&quot;Hello, world!&quot;); }`.text) ] ","keywords":"","version":"0.3.x"},{"title":"Fletcher","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/integration/fletcher","content":"Fletcher Touying provides the touying-reducer, which adds pause and meanwhile animations to Fletcher. An example: #import &quot;@preview/touying:0.3.1&quot;: * #import &quot;@preview/cetz:0.2.1&quot; #import &quot;@preview/fletcher:0.4.2&quot; as fletcher: node, edge #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: (arr, ..args) =&gt; fletcher.diagram(..args, ..arr)) #let s = themes.metropolis.register(s, aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides) = utils.methods(s) #show: init #let (slide,) = utils.slides(s) #show: slides.with(title-slide: false, outline-slide: false) // cetz animation #slide[ Cetz in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) ] // fletcher animation #slide[ Fletcher in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) ] ","keywords":"","version":"0.3.x"},{"title":"Global Settings","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/global-settings","content":"","keywords":"","version":"0.3.x"},{"title":"Global Styles​","type":1,"pageTitle":"Global Settings","url":"/touying/docs/0.3.x/global-settings#global-styles","content":" For Touying, global styles refer to set rules or show rules that need to be applied everywhere, such as #set text(size: 20pt).  Themes in Touying encapsulate some of their own global styles, which are placed in #show: init. For example, the university theme encapsulates the following:  self.methods.init = (self: none, body) =&gt; { set text(size: 25pt) show footnote.entry: set text(size: .6em) body }   If you are not a theme creator but want to add your own global styles to your slides, you can simply place them after #show: init and before #show: slides. For example, the metropolis theme recommends adding the following global styles:  #let s = themes.metropolis.register(s, aspect-ratio: &quot;16-9&quot;) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init // global styles #set text(font: &quot;Fira Sans&quot;, weight: &quot;light&quot;, size: 20pt) #show math.equation: set text(font: &quot;Fira Math&quot;) #set strong(delta: 100) #set par(justify: true) #show strong: alert #let (slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides   However, note that you should not use #set page(..). Instead, modify s.page-args and s.padding, for example:  #(s.page-args += ( margin: (x: 0em, y: 2em), header: align(top)[Header], footer: align(bottom)[Footer], header-ascent: 0em, footer-descent: 0em, )) #(s.padding += (x: 4em, y: 0em))   ","version":"0.3.x","tagName":"h2"},{"title":"Global Information​","type":1,"pageTitle":"Global Settings","url":"/touying/docs/0.3.x/global-settings#global-information","content":" Like Beamer, Touying, through an OOP-style unified API design, can help you better maintain global information, allowing you to easily switch between different themes. Global information is a typical example of this.  You can set the title, subtitle, author, date, and institution information for slides using:  #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], )   In subsequent slides, you can access them through s.info or self.info.  This information is generally used in the title-slide, header, and footer of the theme, for example:  #let s = themes.metropolis.register(s, aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution)   The date can accept datetime format or content format, and the display format for the datetime format can be changed using:  #let s = (s.methods.datetime-format)(self: s, &quot;[year]-[month]-[day]&quot;)   Principle Here, we will introduce a bit of OOP concept in Touying. You should know that Typst is a typesetting language that supports incremental rendering, which means Typst caches the results of previous function calls. This requires that Typst consists of pure functions, meaning functions that do not change external variables. Thus, it is challenging to modify a global variable in the true sense, even with the use of state or counter. This would require the use of locate with callback functions to obtain the values inside, and this approach would have a significant impact on performance. Touying does not use state or counter and does not violate the principle of pure functions in Typst. Instead, it uses a clever approach in an object-oriented style, maintaining a global singleton s. In Touying, an object refers to a Typst dictionary with its own member variables and methods. We agree that methods all have a named parameter self for passing the object itself, and methods are placed in the .methods domain. With this concept, it becomes easier to write methods to update info: #let s = ( info: (:), methods: ( // update info info: (self: none, ..args) =&gt; { self.info += args.named() self }, ) ) #let s = (s.methods.info)(self: s, title: [title]) Title is #s.info.title Now you can understand the purpose of the utils.methods() function: to bind self to all methods of s and return it, simplifying the subsequent usage through unpacking syntax. #let (init, slides, alert) = utils.methods(s)   ","version":"0.3.x","tagName":"h2"},{"title":"State Initialization​","type":1,"pageTitle":"Global Settings","url":"/touying/docs/0.3.x/global-settings#state-initialization","content":" In general, the two ways mentioned above are sufficient for adding global settings. However, there are still situations where we need to initialize counters or states. If you place this code before #show: slides, a blank page will be created, which is something we don't want to see. In such cases, you can use the s.methods.append-preamble method. For example, when using the codly package:  #import &quot;@preview/touying:0.3.1&quot;: * #import &quot;@preview/codly:0.2.0&quot;: * #let s = themes.simple.register(s, aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.append-preamble)(self: s)[ #codly(languages: ( rust: (name: &quot;Rust&quot;, icon: &quot;\\u{fa53}&quot;, color: rgb(&quot;#CE412B&quot;)), )) ] #let (init, slides) = utils.methods(s) #show heading.where(level: 2): set block(below: 1em) #show: init #show: codly-init.with() #let (slide,) = utils.slides(s) #show: slides #slide[ == First slide #raw(lang: &quot;rust&quot;, block: true, `pub fn main() { println!(&quot;Hello, world!&quot;); }`.text) ]     Or when configuring Pdfpc:  // Pdfpc configuration // typst query --root . ./example.typ --field value --one &quot;&lt;pdfpc-file&gt;&quot; &gt; ./example.pdfpc #let s = (s.methods.append-preamble)(self: s, pdfpc.config( duration-minutes: 30, start-time: datetime(hour: 14, minute: 10, second: 0), end-time: datetime(hour: 14, minute: 40, second: 0), last-minutes: 5, note-font-size: 12, disable-markdown: false, default-transition: ( type: &quot;push&quot;, duration-seconds: 2, angle: ltr, alignment: &quot;vertical&quot;, direction: &quot;inward&quot;, ), ))  ","version":"0.3.x","tagName":"h2"},{"title":"CeTZ","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/integration/cetz","content":"","keywords":"","version":"0.3.x"},{"title":"Simple Animation​","type":1,"pageTitle":"CeTZ","url":"/touying/docs/0.3.x/integration/cetz#simple-animation","content":" An example:  #import &quot;@preview/touying:0.3.1&quot;: * #import &quot;@preview/cetz:0.2.1&quot; #import &quot;@preview/fletcher:0.4.2&quot; as fletcher: node, edge #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: (arr, ..args) =&gt; fletcher.diagram(..args, ..arr)) #let s = themes.metropolis.register(s, aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides) = utils.methods(s) #show: init #let (slide,) = utils.slides(s) #show: slides.with(title-slide: false, outline-slide: false) // cetz animation #slide[ Cetz in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) ] // fletcher animation #slide[ Fletcher in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) ]     ","version":"0.3.x","tagName":"h2"},{"title":"only and uncover​","type":1,"pageTitle":"CeTZ","url":"/touying/docs/0.3.x/integration/cetz#only-and-uncover","content":" In fact, we can also use only and uncover within CeTZ, but it requires a bit of technique:  #slide(repeat: 3, self =&gt; [ #let (uncover, only) = utils.methods(self) Cetz in Touying in subslide #self.subslide: #cetz.canvas({ import cetz.draw: * let self = (self.methods.update-cover)(self: self, hide) let (uncover,) = utils.methods(self) rect((0,0), (5,5)) uncover(&quot;2-3&quot;, { rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) }) only(3, line((0,0), (2.5, 2.5), name: &quot;line&quot;)) }) ])  ","version":"0.3.x","tagName":"h2"},{"title":"MiTeX","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/integration/mitex","content":"MiTeX During the process of creating slides, we often already have a LaTeX math equation that we simply want to paste into the slides without transcribing it into a Typst math equation. In such cases, we can use MiTeX. Example: #import &quot;@preview/mitex:0.2.3&quot;: * Write inline equations like #mi(&quot;x&quot;) or #mi[y]. Also block equations (this case is from #text(blue.lighten(20%), link(&quot;https://katex.org/&quot;)[katex.org])): #mitex(` \\newcommand{\\f}[2]{#1f(#2)} \\f\\relax{x} = \\int_{-\\infty}^\\infty \\f\\hat\\xi\\,e^{2 \\pi i \\xi x} \\,d\\xi `) ","keywords":"","version":"0.3.x"},{"title":"Pinit","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/integration/pinit","content":"","keywords":"","version":"0.3.x"},{"title":"Simple Example​","type":1,"pageTitle":"Pinit","url":"/touying/docs/0.3.x/integration/pinit#simple-example","content":" #import &quot;@preview/pinit:0.1.3&quot;: * #set text(size: 24pt) A simple #pin(1)highlighted text#pin(2). #pinit-highlight(1, 2) #pinit-point-from(2)[It is simple.]     Another example:    ","version":"0.3.x","tagName":"h2"},{"title":"Complex Example​","type":1,"pageTitle":"Pinit","url":"/touying/docs/0.3.x/integration/pinit#complex-example","content":"   An example of shared usage with Touying:  #import &quot;@preview/touying:0.3.1&quot;: * #import &quot;@preview/pinit:0.1.3&quot;: * #(s.page-args.paper = &quot;presentation-4-3&quot;) #let (init, slides) = utils.methods(s) #show: init #set text(size: 20pt, font: &quot;Calibri&quot;, ligatures: false) #show heading: set text(weight: &quot;regular&quot;) #show heading: set block(above: 1.4em, below: 1em) #show heading.where(level: 1): set text(size: 1.5em) // Useful functions #let crimson = rgb(&quot;#c00000&quot;) #let greybox(..args, body) = rect(fill: luma(95%), stroke: 0.5pt, inset: 0pt, outset: 10pt, ..args, body) #let redbold(body) = { set text(fill: crimson, weight: &quot;bold&quot;) body } #let blueit(body) = { set text(fill: blue) body } #let (slide,) = utils.slides(s) #show: slides // Main body #slide(self =&gt; [ #let (uncover, only) = utils.methods(self) = Asymptotic Notation: $O$ Use #pin(&quot;h1&quot;)asymptotic notations#pin(&quot;h2&quot;) to describe asymptotic efficiency of algorithms. (Ignore constant coefficients and lower-order terms.) #pause #greybox[ Given a function $g(n)$, we denote by $O(g(n))$ the following *set of functions*: #redbold(${f(n): &quot;exists&quot; c &gt; 0 &quot;and&quot; n_0 &gt; 0, &quot;such that&quot; f(n) &lt;= c dot g(n) &quot;for all&quot; n &gt;= n_0}$) ] #pinit-highlight(&quot;h1&quot;, &quot;h2&quot;) #pause $f(n) = O(g(n))$: #pin(1)$f(n)$ is *asymptotically smaller* than $g(n)$.#pin(2) // #absolute-place(dx: 550pt, dy: 320pt, image(width: 25%, &quot;asymptotic.png&quot;)) #pause $f(n) redbold(in) O(g(n))$: $f(n)$ is *asymptotically* #redbold[at most] $g(n)$. #only(&quot;4-&quot;, pinit-line(stroke: 3pt + crimson, start-dy: -0.25em, end-dy: -0.25em, 1, 2)) #pause #block[Insertion Sort as an #pin(&quot;r1&quot;)example#pin(&quot;r2&quot;):] - Best Case: $T(n) approx c n + c' n - c''$ #pin(3) - Worst case: $T(n) approx c n + (c' \\/ 2) n^2 - c''$ #pin(4) #pinit-rect(&quot;r1&quot;, &quot;r2&quot;) #pause #pinit-place(3, dx: 15pt, dy: -15pt)[#redbold[$T(n) = O(n)$]] #pinit-place(4, dx: 15pt, dy: -15pt)[#redbold[$T(n) = O(n)$]] #pause #blueit[Q: Is $n^(3) = O(n^2)$#pin(&quot;que&quot;)? How to prove your answer#pin(&quot;ans&quot;)?] #pause #only(&quot;8-&quot;, pinit-point-to(&quot;que&quot;, fill: crimson, redbold[No.])) #only(&quot;8-&quot;, pinit-point-from(&quot;ans&quot;, body-dx: -150pt)[ Show that the equation $(3/2)^n &gt;= c$ \\ has infinitely many solutions for $n$. ]) ])    ","version":"0.3.x","tagName":"h2"},{"title":"Polylux","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/integration/polylux","content":"Polylux With the compatibility between Touying and Polylux, you can make Polylux support direct export as well. Just add the following code to your Polylux source code: #import &quot;@preview/touying:0.3.1&quot; #locate(loc =&gt; touying.pdfpc.pdfpc-file(loc)) Assuming your document is ./example.typ, you can then export the .pdfpc file directly using the following command: typst query --root . ./example.typ --field value --one &quot;&lt;pdfpc-file&gt;&quot; &gt; ./example.pdfpc This eliminates the need for an additional polylux2pdfpc program.","keywords":"","version":"0.3.x"},{"title":"Introduction to Touying","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/intro","content":"","keywords":"","version":"0.3.x"},{"title":"Why Use Touying​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.3.x/intro#why-use-touying","content":" Unlike PowerPoint, Touying is not a &quot;what you see is what you get&quot; tool. You can write your slides in a &quot;content and style separation&quot; manner, especially with Typst, which offers a concise yet powerful syntax, better supporting content like code blocks, mathematical formulas, and theorems. Another advantage is that, with templates, writing slides with Touying is much faster than PowerPoint. Therefore, Touying is more suitable for users with a demand for &quot;research writing.&quot;Compared to Markdown Slides, Touying, relying on Typst, has more powerful typesetting control, such as headers, footers, layout, and convenient custom functions. These are capabilities that Markdown struggles to provide, or does not do well. Additionally, Touying offers #pause and #meanwhile markers, providing more convenient dynamic slide capabilities.Compared to Beamer, Touying has faster compilation speed, a more concise syntax, and simpler theme customization capabilities. Touying's compilation speed can be maintained in milliseconds or tens of milliseconds, compared to Beamer's compilation time of seconds or tens of seconds. Touying's syntax is more concise than Beamer, making it easier to change templates and create your own templates. In terms of features, Touying supports most of Beamer's capabilities and provides some convenient features that Beamer lacks.Compared to Polylux, Touying provides an object-oriented programming (OOP) style syntax, allowing the simulation of &quot;global variables&quot; through a global singleton. This makes it easy to write themes. Touying does not rely on counter and locate to implement #pause, resulting in better performance. Touying is a community-driven project (we welcome more people to join), and it does not overly emphasize maintaining API consistency. Instead, it chooses to maintain documentation for multiple versions, providing more novel yet powerful features.  ","version":"0.3.x","tagName":"h2"},{"title":"About the Name​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.3.x/intro#about-the-name","content":" &quot;Touying&quot; is derived from the Chinese word &quot;投影&quot; (tóuyǐng), which means &quot;projection&quot; In English, it also conveys the meaning of a &quot;project&quot;. In comparison, the term &quot;beamer&quot; in LaTeX means a projector in German.  ","version":"0.3.x","tagName":"h2"},{"title":"About the Documentation​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.3.x/intro#about-the-documentation","content":" This documentation is powered by Docusaurus. We will maintain English and Chinese versions of the documentation for Touying, and for each major version, we will maintain a documentation copy. This allows you to easily refer to old versions of the Touying documentation and migrate to new versions.  Docusaurus creates a new version:  npm run docusaurus docs:version 0.y.x   ","version":"0.3.x","tagName":"h2"},{"title":"Contribution​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.3.x/intro#contribution","content":" Touying is free, open-source, and community-driven. If you're interested, you can visit GitHub anytime and raise issues or submit pull requests. We also welcome you to join the touying-typ organization.  ","version":"0.3.x","tagName":"h2"},{"title":"License​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.3.x/intro#license","content":" Touying is released under the MIT license. ","version":"0.3.x","tagName":"h2"},{"title":"Touying Sections","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/progress/sections","content":"","keywords":"","version":"0.3.x"},{"title":"touying-outline​","type":1,"pageTitle":"Touying Sections","url":"/touying/docs/0.3.x/progress/sections#touying-outline","content":" #touying-outline(enum-args: (:), padding: 0pt) is used to display a simple outline.  ","version":"0.3.x","tagName":"h2"},{"title":"touying-final-sections​","type":1,"pageTitle":"Touying Sections","url":"/touying/docs/0.3.x/progress/sections#touying-final-sections","content":" #states.touying-final-sections(final-sections =&gt; ..) is used to customize the display of the outline.  ","version":"0.3.x","tagName":"h2"},{"title":"touying-progress-with-sections​","type":1,"pageTitle":"Touying Sections","url":"/touying/docs/0.3.x/progress/sections#touying-progress-with-sections","content":" #states.touying-progress-with-sections((current-sections: .., final-sections: .., current-slide-number: .., last-slide-number: ..) =&gt; ..)   This is the most powerful one, allowing you to build any complex progress display with its functionalities. ","version":"0.3.x","tagName":"h2"},{"title":"Touying Counters","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/progress/counters","content":"","keywords":"","version":"0.3.x"},{"title":"Slide Counter​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/0.3.x/progress/counters#slide-counter","content":" You can access the slide counter using states.slide-counter and display the current slide number with states.slide-counter.display().  ","version":"0.3.x","tagName":"h2"},{"title":"Last-Slide Counter​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/0.3.x/progress/counters#last-slide-counter","content":" In some cases, we may need to add an appendix to slides, leading to the requirement to freeze the last-slide counter. Therefore, a second counter is maintained here.  You can use states.last-slide-number to display the number of the last slide before the appendix.  ","version":"0.3.x","tagName":"h2"},{"title":"Progress​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/0.3.x/progress/counters#progress","content":" You can use  #states.touying-progress(ratio =&gt; ..)   to show the current progress.  ","version":"0.3.x","tagName":"h2"},{"title":"Appendix​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/0.3.x/progress/counters#appendix","content":" You can use  // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide,) = utils.methods(s) #slide[ appendix ]   syntax to enter the appendix.  Additionally, #let s = (s.methods.appendix-in-outline)(self: s, false) can be used to hide the appendix section from the outline. ","version":"0.3.x","tagName":"h2"},{"title":"Page Layout","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/layout","content":"","keywords":"","version":"0.3.x"},{"title":"Basic Concepts​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/0.3.x/layout#basic-concepts","content":" To create aesthetically pleasing slides using Typst, it is essential to understand Typst's page model correctly. If you don't care about customizing the page style, you can choose to skip this section. However, it is still recommended to go through this part.  Here, we illustrate Typst's default page model with a specific example.  #let container = rect.with(height: 100%, width: 100%, inset: 0pt) #let innerbox = rect.with(stroke: (dash: &quot;dashed&quot;)) #set text(size: 30pt) #set page( paper: &quot;presentation-16-9&quot;, header: container[#innerbox[Header]], header-ascent: 30%, footer: container[#innerbox[Footer]], footer-descent: 30%, ) #let padding = (x: 2em, y: 2em) #place(top + right)[Margin→] #container[ #place[Padding] #pad(..padding)[ #container[ #innerbox[Content] ] ] ]     We need to distinguish the following concepts:  Model: Typst has a model similar to the CSS Box Model, divided into Margin, Padding, and Content. However, padding is not a property of set page(..) but is obtained manually by adding #pad(..).Margin: Margins, including top, bottom, left, and right, are the core of Typst's page model. Other properties are influenced by margins, especially Header and Footer, which are actually inside the Margin.Padding: Used to add additional space between Margin and Content.Header: The Header is the content at the top of the page, divided into container and innerbox. We can notice that the edge of the header container and padding does not align but has a certain gap. This gap is actually header-ascent: 30%, and the percentage is relative to margin-top. Also, we notice that the header innerbox is actually located at the bottom left corner of the header container, meaning the innerbox defaults to #set align(left + bottom).Footer: The Footer is the content at the bottom of the page, divided into container and innerbox. We can notice that the edge of the footer container and padding does not align but has a certain gap. This gap is actually footer-descent: 30%, and the percentage is relative to margin-bottom. Also, we notice that the footer innerbox is actually located at the top left corner of the footer container, meaning the innerbox defaults to #set align(left + top).Place: The place function can achieve absolute positioning, relative to the parent container, without affecting other elements within the parent container. It can take parameters like alignment, dx, and dy, making it suitable for placing decorative elements such as logos.  Therefore, to apply Typst to create slides, we only need to set  #set page( margin: (x: 0em, y: 2em), header: align(top)[Header], footer: align(bottom)[Footer], header-ascent: 0em, footer-descent: 0em, ) #let padding = (x: 4em, y: 0em)   For example, we have  #let container = rect.with(stroke: (dash: &quot;dashed&quot;), height: 100%, width: 100%, inset: 0pt) #let innerbox = rect.with(fill: rgb(&quot;#d0d0d0&quot;)) #set text(size: 30pt) #set page( paper: &quot;presentation-16-9&quot;, margin: (x: 0em, y: 2em), header: container[#align(top)[#innerbox(width: 100%)[Header]]], header-ascent: 0em, footer: container[#align(bottom)[#innerbox(width: 100%)[Footer]]], footer-descent: 0em, ) #let padding = (x: 4em, y: 0em) #place(top + right)[↑Margin] #container[ #place[Padding] #pad(..padding)[ #container[ #innerbox[Content] ] ] ]     ","version":"0.3.x","tagName":"h2"},{"title":"Page Management​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/0.3.x/layout#page-management","content":" Since using the set page(..) command in Typst to modify page parameters creates a new page and cannot modify the current one, Touying chooses to maintain an s.page-args member variable and an s.padding member variable. Touying applies these parameters only when creating new slides, so users only need to focus on s.page-args and s.padding.  For example, the previous example can be transformed into  #(s.page-args += ( margin: (x: 0em, y: 2em), header: align(top)[Header], footer: align(bottom)[Footer], header-ascent: 0em, footer-descent: 0em, )) #(s.padding += (x: 4em, y: 0em))   Similarly, if you are not satisfied with the header or footer style of a theme, you can use  #(s.page-args.footer = [Custom Footer])   to replace it. However, please note that if you replace the page parameters in this way, you need to place it before #let (slide,) = utils.slides(s), or you need to call #let (slide,) = utils.slides(s) again.  Warning Therefore, you should not use the set page(..) command on your own; instead, you should modify the s.page-args member variable internally.  In this way, we can also query the current page parameters in real-time through s.page-args. This is useful for some functions that need to get margin or the current page's background color, such as transparent-cover. This is partly equivalent to the context get rule, and it is actually more convenient to use.  ","version":"0.3.x","tagName":"h2"},{"title":"Application: Adding a Logo​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/0.3.x/layout#application-adding-a-logo","content":" Adding a logo to slides is a very common but also a very versatile requirement. The difficulty lies in the fact that the required size and position of the logo often vary from person to person. Therefore, most of Touying's themes do not include configuration options for logos. But with the concepts of page layout mentioned in this section, we know that we can use the place function in the header or footer to place a logo image.  For example, suppose we decide to add the GitHub icon to the metropolis theme. We can implement it like this:  #import &quot;@preview/touying:0.3.1&quot;: * #import &quot;@preview/octique:0.1.0&quot;: * #let s = themes.metropolis.register(s, aspect-ratio: &quot;16-9&quot;) #(s.page-args.header = self =&gt; { // display the original header utils.call-or-display(self, s.page-args.header) // place logo at the top-right place(top + right, dx: -0.5em, dy: 0.3em)[ #octique(&quot;mark-github&quot;, color: rgb(&quot;#fafafa&quot;), width: 1.5em, height: 1.5em) ] }) #let (init, slide) = utils.methods(s) #show: init #slide(title: [Title])[ Logo example. ]     Here, utils.call-or-display(self, body) can be used to display body as content or a callback function in the form self =&gt; content.  ","version":"0.3.x","tagName":"h2"},{"title":"Page Columns​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/0.3.x/layout#page-columns","content":" If you need to divide the page into two or three columns, you can use the compose feature provided by the default slide function in Touying. The simplest example is as follows:  #slide[ First column. ][ Second column. ]     If you need to change the way columns are composed, you can modify the composer parameter of slide. The default parameter is utils.side-by-side.with(columns: auto, gutter: 1em). If we want the left column to occupy the remaining width, we can use  #slide(composer: utils.side-by-side.with(columns: (1fr, auto), gutter: 1em))[ First column. ][ Second column. ]    ","version":"0.3.x","tagName":"h2"},{"title":"Sections and Subsections","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/sections","content":"","keywords":"","version":"0.3.x"},{"title":"Structure​","type":1,"pageTitle":"Sections and Subsections","url":"/touying/docs/0.3.x/sections#structure","content":" Similar to Beamer, Touying also has the concept of sections and subsections.  Generally, level 1, level 2, and level 3 headings correspond to section, subsection, and title, respectively, as in the dewdrop theme.  #import &quot;@preview/touying:0.3.1&quot;: * #let s = themes.dewdrop.register(s) #let (init, slides) = utils.methods(s) #show: init #let (slide,) = utils.slides(s) #show: slides = Section == Subsection === Title Hello, Touying!     However, often we don't need subsections, and we can use level 1 and level 2 headings to correspond to section and title, as in the university theme.  #import &quot;@preview/touying:0.3.1&quot;: * #let s = themes.university.register(s) #let (init, slides) = utils.methods(s) #show: init #let (slide,) = utils.slides(s) #show: slides = Section == Title Hello, Touying!     In fact, we can control this behavior through the slide-level parameter of the slides function. slide-level represents the complexity of the nested structure, starting from 0. For example, #show: slides.with(slide-level: 2) is equivalent to the section, subsection, and title structure; while #show: slides.with(slide-level: 1) is equivalent to the section and title structure.  ","version":"0.3.x","tagName":"h2"},{"title":"Table of Contents​","type":1,"pageTitle":"Sections and Subsections","url":"/touying/docs/0.3.x/sections#table-of-contents","content":" Displaying a table of contents in Touying is straightforward:  #import &quot;@preview/touying:0.3.1&quot;: * #let (init, slides, alert, touying-outline) = utils.methods(s) #show: init #let (slide,) = utils.slides(s) #show: slides.with(slide-level: 2) = Section == Subsection === Title ==== Table of contents #touying-outline()     Where the definition of touying-outline() is:  #let touying-outline(enum-args: (:), padding: 0pt) = { .. }   You can modify the parameters of the internal enum through enum-args.  If you have complex custom requirements for the table of contents, you can use:  #states.touying-final-sections(sections =&gt; ..)   As done in the dewdrop theme. ","version":"0.3.x","tagName":"h2"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/start","content":"","keywords":"","version":"0.3.x"},{"title":"More Complex Examples​","type":1,"pageTitle":"Getting Started","url":"/touying/docs/0.3.x/start#more-complex-examples","content":" In fact, Touying provides various styles for slide writing. You can also use the #slide[..] syntax to access more powerful features provided by Touying.    Touying offers many built-in themes to easily create beautiful slides. For example, in this case:  #let s = themes.university.register(s, aspect-ratio: &quot;16-9&quot;)   you can use the university theme. For more detailed tutorials on themes, you can refer to the following sections.  #import &quot;@preview/touying:0.3.1&quot;: * #import &quot;@preview/cetz:0.2.1&quot; #import &quot;@preview/fletcher:0.4.2&quot; as fletcher: node, edge // cetz and fletcher bindings for touying #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: (arr, ..args) =&gt; fletcher.diagram(..args, ..arr)) // Register university theme // You can replace it with other themes and it can still work normally #let s = themes.university.register(s, aspect-ratio: &quot;16-9&quot;) // Global information configuration #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) // Pdfpc configuration // typst query --root . ./example.typ --field value --one &quot;&lt;pdfpc-file&gt;&quot; &gt; ./example.pdfpc #let s = (s.methods.append-preamble)(self: s, pdfpc.config( duration-minutes: 30, start-time: datetime(hour: 14, minute: 10, second: 0), end-time: datetime(hour: 14, minute: 40, second: 0), last-minutes: 5, note-font-size: 12, disable-markdown: false, default-transition: ( type: &quot;push&quot;, duration-seconds: 2, angle: ltr, alignment: &quot;vertical&quot;, direction: &quot;inward&quot;, ), )) // Extract methods #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert // Extract slide functions #let (slide,) = utils.slides(s) #show: slides = Animation == Simple Animation #slide[ We can use `#pause` to #pause display something later. #pause Just like this. #meanwhile Meanwhile, #pause we can also use `#meanwhile` to #pause display other content synchronously. ] == Complex Animation #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) At subslide #self.subslide, we can use #uncover(&quot;2-&quot;)[`#uncover` function] for reserving space, use #only(&quot;2-&quot;)[`#only` function] for not reserving space, #alternatives[call `#only` multiple times \\u{2717}][use `#alternatives` function #sym.checkmark] for choosing one of the alternatives. ]) == Math Equation Animation #slide[ Touying equation with `pause`: #touying-equation(` f(x) &amp;= pause x^2 + 2x + 1 \\ &amp;= pause (x + 1)^2 \\ `) #meanwhile Here, #pause we have the expression of $f(x)$. #pause By factorizing, we can obtain this result. ] == CeTZ Animation #slide[ CeTZ Animation in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) ] == Fletcher Animation #slide[ Fletcher Animation in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) ] = Others == Side-by-side #slide[ First column. ][ Second column. ] == Setting #slide(setting: body =&gt; { set text(fill: blue) body })[ This slide has blue text. ] == Multiple Pages #slide[ #lorem(200) ] // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide,) = utils.slides(s) == Appendix #slide[ Please pay attention to the current slide number. ]     Touying offers many built-in themes to easily create beautiful slides. For example, in this case:  #let s = themes.university.register(s, aspect-ratio: &quot;16-9&quot;)   you can use the university theme. For more detailed tutorials on themes, you can refer to the following sections. ","version":"0.3.x","tagName":"h2"},{"title":"Dewdrop Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/themes/dewdrop","content":"","keywords":"","version":"0.3.x"},{"title":"Initialization​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.3.x/themes/dewdrop#initialization","content":" You can initialize it using the following code:  #import &quot;@preview/touying:0.3.1&quot;: * #let s = themes.dewdrop.register( s, aspect-ratio: &quot;16-9&quot;, footer: [Dewdrop], navigation: &quot;mini-slides&quot;, // navigation: &quot;sidebar&quot;, // navigation: none, ) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides   The register function takes the following parameters:  aspect-ratio: The aspect ratio of the slides, either &quot;16-9&quot; or &quot;4-3,&quot; defaulting to &quot;16-9.&quot;navigation: The navigation bar style, which can be &quot;sidebar&quot;, &quot;mini-slides&quot;, or none, defaulting to &quot;sidebar&quot;.sidebar: Sidebar navigation settings, defaulting to (width: 10em).mini-slides: Mini-slides settings, defaulting to (height: 2em, x: 2em, section: false, subsection: true). height: The height of mini-slides, defaulting to 2em.x: Padding on the x-axis for mini-slides, defaulting to 2em.section: Whether to display slides after the section and before the subsection, defaulting to false.subsection: Whether to split mini-slides based on subsections or compress them into one line, defaulting to true. footer: Content displayed in the footer, defaulting to [], or it can be passed as a function like self =&gt; self.info.author.footer-right: Content displayed on the right side of the footer, defaulting to states.slide-counter.display() + &quot; / &quot; + states.last-slide-number.primary: Primary color, defaulting to rgb(&quot;#0c4842&quot;).alpha: Transparency, defaulting to 70%.  The Dewdrop theme also provides an #alert[..] function, which you can use with #show strong: alert using the *alert text* syntax.  ","version":"0.3.x","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.3.x/themes/dewdrop#color-theme","content":" Dewdrop uses the following default color theme:  #let s = (s.methods.colors)( self: s, neutral-darkest: rgb(&quot;#000000&quot;), neutral-dark: rgb(&quot;#202020&quot;), neutral-light: rgb(&quot;#f3f3f3&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), primary: primary, )   You can modify this color theme using #let s = (s.methods.colors)(self: s, ..).  ","version":"0.3.x","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.3.x/themes/dewdrop#slide-function-family","content":" The Dewdrop theme provides a variety of custom slide functions:  #title-slide(extra: none, ..args)   title-slide reads information from self.info for display, and you can also pass in an extra parameter to display additional information.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // Dewdrop theme footer: auto, )[ ... ]   A default slide with navigation and footer, where the footer is what you set.    #focus-slide[ ... ]   Used to draw attention, with the background color set to self.colors.primary.  ","version":"0.3.x","tagName":"h2"},{"title":"Special Functions​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.3.x/themes/dewdrop#special-functions","content":" #d-outline(enum-args: (:), list-args: (:), cover: true)   Displays the current table of contents. The cover parameter specifies whether to hide sections in an inactive state.    #d-sidebar()   An internal function used to display the sidebar.    #d-mini-slides()   An internal function used to display mini-slides.  ","version":"0.3.x","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.3.x/themes/dewdrop#slides-function","content":" The slides function has the following parameters:  title-slide: Defaults to true.outline-slide: Defaults to true.slide-level: Defaults to 2.  You can set these using #show: slides.with(..).  PS: You can modify the outline title using #(s.outline-title = [Outline]).  #import &quot;@preview/touying:0.3.1&quot;: * #let s = themes.dewdrop.register(s, aspect-ratio: &quot;16-9&quot;, footer: [Dewdrop]) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.3.x","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.3.x/themes/dewdrop#example","content":" #import &quot;@preview/touying:0.3.1&quot;: * #let s = themes.dewdrop.register( s, aspect-ratio: &quot;16-9&quot;, footer: [Dewdrop], navigation: &quot;mini-slides&quot;, // navigation: none, ) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides = Section A == Subsection A.1 #slide[ A slide with equation: $ x_(n+1) = (x_n + a/x_n) / 2 $ ] == Subsection A.2 #slide[ A slide without a title but with *important* infos ] = Section B == Subsection B.1 #slide[ #lorem(80) ] #focus-slide[ Wake up! ] == Subsection B.2 #slide[ We can use `#pause` to #pause display something later. #pause Just like this. #meanwhile Meanwhile, #pause we can also use `#meanwhile` to #pause display other content synchronously. ] // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide,) = utils.slides(s) = Appendix === Appendix #slide[ Please pay attention to the current slide number. ]  ","version":"0.3.x","tagName":"h2"},{"title":"Simple Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/themes/simple","content":"","keywords":"","version":"0.3.x"},{"title":"Initialization​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/0.3.x/themes/simple#initialization","content":" You can initialize it using the following code:  #import &quot;@preview/touying:0.3.1&quot;: * #let s = themes.simple.register(s, aspect-ratio: &quot;16-9&quot;, footer: [Simple slides]) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slides) = utils.methods(s) #show: init #let (slide, title-slide, centered-slide, focus-slide) = utils.slides(s) #show: slides   The register function takes the following parameters:  aspect-ratio: The aspect ratio of the slides, either &quot;16-9&quot; or &quot;4-3,&quot; defaulting to &quot;16-9.&quot;footer: Content displayed in the footer, defaulting to [], or it can be passed as a function like self =&gt; self.info.author.footer-right: Content displayed on the right side of the footer, defaulting to states.slide-counter.display() + &quot; / &quot; + states.last-slide-number.background: Background color, defaulting to white.foreground: Text color, defaulting to black.primary: Theme color, defaulting to aqua.darken(50%).  ","version":"0.3.x","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/0.3.x/themes/simple#slide-function-family","content":" The Simple theme provides a variety of custom slide functions:  #centered-slide(section: ..)[ ... ]   A slide with content centered, and the section parameter can be used to create a new section.    #title-slide[ ... ]   Similar to centered-slide, this is provided for consistency with Polylux syntax.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // simple theme args footer: auto, )[ ... ]   A default slide with headers and footers, where the header corresponds to the current section, and the footer is what you set.    #focus-slide(foreground: ..., background: ...)[ ... ]   Used to draw attention, it optionally accepts a foreground color (defaulting to white) and a background color (defaulting to auto, i.e., self.colors.primary).  ","version":"0.3.x","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/0.3.x/themes/simple#slides-function","content":" The slides function has the following parameter:  slide-level: Defaults to 1.  You can set it using #show: slides.with(..).  #import &quot;@preview/touying:0.3.1&quot;: * #let s = themes.simple.register(s, aspect-ratio: &quot;16-9&quot;, footer: [Simple slides]) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slides) = utils.methods(s) #show: init #let (slide, title-slide, centered-slide, focus-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.3.x","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/0.3.x/themes/simple#example","content":" #import &quot;@preview/touying:0.3.1&quot;: * #let s = themes.simple.register(s, aspect-ratio: &quot;16-9&quot;, footer: [Simple slides]) #let (init, slides) = utils.methods(s) #show: init #let (slide, title-slide, centered-slide, focus-slide) = utils.slides(s) #show: slides #title-slide[ = Keep it simple! #v(2em) Alpha #footnote[Uni Augsburg] #h(1em) Bravo #footnote[Uni Bayreuth] #h(1em) Charlie #footnote[Uni Chemnitz] #h(1em) July 23 ] == First slide #slide[ #lorem(20) ] #focus-slide[ _Focus!_ This is very important. ] = Let's start a new section! == Dynamic slide #slide[ Did you know that... #pause ...you can see the current section at the top of the slide? ]  ","version":"0.3.x","tagName":"h2"},{"title":"Metropolis Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/themes/metropolis","content":"","keywords":"","version":"0.3.x"},{"title":"Initialization​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.3.x/themes/metropolis#initialization","content":" You can initialize it using the following code:  #import &quot;@preview/touying:0.3.1&quot;: * #let s = themes.metropolis.register(s, aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides   The register function takes the following parameters:  aspect-ratio: The aspect ratio of the slides, either &quot;16-9&quot; or &quot;4-3,&quot; defaulting to &quot;16-9.&quot;header: Content displayed in the header, defaulting to states.current-section-title, or it can be passed as a function like self =&gt; self.info.title.footer: Content displayed in the footer, defaulting to [], or it can be passed as a function like self =&gt; self.info.author.footer-right: Content displayed on the right side of the footer, defaulting to states.slide-counter.display() + &quot; / &quot; + states.last-slide-number.footer-progress: Whether to show the progress bar at the bottom of the slide, defaulting to true.  The Metropolis theme also provides an #alert[..] function, which you can use with #show strong: alert using the *alert text* syntax.  ","version":"0.3.x","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.3.x/themes/metropolis#color-theme","content":" Metropolis uses the following default color theme:  #let s = (s.methods.colors)( self: s, neutral-lightest: rgb(&quot;#fafafa&quot;), primary-dark: rgb(&quot;#23373b&quot;), secondary-light: rgb(&quot;#eb811b&quot;), secondary-lighter: rgb(&quot;#d6c6b7&quot;), )   You can modify this color theme using #let s = (s.methods.colors)(self: s, ..).  ","version":"0.3.x","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.3.x/themes/metropolis#slide-function-family","content":" The Metropolis theme provides a variety of custom slide functions:  #title-slide(extra: none, ..args)   title-slide reads information from self.info for display, and you can also pass in an extra parameter to display additional information.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // metropolis theme title: auto, footer: auto, align: horizon, )[ ... ]   A default slide with headers and footers, where the title defaults to the current section title, and the footer is what you set.    #focus-slide[ ... ]   Used to draw attention, with the background color set to self.colors.primary-dark.    #new-section-slide(short-title: auto, title)   Creates a new section with the given title.  ","version":"0.3.x","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.3.x/themes/metropolis#slides-function","content":" The slides function has the following parameters:  title-slide: Defaults to true.outline-slide: Defaults to true.slide-level: Defaults to 1.  You can set these using #show: slides.with(..).  PS: You can modify the outline title using #(s.outline-title = [Outline]).  #import &quot;@preview/touying:0.3.1&quot;: * #let s = themes.metropolis.register(s, aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slide, slides, title-slide, new-section-slide, focus-slide, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.3.x","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.3.x/themes/metropolis#example","content":" #import &quot;@preview/touying:0.3.1&quot;: * #let s = themes.metropolis.register(s, aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #set text(font: &quot;Fira Sans&quot;, weight: &quot;light&quot;, size: 20pt) #show math.equation: set text(font: &quot;Fira Math&quot;) #set strong(delta: 100) #set par(justify: true) #show strong: alert #let (slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides = First Section #slide[ A slide without a title but with some *important* information. ] == A long long long long long long long long long long long long long long long long long long long long long long long long Title #slide[ A slide with equation: $ x_(n+1) = (x_n + a/x_n) / 2 $ #lorem(200) ] = Second Section #focus-slide[ Wake up! ] == Simple Animation #slide[ A simple #pause dynamic slide with #alert[alert] #pause text. ] // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide,) = utils.slides(s) = Appendix #slide[ Appendix. ]  ","version":"0.3.x","tagName":"h2"},{"title":"Object-Oriented Programming","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/utilities/oop","content":"Object-Oriented Programming Touying provides some convenient utility functions for object-oriented programming. #let call-or-display(self, it) = { if type(it) == function { return it(self) } else { return it } } Call or display as-is. #let methods(self) = { .. } Used to bind self to methods and return, very commonly used.","keywords":"","version":"0.3.x"},{"title":"University Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/themes/university","content":"","keywords":"","version":"0.3.x"},{"title":"Initialization​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.3.x/themes/university#initialization","content":" You can initialize the University theme using the following code:  #import &quot;@preview/touying:0.3.1&quot;: * #let s = themes.university.register(s, aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #let (slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) #show: slides   The register function accepts the following parameters:  aspect-ratio: Sets the aspect ratio of the slides to &quot;16-9&quot; or &quot;4-3,&quot; with the default being &quot;16-9.&quot;progress-bar: Controls whether the progress bar at the top of each slide is displayed, with the default being true.  Additionally, the University theme provides an #alert[..] function, which you can use with the #show strong: alert syntax for emphasizing text with *alert text*.  ","version":"0.3.x","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.3.x/themes/university#color-theme","content":" The University theme defaults to the following color theme:  #let s = (s.methods.colors)( self: s, primary: rgb(&quot;#04364A&quot;), secondary: rgb(&quot;#176B87&quot;), tertiary: rgb(&quot;#448C95&quot;), )   You can modify this color theme using #let s = (s.methods.colors)(self: s, ..).  ","version":"0.3.x","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.3.x/themes/university#slide-function-family","content":" The University theme provides a series of custom slide functions:  ","version":"0.3.x","tagName":"h2"},{"title":"Title Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.3.x/themes/university#title-slide","content":" #title-slide(logo: none, authors: none, ..args)   The title-slide function reads information from self.info for display. You can also pass the logo parameter and an array-type authors parameter.  ","version":"0.3.x","tagName":"h3"},{"title":"Regular Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.3.x/themes/university#regular-slide","content":" #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // university theme title: none, subtitle: none, header: none, footer: auto, )[ ... ]   The default slide function with a title and footer. The title defaults to the current section title, and the footer is set as per your configuration.  ","version":"0.3.x","tagName":"h3"},{"title":"Focus Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.3.x/themes/university#focus-slide","content":" #focus-slide(background-img: ..., background-color: ...)[ ... ]   Used to capture the audience's attention. The default background color is self.colors.primary.  ","version":"0.3.x","tagName":"h3"},{"title":"Matrix Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.3.x/themes/university#matrix-slide","content":" #matrix-slide(columns: ..., rows: ...)[ ... ][ ... ]   Refer to the documentation.  ","version":"0.3.x","tagName":"h3"},{"title":"slides Function​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.3.x/themes/university#slides-function","content":" The slides function has parameters:  title-slide: Defaults to true.slide-level: Defaults to 1.  You can set these parameters using #show: slides.with(..).  #import &quot;@preview/touying:0.3.1&quot;: * #let s = themes.university.register(s, aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #let (slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.3.x","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.3.x/themes/university#example","content":" #import &quot;@preview/touying:0.3.1&quot;: * #let s = themes.university.register(s, aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #let (slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) #show: slides.with(title-slide: false) #title-slide(authors: ([Author A], [Author B])) = The Section == Slide Title #slide[ #lorem(40) ] #slide(subtitle: emph[What is the problem?])[ #lorem(40) ] #focus-slide[ *Another variant with primary color in background...* ] #matrix-slide[ left ][ middle ][ right ] #matrix-slide(columns: 1)[ top ][ bottom ] #matrix-slide(columns: (1fr, 2fr, 1fr), ..(lorem(8),) * 9)  ","version":"0.3.x","tagName":"h2"},{"title":"Fit to Height / Width","type":0,"sectionRef":"#","url":"/touying/docs/0.3.x/utilities/fit-to","content":"","keywords":"","version":"0.3.x"},{"title":"Fit to Height​","type":1,"pageTitle":"Fit to Height / Width","url":"/touying/docs/0.3.x/utilities/fit-to#fit-to-height","content":" If you need to make an image fill the remaining slide height, you can try the fit-to-height function:  #utils.fit-to-height(1fr)[BIG]   Function definition:  #let fit-to-height( width: none, prescale-width: none, grow: true, shrink: true, height, body ) = { .. }   Parameters:  width: If specified, this will determine the width of the content after scaling. So, if you want the scaled content to fill half of the slide width, you can use width: 50%.prescale-width: This parameter allows you to make Typst's layout assume that the given content is to be laid out in a container of a certain width before scaling. For example, you can use prescale-width: 200% assuming the slide's width is twice the original.grow: Whether it can grow, default is true.shrink: Whether it can shrink, default is true.height: The specified height.body: The specific content.  ","version":"0.3.x","tagName":"h2"},{"title":"Fit to Width​","type":1,"pageTitle":"Fit to Height / Width","url":"/touying/docs/0.3.x/utilities/fit-to#fit-to-width","content":" If you need to limit the title width to exactly fill the slide width, you can try the fit-to-width function:  #utils.fit-to-width(1fr)[#lorem(20)]   Function definition:  #let fit-to-width(grow: true, shrink: true, width, body) = { .. }   Parameters:  grow: Whether it can grow, default is true.shrink: Whether it can shrink, default is true.width: The specified width.body: The specific content. ","version":"0.3.x","tagName":"h2"},{"title":"Changelog","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/changelog","content":"","keywords":"","version":"0.4.0+"},{"title":"v0.4.0​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.0+/changelog#v040","content":" ","version":"0.4.0+","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.0+/changelog#features","content":" feat: support #footnote[] for all themes.feat: access subslide and repeat in footer and header by self =&gt; self.subslide.feat: support numbered theorem environments by ctheorems.feat: support numbering for sections and subsections.  ","version":"0.4.0+","tagName":"h3"},{"title":"Fixes​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.0+/changelog#fixes","content":" fix: make nested includes work correctly.fix: disable multi-page slides from creating the same section multiple times.  ","version":"0.4.0+","tagName":"h3"},{"title":"Breaking changes​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.0+/changelog#breaking-changes","content":" refactor: remove self.padding and add self.full-header self.full-footer config.  ","version":"0.4.0+","tagName":"h2"},{"title":"v0.3.3​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.0+/changelog#v033","content":" template: move template to touying-aqua package, make Touying searchable in Typst Universe Packagesthemes: fix bugs in university and dewdrop themefeat: make set-show rule work without setting parameterfeat: make composer parameter more simplerfeat: add empty-slide function  ","version":"0.4.0+","tagName":"h2"},{"title":"v0.3.2​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.0+/changelog#v032","content":" fix critical bug: fix is-sequence function, make grid and table work correctly in touyingtheme: add aqua theme, thanks for pride7theme: make university theme more configurablerefactor: don't export variable s by default anymore, it will be extracted by register function (Breaking Change)meta: add categories and template config to typst.toml for Typst 0.11  ","version":"0.4.0+","tagName":"h2"},{"title":"v0.3.1​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.0+/changelog#v031","content":" fix some typosfix slide-level bugfix bug of pdfpc label  ","version":"0.4.0+","tagName":"h2"},{"title":"v0.3.0​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.0+/changelog#v030","content":" ","version":"0.4.0+","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.0+/changelog#features-1","content":" better show-slides mode.support align and pad.  ","version":"0.4.0+","tagName":"h3"},{"title":"Documentation​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.0+/changelog#documentation","content":" Add more detailed documentation.  ","version":"0.4.0+","tagName":"h3"},{"title":"Refactor​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.0+/changelog#refactor","content":" simplify theme.  ","version":"0.4.0+","tagName":"h3"},{"title":"Fix​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.0+/changelog#fix","content":" fix many bugs.  ","version":"0.4.0+","tagName":"h3"},{"title":"v0.2.1​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.0+/changelog#v021","content":" ","version":"0.4.0+","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.0+/changelog#features-2","content":" Touying-reducer: support cetz and fletcher animationuniversity theme: add university theme  ","version":"0.4.0+","tagName":"h3"},{"title":"Fix​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.0+/changelog#fix-1","content":" fix footer progress in metropolis themefix some bugs in simple and dewdrop themesfix bug that outline does not display more than 4 sections  ","version":"0.4.0+","tagName":"h3"},{"title":"v0.2.0​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.0+/changelog#v020","content":" Object-oriented programming: Singleton s, binding methods utils.methods(s) and (self: obj, ..) =&gt; {..} methods.Page arguments management: Instead of using #set page(..), you should use self.page-args to retrieve or set page parameters, thereby avoiding unnecessary creation of new pages.#pause for sequence content: You can use #pause at the outermost level of a slide, including inline and list.#pause for layout functions: You can use the composer parameter to add yourself layout function like utils.side-by-side, and simply use multiple pos parameters like #slide[..][..].#meanwhile for synchronous display: Provide a #meanwhile for resetting subslides counter.#pause and #meanwhile for math equation: Provide a #touying-equation(&quot;x + y pause + z&quot;) for math equation animations.Slides: Create simple slides using standard headings.Callback-style uncover, only and alternatives: Based on the concise syntax provided by Polylux, allow precise control of the timing for displaying content. You should manually control the number of subslides using the repeat parameter. Transparent cover: Enable transparent cover using oop syntax like #let s = (s.methods.enable-transparent-cover)(self: s).Handout mode: enable handout mode by #let s = (s.methods.enable-handout-mode)(self: s).Fit-to-width and fit-to-height: Fit-to-width for title in header and fit-to-height for image. utils.fit-to-width(grow: true, shrink: true, width, body)utils.fit-to-height(width: none, prescale-width: none, grow: true, shrink: true, height, body) Slides counter: states.slide-counter.display() + &quot; / &quot; + states.last-slide-number and states.touying-progress(ratio =&gt; ..).Appendix: Freeze the last-slide-number to prevent the slide number from increasing further.Sections: Touying's built-in section support can be used to display the current section title and show progress. section and subsection parameter in #slide to register a new section or subsection.states.current-section-title to get the current section.states.touying-outline or s.methods.touying-outline to display a outline of sections.states.touying-final-sections(sections =&gt; ..) for custom outline display.states.touying-progress-with-sections((current-sections: .., final-sections: .., current-slide-number: .., last-slide-number: ..) =&gt; ..) for powerful progress display. Navigation bar: Navigation bar like here by states.touying-progress-with-sections(..), in dewdrop theme.Pdfpc: pdfpc support and export .pdfpc file without external tool by typst query command simply. ","version":"0.4.0+","tagName":"h2"},{"title":"Creating Your Own Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/build-your-own-theme","content":"","keywords":"","version":"0.4.0+"},{"title":"Modifying Existing Themes​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.4.0+/build-your-own-theme#modifying-existing-themes","content":" If you wish to modify a theme within the Touying package locally instead of creating one from scratch, you can achieve this by following these steps:  Copy the theme code from the themes directory to your local machine. For example, copy themes/university.typ to a local file named university.typ.Remove all #import &quot;../xxx.typ&quot; commands at the top of the university.typ file.Add #import &quot;@preview/touying:0.4.0&quot;: * at the top of the university.typ file to import all modules.Replace self: s in the register function with self: themes.default.register() (Important).  You can then import and use the theme by:  #import &quot;@preview/touying:0.4.0&quot;: * #import &quot;university.typ&quot; #let s = university.register(aspect-ratio: &quot;16-9&quot;)   For a specific example, refer to: https://typst.app/project/rqRuzg0keo_ZEB5AdxjweA  ","version":"0.4.0+","tagName":"h2"},{"title":"Import​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.4.0+/build-your-own-theme#import","content":" Depending on whether the theme is for personal use or part of Touying, you can import in two ways:  If for personal use:  #import &quot;@preview/touying:0.4.0&quot;: *   If part of Touying themes:  #import &quot;../utils/utils.typ&quot; #import &quot;../utils/states.typ&quot; #import &quot;../utils/components.typ&quot;   Additionally, add the import statement in Touying's themes/themes.typ:  #import &quot;bamboo.typ&quot;   ","version":"0.4.0+","tagName":"h2"},{"title":"Register Function and Init Method​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.4.0+/build-your-own-theme#register-function-and-init-method","content":" Next, we'll distinguish between the bamboo.typ template file and the main.typ file, the latter of which is sometimes omitted.  Generally, the first step in creating slides is to determine font size and page aspect ratio. Therefore, we need to register an initialization method:  // bamboo.typ #import &quot;@preview/touying:0.4.0&quot;: * #let register( self: themes.default.register(), aspect-ratio: &quot;16-9&quot;, ) = { self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, ) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self } // main.typ #import &quot;@preview/touying:0.4.0&quot;: * #import &quot;bamboo.typ&quot; #let s = bamboo.register(aspect-ratio: &quot;16-9&quot;) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide) = utils.slides(s) #show: slides = First Section == First Slide #slide[ A slide with a title and an *important* information. ]   As you can see, we created a register function and passed an aspect-ratio parameter to set the page aspect ratio. We get default self by self: themes.default.register(). As you might already know, in Touying, we should not use set page(..) to set page parameters but rather use the syntax self.page-args += (..) to set them, as explained in the Page Layout section.  In addition, we registered a self.methods.init method, which can be used for some global style settings. For example, in this case, we added set text(size: 20pt) to set the font size. You can also place additional global style settings here, such as set par(justify: true). Since the init function is placed inside self.methods, it is a method, not a regular function. Therefore, we need to add the parameter self: none to use it properly.  As you can see, later in main.typ, we apply the global style settings in init using #show: init, where init is bound and unpacked through utils.methods(s).  If you pay extra attention, you'll notice that the register function has an independent self at the end. This actually represents returning the modified self as the return value, which will be saved in #let s = ... This line is therefore indispensable.  ","version":"0.4.0+","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.4.0+/build-your-own-theme#color-theme","content":" Choosing an attractive color theme for your slides is crucial. Touying provides built-in color theme support to minimize API differences between different themes. Touying offers two dimensions of color selection: the first is neutral, primary, secondary, and tertiary for hue distinction, with primary being the most commonly used; the second is default, light, lighter, lightest, dark, darker, and darkest for brightness distinction.  As we are creating the Bamboo theme, we chose a color for the primary theme, similar to bamboo (rgb(&quot;#5E8B65&quot;)), and included neutral lightest/darkest as background and font colors.  As shown in the code below, we use (self.methods.colors)(self: self, ..) to modify the color theme. Essentially, it is a wrapper for self.colors += (..).  #let register( self: themes.default.register(), aspect-ratio: &quot;16-9&quot;, ) = { // color theme self = (self.methods.colors)( self: self, primary: rgb(&quot;#5E8B65&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), neutral-darkest: rgb(&quot;#000000&quot;), ) self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, ) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self }   After adding the color theme, we can access the color using syntax like self.colors.primary.  It's worth noting that users can change the theme color at any time using:  #let s = (s.methods.colors)(self: s, primary: rgb(&quot;#3578B9&quot;))   This flexibility demonstrates Touying's powerful customization capabilities.  ","version":"0.4.0+","tagName":"h2"},{"title":"Practical: Custom Alert Method​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.4.0+/build-your-own-theme#practical-custom-alert-method","content":" In general, we need to provide a #alert[..] function for users, similar to #strong[..]. Typically, #alert[..] emphasizes text using the primary theme color for aesthetics. We add a line in the register function:  self.methods.alert = (self: none, it) =&gt; text(fill: self.colors.primary, it)   This code sets the text color to self.colors.primary, utilizing the theme's primary color.  ","version":"0.4.0+","tagName":"h2"},{"title":"Custom Header and Footer​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.4.0+/build-your-own-theme#custom-header-and-footer","content":" Here, assuming you've already read the Page Layout section, we know we should add headers and footers to the slides.  Firstly, we add self.bamboo-title = []. This means we save the title of the current slide as a member variable self.bamboo-title, stored in self. This makes it easy to use in the header and later modifications. Similarly, we create self.bamboo-footer, saving the footer: [] parameter from the register function for displaying in the bottom-left corner.  It's worth noting that our header is actually a content function in the form of let header(self) = { .. } with the self parameter, allowing us to get the latest information from self. For example, self.bamboo-title. The footer is similar.  The components.cell used inside is actually #let cell = block.with(width: 100%, height: 100%, above: 0pt, below: 0pt, breakable: false), and show: components.cell is shorthand for components.cell(body). The show: pad.with(.4em) in the footer is similar.  Another point to note is the states module, which contains many counters and state-related content. For example, states.current-section-title is used to display the current section, and states.slide-counter.display() + &quot; / &quot; + states.last-slide-number is used to display the current page number and total number of pages.  We observe the usage of utils.call-or-display(self, self.bamboo-footer) to display self.bamboo-footer. This is used to handle situations like self.bamboo-footer = (self) =&gt; {..}, ensuring a unified approach to displaying content functions and content.  To ensure proper display of the header and footer and sufficient spacing from the main content, we also set margins, such as self.page-args += (margin: (top: 4em, bottom: 1.5em, x: 2em)).  We also need to customize a slide method that accepts slide(self: none, title: auto, ..args). The first self: none is a required method parameter for getting the latest self. The second title is used to update self.bamboo-title for displaying in the header. The third ..args collects the remaining parameters and passes them to (self.methods.touying-slide)(self: self, ..args), which is necessary for the Touying slide functionality to work properly. Additionally, we need to register this method in the register function with self.methods.slide = slide.  // bamboo.typ #import &quot;@preview/touying:0.4.0&quot;: * #let slide(self: none, title: auto, ..args) = { if title != auto { self.bamboo-title = title } (self.methods.touying-slide)(self: self, ..args) } #let register( self: themes.default.register(), aspect-ratio: &quot;16-9&quot;, footer: [], ) = { // color theme self = (self.methods.colors)( self: self, primary: rgb(&quot;#5E8B65&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), neutral-darkest: rgb(&quot;#000000&quot;), ) // variables for later use self.bamboo-title = [] self.bamboo-footer = footer // set page let header(self) = { set align(top) show: components.cell.with(fill: self.colors.primary, inset: 1em) set align(horizon) set text(fill: self.colors.neutral-lightest, size: .7em) states.current-section-title linebreak() set text(size: 1.5em) utils.call-or-display(self, self.bamboo-title) } let footer(self) = { set align(bottom) show: pad.with(.4em) set text(fill: self.colors.neutral-darkest, size: .8em) utils.call-or-display(self, self.bamboo-footer) h(1fr) states.slide-counter.display() + &quot; / &quot; + states.last-slide-number } self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, header: header, footer: footer, margin: (top: 4em, bottom: 1.5em, x: 2em), ) // register methods self.methods.slide = slide self.methods.alert = (self: none, it) =&gt; text(fill: self.colors.primary, it) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self } // main.typ #import &quot;@preview/touying:0.4.0&quot;: * #import &quot;bamboo.typ&quot; #let s = bamboo.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide) = utils.slides(s) #show: slides = First Section == First Slide #slide[ A slide with a title and an *important* information. ]     ","version":"0.4.0+","tagName":"h2"},{"title":"Custom Special Slide​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.4.0+/build-your-own-theme#custom-special-slide","content":" Building upon the basic slide, we further add some special slide functions such as title-slide, focus-slide, and a custom slides method.  For the title-slide method, first, we call self = utils.empty-page(self). This function clears self.page-args.header, self.page-args.footer, and sets margin to 0em, creating a blank page effect. Then, we use let info = self.info + args.named() to get information stored in self.info and update it with the passed args.named() for later use as info.title. The specific page content body will vary for each theme, so we won't go into details here. Finally, we call `(self.methods.touying-slide)(self: self, repeat: none, body  ), where repeat: noneindicates that this page does not require animation effects, and passing thebody` parameter displays its content.  For the new-section-slide method, the process is similar. The only thing to note is that in (self.methods.touying-slide)(self: self, repeat: none, section: section, body), we pass an additional section: section parameter to declare the creation of a new section. Another point to note is that besides self.methods.new-section-slide = new-section-slide, we also register self.methods.touying-new-section-slide = new-section-slide, so new-section-slide will be automatically called when encountering a first-level title.  For the focus-slide method, most of the content is similar, but it's worth noting that we use self.page-args += (..) to update the page's background color.  Finally, we update the slides(self: none, title-slide: true, slide-level: 1, ..args) method. When title-slide is true, using #show: slides will automatically create a title-slide. Setting slide-level: 1 indicates that the first-level and second-level titles correspond to section and title, respectively.  // bamboo.typ #import &quot;@preview/touying:0.4.0&quot;: * #let slide(self: none, title: auto, ..args) = { if title != auto { self.bamboo-title = title } (self.methods.touying-slide)(self: self, ..args) } #let title-slide(self: none, ..args) = { self = utils.empty-page(self) let info = self.info + args.named() let body = { set align(center + horizon) block( fill: self.colors.primary, width: 80%, inset: (y: 1em), radius: 1em, text(size: 2em, fill: self.colors.neutral-lightest, weight: &quot;bold&quot;, info.title) ) set text(fill: self.colors.neutral-darkest) if info.author != none { block(info.author) } if info.date != none { block(if type(info.date) == datetime { info.date.display(self.datetime-format) } else { info.date }) } } (self.methods.touying-slide)(self: self, repeat: none, body) } #let new-section-slide(self: none, section) = { self = utils.empty-page(self) let body = { set align(center + horizon) set text(size: 2em, fill: self.colors.primary, weight: &quot;bold&quot;, style: &quot;italic&quot;) section } (self.methods.touying-slide)(self: self, repeat: none, section: section, body) } #let focus-slide(self: none, body) = { self = utils.empty-page(self) self.page-args += ( fill: self.colors.primary, margin: 2em, ) set text(fill: self.colors.neutral-lightest, size: 2em) (self.methods.touying-slide)(self: self, repeat: none, align(horizon + center, body)) } #let slides(self: none, title-slide: true, slide-level: 1, ..args) = { if title-slide { (self.methods.title-slide)(self: self) } (self.methods.touying-slides)(self: self, slide-level: slide-level, ..args) } #let register( self: themes.default.register(), aspect-ratio: &quot;16-9&quot;, footer: [], ) = { // color theme self = (self.methods.colors)( self: self, primary: rgb(&quot;#5E8B65&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), neutral-darkest: rgb(&quot;#000000&quot;), ) // variables for later use self.bamboo-title = [] self.bamboo-footer = footer // set page let header(self) = { set align(top) show: components.cell.with(fill: self.colors.primary, inset: 1em) set align(horizon) set text(fill: self.colors.neutral-lightest, size: .7em) states.current-section-title linebreak() set text(size: 1.5em) utils.call-or-display(self, self.bamboo-title) } let footer(self) = { set align(bottom) show: pad.with(.4em) set text(fill: self.colors.neutral-darkest, size: .8em) utils.call-or-display(self, self.bamboo-footer) h(1fr) states.slide-counter.display() + &quot; / &quot; + states.last-slide-number } self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, header: header, footer: footer, margin: (top: 4em, bottom: 1.5em, x: 2em), ) // register methods self.methods.slide = slide self.methods.title-slide = title-slide self.methods.new-section-slide = new-section-slide self.methods.touying-new-section-slide = new-section-slide self.methods.focus-slide = focus-slide self.methods.slides = slides self.methods.alert = (self: none, it) =&gt; text(fill: self.colors.primary, it) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self } // main.typ #import &quot;@preview/touying:0.4.0&quot;: * #import &quot;bamboo.typ&quot; #let s = bamboo.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, focus-slide) = utils.slides(s) #show: slides = First Section == First Slide #slide[ A slide with a title and an *important* information. ] #focus-slide[ Focus on it! ]     ","version":"0.4.0+","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.4.0+/build-your-own-theme#conclusion","content":" Congratulations! You've created a simple and elegant theme. Perhaps you may find that Touying introduces a wealth of concepts, making it initially challenging to grasp. This is normal, as Touying opts for functionality over simplicity. However, thanks to Touying's comprehensive and unified approach, you can easily extract commonalities between different themes and transfer your knowledge seamlessly. You can also save global variables, modify existing themes, or switch between themes effortlessly, showcasing the benefits of Touying's decoupling and object-oriented programming. ","version":"0.4.0+","tagName":"h2"},{"title":"Code Style","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/code-styles","content":"","keywords":"","version":"0.4.0+"},{"title":"Simple Style​","type":1,"pageTitle":"Code Style","url":"/touying/docs/0.4.0+/code-styles#simple-style","content":" If we only need simplicity, we can directly input content under the heading, just like writing a normal Typst document. The heading here serves to divide the pages, and we can use commands like #pause to achieve animation effects.  #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.simple.register() #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     You can use an empty heading == to create a new page. This skill also helps clear the continuation of the previous title.  PS: We can use the #slides-end marker to signify the end of #show: slides.  ","version":"0.4.0+","tagName":"h2"},{"title":"Block Style​","type":1,"pageTitle":"Code Style","url":"/touying/docs/0.4.0+/code-styles#block-style","content":" Many times, using simple style alone cannot achieve all the functions we need. For more powerful features and clearer structure, we can also use block style in the form of #slide[...]. The #slide function needs to be unpacked using the syntax #let (slide, empty-slide) = utils.slides(s) to be used correctly after #show: slides.  For example, the previous example can be transformed into:  #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.simple.register() #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Title == First Slide #slide[ Hello, Touying! #pause Hello, Typst! ]   and #empty-slide[] to create an empty slide without header and footer.  There are many advantages to doing this:  Many times, we not only need the default #slide[...] but also special slide functions like #focus-slide[...].Different themes' #slide[...] functions may have more parameters than the default, such as the university theme's #slide[...] function having a subtitle parameter.Only slide functions can use the callback-style content block to achieve complex animation effects with #only and #uncover functions.It has a clearer structure. By identifying #slide[...] blocks, we can easily distinguish the specific pagination effects of slides.  ","version":"0.4.0+","tagName":"h2"},{"title":"Convention Over Configuration​","type":1,"pageTitle":"Code Style","url":"/touying/docs/0.4.0+/code-styles#convention-over-configuration","content":" You may have noticed that when using the simple theme, using a level-one heading automatically creates a new section slide. This is because the simple theme registers an s.methods.touying-new-section-slide method, so Touying will automatically call this method.  If we don't want it to automatically create such a section slide, we can delete this method:  #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.simple.register() #(s.methods.touying-new-section-slide = none) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     As you can see, there are only two pages left, and the default section slide is gone.  Similarly, we can register a new section slide:  #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.simple.register() #(s.methods.touying-new-section-slide = (self: none, section, ..args) =&gt; { self = utils.empty-page(self) (s.methods.touying-slide)(self: self, section: section, { set align(center + horizon) set text(size: 2em, fill: s.colors.primary, style: &quot;italic&quot;, weight: &quot;bold&quot;) section }, ..args) }) #let (init, slides, touying-outline) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     Similarly, we can modify s.methods.touying-new-subsection-slide to do the same for subsection.  In fact, besides s.methods.touying-new-section-slide, another special slide function is the s.methods.slide function, which will be called by default in simple style when #slide[...] is not explicitly used.  Also, since #slide[...] is registered in s.slides = (&quot;slide&quot;,), the section, subsection, and title parameters will be automatically passed, while others like #focus-slide[...] will not automatically receive these three parameters.  Principle In fact, you can also not use #show: slides and utils.slides(s), but only use utils.methods(s), for example: #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.simple.register() #let (init, touying-outline, slide) = utils.methods(s) #show: init #slide(section: [Title], title: [First Slide])[ Hello, Touying! #pause Hello, Typst! ] Here, you need to manually pass in section, subsection, and title, but it will have better performance, suitable for cases where faster performance is needed, such as when there are more than dozens or hundreds of pages. ","version":"0.4.0+","tagName":"h2"},{"title":"Complex Animations","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/dynamic/complex","content":"","keywords":"","version":"0.4.0+"},{"title":"Callback-Style Functions​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/0.4.0+/dynamic/complex#callback-style-functions","content":" To overcome the limitations of styled and layout mentioned earlier, Touying cleverly implements always-effective only, uncover, and alternatives using callback functions. Specifically, you need to introduce these three functions as follows:  #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) In subslide #self.subslide, test #uncover(&quot;2-&quot;)[uncover] function, and test #only(&quot;2-&quot;)[only] function, #pause and paused text. ])     Notice that we no longer pass a content block but instead pass a callback function with a self parameter. Later, we extract only, uncover, and alternatives functions from self using:  #let (uncover, only, alternatives) = utils.methods(self)   We then call these functions in subsequent steps.  Here's an interesting fact: the self.subslide of type int indicates the current subslide index, and in fact, the only, uncover, and alternatives functions rely on self.subslide to determine the current subslide index.  Warning We manually specify the repeat: 3 parameter, indicating the display of 3 subslides. We need to do this manually because Touying cannot infer how many subslides only, uncover, and alternatives should display.  ","version":"0.4.0+","tagName":"h2"},{"title":"only​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/0.4.0+/dynamic/complex#only","content":" The only function means it &quot;appears&quot; only on selected subslides. If it doesn't appear, it completely disappears and doesn't occupy any space. In other words, #only(index, body) is either body or none.  The index can be an int type or a str type like &quot;2-&quot; or &quot;2-3&quot;. For more usage, refer to Polylux.  ","version":"0.4.0+","tagName":"h2"},{"title":"uncover​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/0.4.0+/dynamic/complex#uncover","content":" The uncover function means it &quot;displays&quot; only on selected subslides; otherwise, it will be covered by the cover function but still occupies the original space. In other words, #uncover(index, body) is either body or cover(body).  The index can be an int type or a str type like &quot;2-&quot; or &quot;2-3&quot;. For more usage, refer to Polylux.  You may also have noticed that #pause actually uses the cover function, providing a more convenient syntax. In reality, their effects are almost identical.  ","version":"0.4.0+","tagName":"h2"},{"title":"alternatives​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/0.4.0+/dynamic/complex#alternatives","content":" The alternatives function displays a series of different content in different subslides. For example:  #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) #alternatives[Ann][Bob][Christopher] likes #alternatives[chocolate][strawberry][vanilla] ice cream. ])     As you can see, alternatives can automatically expand to the most suitable width and height, a capability that only and uncover lack. In fact, alternatives has other parameters, such as start: 2, repeat-last: true, and position: center + horizon. For more usage, refer to Polylux. ","version":"0.4.0+","tagName":"h2"},{"title":"Cover Function","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/dynamic/cover","content":"","keywords":"","version":"0.4.0+"},{"title":"Default Cover Function: hide​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/0.4.0+/dynamic/cover#default-cover-function-hide","content":" The cover function is a method stored in s.methods.cover, which is later used by uncover and #pause.  The default cover function is the hide function. This function makes the internal content invisible without affecting the layout.  ","version":"0.4.0+","tagName":"h2"},{"title":"Updating the Cover Function​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/0.4.0+/dynamic/cover#updating-the-cover-function","content":" In some cases, you might want to use your own cover function. In that case, you can set your own cover function using:  let s = (s.methods.update-cover)(self: s, is-method: true, cover-fn)   Here, if you set is-method: false, Touying will wrap cover-fn into a method for you.  ","version":"0.4.0+","tagName":"h2"},{"title":"Semi-Transparent Cover Function​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/0.4.0+/dynamic/cover#semi-transparent-cover-function","content":" Touying supports a semi-transparent cover function, which can be enabled by adding:  #let s = (s.methods.enable-transparent-cover)(self: s)   You can adjust the transparency through the alpha: .. parameter.  Warning Note that the transparent-cover here does not preserve text layout like hide does because it adds an extra layer of box, which may disrupt the original structure of the page.  Internals The enable-transparent-cover method is defined as: #let s.methods.enable-transparent-cover = ( self: none, constructor: rgb, alpha: 85%, ) =&gt; { self.methods.cover = (self: none, body) =&gt; { utils.cover-with-rect( fill: utils.update-alpha( constructor: constructor, self.page-args.fill, alpha, ), body ) } self } It creates a semi-transparent rectangular mask with the same color as the background to simulate the effect of transparent content. Here, constructor: rgb and alpha: 85% indicate the background color's construction function and transparency level, respectively. ","version":"0.4.0+","tagName":"h2"},{"title":"Handout Mode","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/dynamic/handout","content":"Handout Mode While watching slides and attending lectures, the audience often wishes to have handouts for reviewing challenging concepts. Therefore, it's beneficial for the author to provide handouts for the audience, preferably before the lecture for better preparation. The handout mode differs from the regular mode as it doesn't require intricate animation effects. It retains only the last subslide of each slide. Enabling handout mode is simple: #let s = (s.methods.enable-handout-mode)(self: s) ","keywords":"","version":"0.4.0+"},{"title":"Math Equation Animations","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/dynamic/equation","content":"","keywords":"","version":"0.4.0+"},{"title":"Simple Animation​","type":1,"pageTitle":"Math Equation Animations","url":"/touying/docs/0.4.0+/dynamic/equation#simple-animation","content":" Let's start with an example:  #slide[ Touying equation with pause: #touying-equation(` f(x) &amp;= pause x^2 + 2x + 1 \\ &amp;= pause (x + 1)^2 \\ `) #meanwhile Touying equation is very simple. ]     We use the touying-equation function to incorporate pause and meanwhile within the text of math equations (in fact, you can also use #pause or #pause;).  As you would expect, the math equation is displayed step by step, making it suitable for presenters to demonstrate their math reasoning.  Warning While the touying-equation function is convenient, you should always be aware that it doesn't perform complex syntax analysis. It simply splits the string using regular expressions. Therefore, you should not use pause or meanwhile within functions like display(..)!  ","version":"0.4.0+","tagName":"h2"},{"title":"Complex Animation​","type":1,"pageTitle":"Math Equation Animations","url":"/touying/docs/0.4.0+/dynamic/equation#complex-animation","content":" In fact, we can also use only, uncover, and alternatives within touying-equation with a little trick:  #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) #touying-equation(scope: (uncover: uncover), ` f(x) &amp;= pause x^2 + 2x + uncover(&quot;3-&quot;, 1) \\ &amp;= pause (x + 1)^2 \\ `) ])     We can pass the functions we need into the touying-equation through the scope parameter, such as uncover in this example.  ","version":"0.4.0+","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Math Equation Animations","url":"/touying/docs/0.4.0+/dynamic/equation#parameters","content":" The function definition of touying-equation is:  #let touying-equation(block: true, numbering: none, supplement: auto, scope: (:), body) = { .. }   Therefore, you can pass parameters like block, numbering, and supplement to touying-equation just like using normal math equations. ","version":"0.4.0+","tagName":"h2"},{"title":"Pdfpc","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/external/pdfpc","content":"","keywords":"","version":"0.4.0+"},{"title":"Adding Metadata​","type":1,"pageTitle":"Pdfpc","url":"/touying/docs/0.4.0+/external/pdfpc#adding-metadata","content":" Touying remains consistent with Polylux to avoid conflicts between APIs.  For example, you can add notes using #pdfpc.speaker-note(&quot;This is a note that only the speaker will see.&quot;).  ","version":"0.4.0+","tagName":"h2"},{"title":"Pdfpc Configuration​","type":1,"pageTitle":"Pdfpc","url":"/touying/docs/0.4.0+/external/pdfpc#pdfpc-configuration","content":" To add pdfpc configurations, you can use  #let s = (s.methods.append-preamble)(self: s, pdfpc.config( duration-minutes: 30, start-time: datetime(hour: 14, minute: 10, second: 0), end-time: datetime(hour: 14, minute: 40, second: 0), last-minutes: 5, note-font-size: 12, disable-markdown: false, default-transition: ( type: &quot;push&quot;, duration-seconds: 2, angle: ltr, alignment: &quot;vertical&quot;, direction: &quot;inward&quot;, ), ))   Add the corresponding configurations. Refer to Polylux for specific configuration details.  ","version":"0.4.0+","tagName":"h2"},{"title":"Exporting .pdfpc File​","type":1,"pageTitle":"Pdfpc","url":"/touying/docs/0.4.0+/external/pdfpc#exporting-pdfpc-file","content":" Assuming your document is ./example.typ, you can export the .pdfpc file directly using:  typst query --root . ./example.typ --field value --one &quot;&lt;pdfpc-file&gt;&quot; &gt; ./example.pdfpc   With the compatibility of Touying and Polylux, you can make Polylux also support direct export by adding the following code:  #import &quot;@preview/touying:0.4.0&quot; #locate(loc =&gt; touying.pdfpc.pdfpc-file(loc))  ","version":"0.4.0+","tagName":"h2"},{"title":"Other Animations","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/dynamic/other","content":"","keywords":"","version":"0.4.0+"},{"title":"Simple Animations​","type":1,"pageTitle":"Other Animations","url":"/touying/docs/0.4.0+/dynamic/other#simple-animations","content":" Here's an example:  #import &quot;@preview/touying:0.4.0&quot;: * #import &quot;@preview/cetz:0.2.2&quot; #import &quot;@preview/fletcher:0.4.4&quot; as fletcher: node, edge // cetz and fletcher bindings for touying #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: fletcher.diagram, cover: fletcher.hide) #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides.with(title-slide: false, outline-slide: false) // cetz animation #slide[ Cetz in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) ] // fletcher animation #slide[ Fletcher in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) ]     ","version":"0.4.0+","tagName":"h2"},{"title":"only and uncover​","type":1,"pageTitle":"Other Animations","url":"/touying/docs/0.4.0+/dynamic/other#only-and-uncover","content":" In fact, we can also use only and uncover within cetz, just requiring a bit of skill:  #slide(repeat: 3, self =&gt; [ #let (uncover, only) = utils.methods(self) Cetz in Touying in subslide #self.subslide: #cetz.canvas({ import cetz.draw: * let self = (self.methods.update-cover)(self: self, hide.with(bounds: true)) let (uncover,) = utils.methods(self) rect((0,0), (5,5)) uncover(&quot;2-3&quot;, { rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) }) only(3, line((0,0), (2.5, 2.5), name: &quot;line&quot;)) }) ])  ","version":"0.4.0+","tagName":"h2"},{"title":"Simple Animations","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/dynamic/simple","content":"","keywords":"","version":"0.4.0+"},{"title":"pause​","type":1,"pageTitle":"Simple Animations","url":"/touying/docs/0.4.0+/dynamic/simple#pause","content":" The purpose of #pause is straightforward – it separates the subsequent content into the next subslide. You can use multiple #pause to create multiple subslides. Here's a simple example:  #slide[ First #pause Second #pause Third ]     This example will create three subslides, gradually revealing the content.  As you can see, #pause can be used inline or on a separate line.  ","version":"0.4.0+","tagName":"h2"},{"title":"meanwhile​","type":1,"pageTitle":"Simple Animations","url":"/touying/docs/0.4.0+/dynamic/simple#meanwhile","content":" In some cases, you may need to display additional content simultaneously with #pause. In such cases, you can use #meanwhile.  #slide[ First #pause Second #meanwhile Third #pause Fourth ]     This example will create only two subslides, with &quot;First&quot; and &quot;Third&quot; displayed simultaneously, and &quot;Second&quot; and &quot;Fourth&quot; displayed simultaneously.  ","version":"0.4.0+","tagName":"h2"},{"title":"Handling layout functions​","type":1,"pageTitle":"Simple Animations","url":"/touying/docs/0.4.0+/dynamic/simple#handling-layout-functions","content":" If you use layout functions like grid inside slide[..], you might be surprised to find that subsequent #pause and #meanwhile do not work. This is because Touying cannot detect the content inside layout functions. But you can use the composer parameter of #slide() to meet most requirements.  Internals Touying doesn't rely on counter and locate to implement #pause. Instead, it has a parser written in Typst script. It parses the input content block as a sequence and then transforms and reorganizes this sequence into the series of subslides we need. ","version":"0.4.0+","tagName":"h2"},{"title":"Typst Preview","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/external/typst-preview","content":"Typst Preview The Typst Preview extension for VS Code provides an excellent slide mode, allowing us to preview and present slides. Press Ctrl/Cmd + Shift + P and type Typst Preview: Preview current file in slide mode to open the preview in slide mode. Press Ctrl/Cmd + Shift + P and type Typst Preview: Preview current file in browser and slide mode to open the slide mode in the browser. Now, you can press keys like F11 to enter fullscreen mode in the browser, making it suitable for slide presentations. Since Typst Preview is based on SVG, it can play GIF animations, which is very helpful for dynamic slides.","keywords":"","version":"0.4.0+"},{"title":"CeTZ","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/integration/cetz","content":"","keywords":"","version":"0.4.0+"},{"title":"Simple Animation​","type":1,"pageTitle":"CeTZ","url":"/touying/docs/0.4.0+/integration/cetz#simple-animation","content":" An example:  #import &quot;@preview/touying:0.4.0&quot;: * #import &quot;@preview/cetz:0.2.2&quot; #import &quot;@preview/fletcher:0.4.4&quot; as fletcher: node, edge // cetz and fletcher bindings for touying #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: fletcher.diagram, cover: fletcher.hide) #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides.with(title-slide: false, outline-slide: false) // cetz animation #slide[ Cetz in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) ] // fletcher animation #slide[ Fletcher in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) ]     ","version":"0.4.0+","tagName":"h2"},{"title":"only and uncover​","type":1,"pageTitle":"CeTZ","url":"/touying/docs/0.4.0+/integration/cetz#only-and-uncover","content":" In fact, we can also use only and uncover within CeTZ, but it requires a bit of technique:  #slide(repeat: 3, self =&gt; [ #let (uncover, only) = utils.methods(self) Cetz in Touying in subslide #self.subslide: #cetz.canvas({ import cetz.draw: * let self = (self.methods.update-cover)(self: self, hide.with(bounds: true)) let (uncover,) = utils.methods(self) rect((0,0), (5,5)) uncover(&quot;2-3&quot;, { rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) }) only(3, line((0,0), (2.5, 2.5), name: &quot;line&quot;)) }) ])  ","version":"0.4.0+","tagName":"h2"},{"title":"Codly","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/integration/codly","content":"Codly When using Codly, we should initialize it using the s.methods.append-preamble method. #import &quot;@preview/touying:0.4.0&quot;: * #import &quot;@preview/codly:0.2.0&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.append-preamble)(self: s)[ #codly(languages: ( rust: (name: &quot;Rust&quot;, icon: &quot;\\u{fa53}&quot;, color: rgb(&quot;#CE412B&quot;)), )) ] #let (init, slides) = utils.methods(s) #show heading.where(level: 2): set block(below: 1em) #show: init #show: codly-init.with() #let (slide, empty-slide) = utils.slides(s) #show: slides #slide[ == First slide #raw(lang: &quot;rust&quot;, block: true, `pub fn main() { println!(&quot;Hello, world!&quot;); }`.text) ] ","keywords":"","version":"0.4.0+"},{"title":"Ctheorems","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/integration/ctheorems","content":"Ctheorems Touying can work seamlessly with the ctheorems package, allowing you to directly use the ctheorems package. Moreover, you can utilize #let s = (s.methods.numbering)(self: s, section: &quot;1.&quot;, &quot;1.1&quot;) to set numbering for sections and subsections. #import &quot;@preview/touying:0.4.0&quot;: * #import &quot;@preview/ctheorems:1.1.2&quot;: * // Register university theme #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;) // Set the numbering of section and subsection #let s = (s.methods.numbering)(self: s, section: &quot;1.&quot;, &quot;1.1&quot;) // Theorems configuration by ctheorems #show: thmrules.with(qed-symbol: $square$) #let theorem = thmbox(&quot;theorem&quot;, &quot;Theorem&quot;, fill: rgb(&quot;#eeffee&quot;)) #let corollary = thmplain( &quot;corollary&quot;, &quot;Corollary&quot;, base: &quot;theorem&quot;, titlefmt: strong ) #let definition = thmbox(&quot;definition&quot;, &quot;Definition&quot;, inset: (x: 1.2em, top: 1em)) #let example = thmplain(&quot;example&quot;, &quot;Example&quot;).with(numbering: none) #let proof = thmproof(&quot;proof&quot;, &quot;Proof&quot;) // Extract methods #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert // Extract slide functions #let (slide, empty-slide) = utils.slides(s) #show: slides = Theorems == Prime numbers #definition[ A natural number is called a #highlight[_prime number_] if it is greater than 1 and cannot be written as the product of two smaller natural numbers. ] #example[ The numbers $2$, $3$, and $17$ are prime. @cor_largest_prime shows that this list is not exhaustive! ] #theorem(&quot;Euclid&quot;)[ There are infinitely many primes. ] #proof[ Suppose to the contrary that $p_1, p_2, dots, p_n$ is a finite enumeration of all primes. Set $P = p_1 p_2 dots p_n$. Since $P + 1$ is not in our list, it cannot be prime. Thus, some prime factor $p_j$ divides $P + 1$. Since $p_j$ also divides $P$, it must divide the difference $(P + 1) - P = 1$, a contradiction. ] #corollary[ There is no largest prime number. ] &lt;cor_largest_prime&gt; #corollary[ There are infinitely many composite numbers. ] #theorem[ There are arbitrarily long stretches of composite numbers. ] #proof[ For any $n &gt; 2$, consider $ n! + 2, quad n! + 3, quad ..., quad n! + n #qedhere $ ] ","keywords":"","version":"0.4.0+"},{"title":"Global Settings","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/global-settings","content":"","keywords":"","version":"0.4.0+"},{"title":"Global Styles​","type":1,"pageTitle":"Global Settings","url":"/touying/docs/0.4.0+/global-settings#global-styles","content":" For Touying, global styles refer to set rules or show rules that need to be applied everywhere, such as #set text(size: 20pt).  Themes in Touying encapsulate some of their own global styles, which are placed in #show: init. For example, the university theme encapsulates the following:  self.methods.init = (self: none, body) =&gt; { set text(size: 25pt) show footnote.entry: set text(size: .6em) body }   If you are not a theme creator but want to add your own global styles to your slides, you can simply place them after #show: init and before #show: slides. For example, the metropolis theme recommends adding the following global styles:  #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init // global styles #set text(font: &quot;Fira Sans&quot;, weight: &quot;light&quot;, size: 20pt) #show math.equation: set text(font: &quot;Fira Math&quot;) #set strong(delta: 100) #set par(justify: true) #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides   However, note that you should not use #set page(..). Instead, modify s.page-args and s.padding, for example:  #(s.page-args += ( margin: (x: 0em, y: 2em), header: align(top)[Header], footer: align(bottom)[Footer], header-ascent: 0em, footer-descent: 0em, )) #(s.padding += (x: 4em, y: 0em))   ","version":"0.4.0+","tagName":"h2"},{"title":"Global Information​","type":1,"pageTitle":"Global Settings","url":"/touying/docs/0.4.0+/global-settings#global-information","content":" Like Beamer, Touying, through an OOP-style unified API design, can help you better maintain global information, allowing you to easily switch between different themes. Global information is a typical example of this.  You can set the title, subtitle, author, date, and institution information for slides using:  #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], )   In subsequent slides, you can access them through s.info or self.info.  This information is generally used in the title-slide, header, and footer of the theme, for example:  #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution)   The date can accept datetime format or content format, and the display format for the datetime format can be changed using:  #let s = (s.methods.datetime-format)(self: s, &quot;[year]-[month]-[day]&quot;)   Principle Here, we will introduce a bit of OOP concept in Touying. You should know that Typst is a typesetting language that supports incremental rendering, which means Typst caches the results of previous function calls. This requires that Typst consists of pure functions, meaning functions that do not change external variables. Thus, it is challenging to modify a global variable in the true sense, even with the use of state or counter. This would require the use of locate with callback functions to obtain the values inside, and this approach would have a significant impact on performance. Touying does not use state or counter and does not violate the principle of pure functions in Typst. Instead, it uses a clever approach in an object-oriented style, maintaining a global singleton s. In Touying, an object refers to a Typst dictionary with its own member variables and methods. We agree that methods all have a named parameter self for passing the object itself, and methods are placed in the .methods domain. With this concept, it becomes easier to write methods to update info: #let s = ( info: (:), methods: ( // update info info: (self: none, ..args) =&gt; { self.info += args.named() self }, ) ) #let s = (s.methods.info)(self: s, title: [title]) Title is #s.info.title Now you can understand the purpose of the utils.methods() function: to bind self to all methods of s and return it, simplifying the subsequent usage through unpacking syntax. #let (init, slides, alert) = utils.methods(s)   ","version":"0.4.0+","tagName":"h2"},{"title":"State Initialization​","type":1,"pageTitle":"Global Settings","url":"/touying/docs/0.4.0+/global-settings#state-initialization","content":" In general, the two ways mentioned above are sufficient for adding global settings. However, there are still situations where we need to initialize counters or states. If you place this code before #show: slides, a blank page will be created, which is something we don't want to see. In such cases, you can use the s.methods.append-preamble method. For example, when using the codly package:  #import &quot;@preview/touying:0.4.0&quot;: * #import &quot;@preview/codly:0.2.0&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.append-preamble)(self: s)[ #codly(languages: ( rust: (name: &quot;Rust&quot;, icon: &quot;\\u{fa53}&quot;, color: rgb(&quot;#CE412B&quot;)), )) ] #let (init, slides) = utils.methods(s) #show heading.where(level: 2): set block(below: 1em) #show: init #show: codly-init.with() #let (slide, empty-slide) = utils.slides(s) #show: slides #slide[ == First slide #raw(lang: &quot;rust&quot;, block: true, `pub fn main() { println!(&quot;Hello, world!&quot;); }`.text) ]     Or when configuring Pdfpc:  // Pdfpc configuration // typst query --root . ./example.typ --field value --one &quot;&lt;pdfpc-file&gt;&quot; &gt; ./example.pdfpc #let s = (s.methods.append-preamble)(self: s, pdfpc.config( duration-minutes: 30, start-time: datetime(hour: 14, minute: 10, second: 0), end-time: datetime(hour: 14, minute: 40, second: 0), last-minutes: 5, note-font-size: 12, disable-markdown: false, default-transition: ( type: &quot;push&quot;, duration-seconds: 2, angle: ltr, alignment: &quot;vertical&quot;, direction: &quot;inward&quot;, ), ))  ","version":"0.4.0+","tagName":"h2"},{"title":"Fletcher","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/integration/fletcher","content":"Fletcher Touying provides the touying-reducer, which adds pause and meanwhile animations to Fletcher. An example: #import &quot;@preview/touying:0.4.0&quot;: * #import &quot;@preview/cetz:0.2.2&quot; #import &quot;@preview/fletcher:0.4.4&quot; as fletcher: node, edge // cetz and fletcher bindings for touying #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: fletcher.diagram, cover: fletcher.hide) #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides.with(title-slide: false, outline-slide: false) // cetz animation #slide[ Cetz in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) ] // fletcher animation #slide[ Fletcher in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) ] ","keywords":"","version":"0.4.0+"},{"title":"MiTeX","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/integration/mitex","content":"MiTeX During the process of creating slides, we often already have a LaTeX math equation that we simply want to paste into the slides without transcribing it into a Typst math equation. In such cases, we can use MiTeX. Example: #import &quot;@preview/mitex:0.2.3&quot;: * Write inline equations like #mi(&quot;x&quot;) or #mi[y]. Also block equations (this case is from #text(blue.lighten(20%), link(&quot;https://katex.org/&quot;)[katex.org])): #mitex(` \\newcommand{\\f}[2]{#1f(#2)} \\f\\relax{x} = \\int_{-\\infty}^\\infty \\f\\hat\\xi\\,e^{2 \\pi i \\xi x} \\,d\\xi `) ","keywords":"","version":"0.4.0+"},{"title":"Pinit","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/integration/pinit","content":"","keywords":"","version":"0.4.0+"},{"title":"Simple Example​","type":1,"pageTitle":"Pinit","url":"/touying/docs/0.4.0+/integration/pinit#simple-example","content":" #import &quot;@preview/pinit:0.1.3&quot;: * #set text(size: 24pt) A simple #pin(1)highlighted text#pin(2). #pinit-highlight(1, 2) #pinit-point-from(2)[It is simple.]     Another example:    ","version":"0.4.0+","tagName":"h2"},{"title":"Complex Example​","type":1,"pageTitle":"Pinit","url":"/touying/docs/0.4.0+/integration/pinit#complex-example","content":"   An example of shared usage with Touying:  #import &quot;@preview/touying:0.4.0&quot;: * #import &quot;@preview/pinit:0.1.3&quot;: * #(s.page-args.paper = &quot;presentation-4-3&quot;) #let (init, slides) = utils.methods(s) #show: init #set text(size: 20pt, font: &quot;Calibri&quot;, ligatures: false) #show heading: set text(weight: &quot;regular&quot;) #show heading: set block(above: 1.4em, below: 1em) #show heading.where(level: 1): set text(size: 1.5em) // Useful functions #let crimson = rgb(&quot;#c00000&quot;) #let greybox(..args, body) = rect(fill: luma(95%), stroke: 0.5pt, inset: 0pt, outset: 10pt, ..args, body) #let redbold(body) = { set text(fill: crimson, weight: &quot;bold&quot;) body } #let blueit(body) = { set text(fill: blue) body } #let (slide, empty-slide) = utils.slides(s) #show: slides // Main body #slide(self =&gt; [ #let (uncover, only) = utils.methods(self) = Asymptotic Notation: $O$ Use #pin(&quot;h1&quot;)asymptotic notations#pin(&quot;h2&quot;) to describe asymptotic efficiency of algorithms. (Ignore constant coefficients and lower-order terms.) #pause #greybox[ Given a function $g(n)$, we denote by $O(g(n))$ the following *set of functions*: #redbold(${f(n): &quot;exists&quot; c &gt; 0 &quot;and&quot; n_0 &gt; 0, &quot;such that&quot; f(n) &lt;= c dot g(n) &quot;for all&quot; n &gt;= n_0}$) ] #pinit-highlight(&quot;h1&quot;, &quot;h2&quot;) #pause $f(n) = O(g(n))$: #pin(1)$f(n)$ is *asymptotically smaller* than $g(n)$.#pin(2) // #absolute-place(dx: 550pt, dy: 320pt, image(width: 25%, &quot;asymptotic.png&quot;)) #pause $f(n) redbold(in) O(g(n))$: $f(n)$ is *asymptotically* #redbold[at most] $g(n)$. #only(&quot;4-&quot;, pinit-line(stroke: 3pt + crimson, start-dy: -0.25em, end-dy: -0.25em, 1, 2)) #pause #block[Insertion Sort as an #pin(&quot;r1&quot;)example#pin(&quot;r2&quot;):] - Best Case: $T(n) approx c n + c' n - c''$ #pin(3) - Worst case: $T(n) approx c n + (c' \\/ 2) n^2 - c''$ #pin(4) #pinit-rect(&quot;r1&quot;, &quot;r2&quot;) #pause #pinit-place(3, dx: 15pt, dy: -15pt)[#redbold[$T(n) = O(n)$]] #pinit-place(4, dx: 15pt, dy: -15pt)[#redbold[$T(n) = O(n)$]] #pause #blueit[Q: Is $n^(3) = O(n^2)$#pin(&quot;que&quot;)? How to prove your answer#pin(&quot;ans&quot;)?] #pause #only(&quot;8-&quot;, pinit-point-to(&quot;que&quot;, fill: crimson, redbold[No.])) #only(&quot;8-&quot;, pinit-point-from(&quot;ans&quot;, body-dx: -150pt)[ Show that the equation $(3/2)^n &gt;= c$ \\ has infinitely many solutions for $n$. ]) ])    ","version":"0.4.0+","tagName":"h2"},{"title":"Introduction to Touying","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/intro","content":"","keywords":"","version":"0.4.0+"},{"title":"Why Use Touying​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.4.0+/intro#why-use-touying","content":" Unlike PowerPoint, Touying is not a &quot;what you see is what you get&quot; tool. You can write your slides in a &quot;content and style separation&quot; manner, especially with Typst, which offers a concise yet powerful syntax, better supporting content like code blocks, mathematical formulas, and theorems. Another advantage is that, with templates, writing slides with Touying is much faster than PowerPoint. Therefore, Touying is more suitable for users with a demand for &quot;research writing.&quot;Compared to Markdown Slides, Touying, relying on Typst, has more powerful typesetting control, such as headers, footers, layout, and convenient custom functions. These are capabilities that Markdown struggles to provide, or does not do well. Additionally, Touying offers #pause and #meanwhile markers, providing more convenient dynamic slide capabilities.Compared to Beamer, Touying has faster compilation speed, a more concise syntax, and simpler theme customization capabilities. Touying's compilation speed can be maintained in milliseconds or tens of milliseconds, compared to Beamer's compilation time of seconds or tens of seconds. Touying's syntax is more concise than Beamer, making it easier to change templates and create your own templates. In terms of features, Touying supports most of Beamer's capabilities and provides some convenient features that Beamer lacks.Compared to Polylux, Touying provides an object-oriented programming (OOP) style syntax, allowing the simulation of &quot;global variables&quot; through a global singleton. This makes it easy to write themes. Touying does not rely on counter and locate to implement #pause, resulting in better performance. Touying is a community-driven project (we welcome more people to join), and it does not overly emphasize maintaining API consistency. Instead, it chooses to maintain documentation for multiple versions, providing more novel yet powerful features.  ","version":"0.4.0+","tagName":"h2"},{"title":"About the Name​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.4.0+/intro#about-the-name","content":" &quot;Touying&quot; is derived from the Chinese word &quot;投影&quot; (tóuyǐng), which means &quot;projection&quot; In English, it also conveys the meaning of a &quot;project&quot;. In comparison, the term &quot;beamer&quot; in LaTeX means a projector in German.  ","version":"0.4.0+","tagName":"h2"},{"title":"About the Documentation​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.4.0+/intro#about-the-documentation","content":" This documentation is powered by Docusaurus. We will maintain English and Chinese versions of the documentation for Touying, and for each major version, we will maintain a documentation copy. This allows you to easily refer to old versions of the Touying documentation and migrate to new versions.  Docusaurus creates a new version:  npm run docusaurus docs:version 0.y.x   ","version":"0.4.0+","tagName":"h2"},{"title":"Contribution​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.4.0+/intro#contribution","content":" Touying is free, open-source, and community-driven. If you're interested, you can visit GitHub anytime and raise issues or submit pull requests. We also welcome you to join the touying-typ organization.  ","version":"0.4.0+","tagName":"h2"},{"title":"License​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.4.0+/intro#license","content":" Touying is released under the MIT license. ","version":"0.4.0+","tagName":"h2"},{"title":"Multi-File Architecture","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/multi-file","content":"","keywords":"","version":"0.4.0+"},{"title":"Configuration and Content Separation​","type":1,"pageTitle":"Multi-File Architecture","url":"/touying/docs/0.4.0+/multi-file#configuration-and-content-separation","content":" A simple Touying multi-file architecture consists of three files: a global configuration file globals.typ, a main entry file main.typ, and a content file content.typ for storing the actual content.  These three files are separated to allow both main.typ and content.typ to import globals.typ without causing circular references.  globals.typ can be used to store some global custom functions and initialize Touying themes:  // globals.typ #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.numbering)(self: s, section: &quot;1.&quot;, &quot;1.1&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #let (slide, empty-slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) // as well as some utility functions   main.typ, as the main entry point of the project, applies show rules by importing globals.typ and includes content.typ using #include:  // main.typ #import &quot;/globals.typ&quot;: * #show: init #show strong: alert #show: slides #include &quot;content.typ&quot;   content.typ is where you write the actual content:  // content.typ #import &quot;/globals.typ&quot;: * = The Section == Slide Title Hello, Touying! #focus-slide[ Focus on me. ]   ","version":"0.4.0+","tagName":"h2"},{"title":"Multiple Sections​","type":1,"pageTitle":"Multi-File Architecture","url":"/touying/docs/0.4.0+/multi-file#multiple-sections","content":" Implementing multiple sections is also straightforward. You only need to create a sections directory and move the content.typ file to the sections.typ directory, for example:  // main.typ #import &quot;/globals.typ&quot;: * #show: init #show strong: alert #show: slides #include &quot;sections/content.typ&quot; // #include &quot;sections/another-section.typ&quot;   And  // sections/content.typ #import &quot;/globals.typ&quot;: * = The Section == Slide Title Hello, Touying! #focus-slide[ Focus on me. ]   Now, you have learned how to use Touying to achieve a multi-file architecture for large-scale slides. ","version":"0.4.0+","tagName":"h2"},{"title":"Touying Counters","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/progress/counters","content":"","keywords":"","version":"0.4.0+"},{"title":"Slide Counter​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/0.4.0+/progress/counters#slide-counter","content":" You can access the slide counter using states.slide-counter and display the current slide number with states.slide-counter.display().  ","version":"0.4.0+","tagName":"h2"},{"title":"Last-Slide Counter​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/0.4.0+/progress/counters#last-slide-counter","content":" In some cases, we may need to add an appendix to slides, leading to the requirement to freeze the last-slide counter. Therefore, a second counter is maintained here.  You can use states.last-slide-number to display the number of the last slide before the appendix.  ","version":"0.4.0+","tagName":"h2"},{"title":"Progress​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/0.4.0+/progress/counters#progress","content":" You can use  #states.touying-progress(ratio =&gt; ..)   to show the current progress.  ","version":"0.4.0+","tagName":"h2"},{"title":"Appendix​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/0.4.0+/progress/counters#appendix","content":" You can use  // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide, empty-slide) = utils.methods(s) #slide[ appendix ]   syntax to enter the appendix.  Additionally, #let s = (s.methods.appendix-in-outline)(self: s, false) can be used to hide the appendix section from the outline. ","version":"0.4.0+","tagName":"h2"},{"title":"Touying Sections","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/progress/sections","content":"","keywords":"","version":"0.4.0+"},{"title":"touying-outline​","type":1,"pageTitle":"Touying Sections","url":"/touying/docs/0.4.0+/progress/sections#touying-outline","content":" #touying-outline(enum-args: (:), padding: 0pt) is used to display a simple outline.  ","version":"0.4.0+","tagName":"h2"},{"title":"touying-final-sections​","type":1,"pageTitle":"Touying Sections","url":"/touying/docs/0.4.0+/progress/sections#touying-final-sections","content":" #states.touying-final-sections(final-sections =&gt; ..) is used to customize the display of the outline.  ","version":"0.4.0+","tagName":"h2"},{"title":"touying-progress-with-sections​","type":1,"pageTitle":"Touying Sections","url":"/touying/docs/0.4.0+/progress/sections#touying-progress-with-sections","content":" #states.touying-progress-with-sections((current-sections: .., final-sections: .., current-slide-number: .., last-slide-number: ..) =&gt; ..)   This is the most powerful one, allowing you to build any complex progress display with its functionalities. ","version":"0.4.0+","tagName":"h2"},{"title":"Sections and Subsections","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/sections","content":"","keywords":"","version":"0.4.0+"},{"title":"Structure​","type":1,"pageTitle":"Sections and Subsections","url":"/touying/docs/0.4.0+/sections#structure","content":" Similar to Beamer, Touying also has the concept of sections and subsections.  Generally, level 1, level 2, and level 3 headings correspond to section, subsection, and title, respectively, as in the dewdrop theme.  #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.dewdrop.register() #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Section == Subsection === Title Hello, Touying!     However, often we don't need subsections, and we can use level 1 and level 2 headings to correspond to section and title, as in the university theme.  #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.university.register() #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Section == Title Hello, Touying!     In fact, we can control this behavior through the slide-level parameter of the slides function. slide-level represents the complexity of the nested structure, starting from 0. For example, #show: slides.with(slide-level: 2) is equivalent to the section, subsection, and title structure; while #show: slides.with(slide-level: 1) is equivalent to the section and title structure.  ","version":"0.4.0+","tagName":"h2"},{"title":"Numbering​","type":1,"pageTitle":"Sections and Subsections","url":"/touying/docs/0.4.0+/sections#numbering","content":" To add numbering to sections and subsections, we simply use:  #let s = (s.methods.numbering)(self: s, section: &quot;1.&quot;, &quot;1.1&quot;)   This sets the default numbering to 1.1, with the section corresponding to 1..  ","version":"0.4.0+","tagName":"h2"},{"title":"Table of Contents​","type":1,"pageTitle":"Sections and Subsections","url":"/touying/docs/0.4.0+/sections#table-of-contents","content":" Displaying a table of contents in Touying is straightforward:  #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.simple.register() #let (init, slides, alert, touying-outline) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides.with(slide-level: 2) = Section == Subsection === Title ==== Table of contents #touying-outline()     Where the definition of touying-outline() is:  #let touying-outline(enum-args: (:), padding: 0pt) = { .. }   You can modify the parameters of the internal enum through enum-args.  If you have complex custom requirements for the table of contents, you can use:  #states.touying-final-sections(sections =&gt; ..)   As done in the dewdrop theme. ","version":"0.4.0+","tagName":"h2"},{"title":"Page Layout","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/layout","content":"","keywords":"","version":"0.4.0+"},{"title":"Basic Concepts​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/0.4.0+/layout#basic-concepts","content":" To create stylish slides using Typst, it's essential to understand Typst's page model correctly. If you're not concerned with customizing page styles, you can choose to skip this section. However, it's still recommended to go through it.  Let's illustrate Typst's default page model through a specific example.  #let container = rect.with(height: 100%, width: 100%, inset: 0pt) #let innerbox = rect.with(stroke: (dash: &quot;dashed&quot;)) #set text(size: 30pt) #set page( paper: &quot;presentation-16-9&quot;, header: container[#innerbox[Header]], header-ascent: 30%, footer: container[#innerbox[Footer]], footer-descent: 30%, ) #place(top + right)[Margin→] #container[ #container[ #innerbox[Content] ] ]     We need to distinguish the following concepts:  Model: Typst has a model similar to the CSS Box Model, divided into Margin, Padding, and Content. However, padding is not a property of set page(..) but is obtained by manually adding #pad(..).Margin: Margins are the edges of the page, divided into top, bottom, left, and right. They are the core of Typst's page model, and all other properties are influenced by margins, especially Header and Footer. Header and Footer are actually located within the Margin.Header: The Header is the content at the top of the page, divided into container and innerbox. We can observe that the edge of the header container and padding does not align but has some space in between, which is actually header-ascent: 30%, where the percentage is relative to the margin-top. Additionally, we notice that the header innerbox is actually located at the bottom left corner of the header container, meaning innerbox defaults to #set align(left + bottom).Footer: The Footer is the content at the bottom of the page, similar to the Header but in the opposite direction.Place: The place function enables absolute positioning relative to the parent container without affecting other elements inside the parent container. It allows specifying alignment, dx, and dy, making it suitable for placing decorative elements like logos.  Therefore, to apply Typst to create slides, we only need to set:  #set page( margin: (x: 4em, y: 2em), header: align(top)[Header], footer: align(bottom)[Footer], header-ascent: 0em, footer-descent: 0em, )   However, we still need to address how the header occupies the entire page width. Here, we use negative padding to achieve this. For instance:  #let container = rect.with(stroke: (dash: &quot;dashed&quot;), height: 100%, width: 100%, inset: 0pt) #let innerbox = rect.with(fill: rgb(&quot;#d0d0d0&quot;)) #let margin = (x: 4em, y: 2em) // negative padding for header and footer #let negative-padding = pad.with(x: -margin.x, y: 0em) #set text(size: 30pt) #set page( paper: &quot;presentation-16-9&quot;, margin: margin, header: negative-padding[#container[#align(top)[#innerbox(width: 100%)[Header]]]], header-ascent: 0em, footer: negative-padding[#container[#align(bottom)[#innerbox(width: 100%)[Footer]]]], footer-descent: 0em, ) #place(top + right)[↑Margin→] #container[ #container[ #innerbox[Content] ] ]     ","version":"0.4.0+","tagName":"h2"},{"title":"Page Management​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/0.4.0+/layout#page-management","content":" Since modifying page parameters using the set page(..) command in Typst creates a new page instead of modifying the current one, Touying chooses to maintain a s.page-args member variable and a s.padding member variable. These parameters are only applied when Touying creates a new slide, so users only need to focus on s.page-args and s.padding.  For example, the previous example can be modified as follows:  #(s.page-args += ( margin: (x: 4em, y: 2em), header: align(top)[Header], footer: align(bottom)[Footer], header-ascent: 0em, footer-descent: 0em, ))   Touying automatically detects the value of margin.x and adds negative padding to the header if self.full-header == true.  Similarly, if you're unsatisfied with the header or footer style of a particular theme, you can change it using:  #(s.page-args.footer = [Custom Footer])   However, it's essential to note that if you change page parameters in this way, you need to place it before #let (slide, empty-slide) = utils.slides(s), or you'll have to call #let (slide, empty-slide) = utils.slides(s) again.  Warning Therefore, you should not use the set page(..) command directly but instead modify the s.page-args member variable internally.  This approach also allows us to query the current page parameters in real-time using s.page-args, which is useful for functions that need to obtain margins or the current page's background color, such as transparent-cover. This is partially equivalent to context get rule and is actually more convenient to use.  ","version":"0.4.0+","tagName":"h2"},{"title":"Application: Adding a Logo​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/0.4.0+/layout#application-adding-a-logo","content":" Adding a logo to slides is a very common but also a very versatile requirement. The difficulty lies in the fact that the required size and position of the logo often vary from person to person. Therefore, most of Touying's themes do not include configuration options for logos. But with the concepts of page layout mentioned in this section, we know that we can use the place function in the header or footer to place a logo image.  For example, suppose we decide to add the GitHub icon to the metropolis theme. We can implement it like this:  #import &quot;@preview/touying:0.4.0&quot;: * #import &quot;@preview/octique:0.1.0&quot;: * #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;) #(s.page-args.header = self =&gt; { // display the original header utils.call-or-display(self, s.page-args.header) // place logo at the top-right place(top + right, dx: -0.5em, dy: 0.3em)[ #octique(&quot;mark-github&quot;, color: rgb(&quot;#fafafa&quot;), width: 1.5em, height: 1.5em) ] }) #let (init, slide) = utils.methods(s) #show: init #slide(title: [Title])[ Logo example. ]     Here, utils.call-or-display(self, body) can be used to display body as content or a callback function in the form self =&gt; content.  ","version":"0.4.0+","tagName":"h2"},{"title":"Page Columns​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/0.4.0+/layout#page-columns","content":" If you need to divide the page into two or three columns, you can use the compose feature provided by the default slide function in Touying. The simplest example is as follows:  #slide[ First column. ][ Second column. ]     If you need to change the way columns are composed, you can modify the composer parameter of slide. The default parameter is utils.side-by-side.with(columns: auto, gutter: 1em). If we want the left column to occupy the remaining width, we can use  #slide(composer: (1fr, auto))[ First column. ][ Second column. ]    ","version":"0.4.0+","tagName":"h2"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/start","content":"","keywords":"","version":"0.4.0+"},{"title":"More Complex Examples​","type":1,"pageTitle":"Getting Started","url":"/touying/docs/0.4.0+/start#more-complex-examples","content":" In fact, Touying provides various styles for slide writing. You can also use the #slide[..] syntax to access more powerful features provided by Touying.    Touying offers many built-in themes to easily create beautiful slides. For example, in this case:  #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;)   you can use the university theme. For more detailed tutorials on themes, you can refer to the following sections.  #import &quot;@preview/touying:0.4.0&quot;: * #import &quot;@preview/cetz:0.2.2&quot; #import &quot;@preview/fletcher:0.4.4&quot; as fletcher: node, edge #import &quot;@preview/ctheorems:1.1.2&quot;: * // cetz and fletcher bindings for touying #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: fletcher.diagram, cover: fletcher.hide) // Register university theme // You can replace it with other themes and it can still work normally #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) // Set the numbering of section and subsection #let s = (s.methods.numbering)(self: s, section: &quot;1.&quot;, &quot;1.1&quot;) // Global information configuration #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) // Pdfpc configuration // typst query --root . ./example.typ --field value --one &quot;&lt;pdfpc-file&gt;&quot; &gt; ./example.pdfpc #let s = (s.methods.append-preamble)(self: s, pdfpc.config( duration-minutes: 30, start-time: datetime(hour: 14, minute: 10, second: 0), end-time: datetime(hour: 14, minute: 40, second: 0), last-minutes: 5, note-font-size: 12, disable-markdown: false, default-transition: ( type: &quot;push&quot;, duration-seconds: 2, angle: ltr, alignment: &quot;vertical&quot;, direction: &quot;inward&quot;, ), )) // Theorems configuration by ctheorems #show: thmrules.with(qed-symbol: $square$) #let theorem = thmbox(&quot;theorem&quot;, &quot;Theorem&quot;, fill: rgb(&quot;#eeffee&quot;)) #let corollary = thmplain( &quot;corollary&quot;, &quot;Corollary&quot;, base: &quot;theorem&quot;, titlefmt: strong ) #let definition = thmbox(&quot;definition&quot;, &quot;Definition&quot;, inset: (x: 1.2em, top: 1em)) #let example = thmplain(&quot;example&quot;, &quot;Example&quot;).with(numbering: none) #let proof = thmproof(&quot;proof&quot;, &quot;Proof&quot;) // Extract methods #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert // Extract slide functions #let (slide, empty-slide) = utils.slides(s) #show: slides = Animation == Simple Animation We can use `#pause` to #pause display something later. #pause Just like this. #meanwhile Meanwhile, #pause we can also use `#meanwhile` to #pause display other content synchronously. == Complex Animation #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) At subslide #self.subslide, we can use #uncover(&quot;2-&quot;)[`#uncover` function] for reserving space, use #only(&quot;2-&quot;)[`#only` function] for not reserving space, #alternatives[call `#only` multiple times \\u{2717}][use `#alternatives` function #sym.checkmark] for choosing one of the alternatives. ]) == Math Equation Animation Touying equation with `pause`: #touying-equation(` f(x) &amp;= pause x^2 + 2x + 1 \\ &amp;= pause (x + 1)^2 \\ `) #meanwhile Here, #pause we have the expression of $f(x)$. #pause By factorizing, we can obtain this result. == CeTZ Animation CeTZ Animation in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) == Fletcher Animation Fletcher Animation in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) = Theorems == Prime numbers #definition[ A natural number is called a #highlight[_prime number_] if it is greater than 1 and cannot be written as the product of two smaller natural numbers. ] #example[ The numbers $2$, $3$, and $17$ are prime. @cor_largest_prime shows that this list is not exhaustive! ] #theorem(&quot;Euclid&quot;)[ There are infinitely many primes. ] #proof[ Suppose to the contrary that $p_1, p_2, dots, p_n$ is a finite enumeration of all primes. Set $P = p_1 p_2 dots p_n$. Since $P + 1$ is not in our list, it cannot be prime. Thus, some prime factor $p_j$ divides $P + 1$. Since $p_j$ also divides $P$, it must divide the difference $(P + 1) - P = 1$, a contradiction. ] #corollary[ There is no largest prime number. ] &lt;cor_largest_prime&gt; #corollary[ There are infinitely many composite numbers. ] #theorem[ There are arbitrarily long stretches of composite numbers. ] #proof[ For any $n &gt; 2$, consider $ n! + 2, quad n! + 3, quad ..., quad n! + n #qedhere $ ] = Others == Side-by-side #slide(composer: (1fr, 1fr))[ First column. ][ Second column. ] == Multiple Pages #lorem(200) // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide, empty-slide) = utils.slides(s) == Appendix #slide[ Please pay attention to the current slide number. ]     Touying offers many built-in themes to easily create beautiful slides. For example, in this case:  #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;)   you can use the university theme. For more detailed tutorials on themes, you can refer to the following sections. ","version":"0.4.0+","tagName":"h2"},{"title":"Aqua Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/themes/aqua","content":"","keywords":"","version":"0.4.0+"},{"title":"Initialization​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/0.4.0+/themes/aqua#initialization","content":" You can initialize it with the following code:  #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.aqua.register(aspect-ratio: &quot;16-9&quot;, lang: &quot;en&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, outline-slide, focus-slide) = utils.slides(s) #show: slides   Where register takes parameters:  aspect-ratio: The aspect ratio of slides, either &quot;16-9&quot; or &quot;4-3&quot;, default is &quot;16-9&quot;.footer: Content shown on the right side of the footer, default is states.slide-counter.display().lang: Language configuration, currently supports &quot;en&quot; and &quot;zh&quot;, default is &quot;en&quot;.  Aqua theme also provides an #alert[..] function, which you can utilize with #show strong: alert using *alert text* syntax.  ","version":"0.4.0+","tagName":"h2"},{"title":"Color Themes​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/0.4.0+/themes/aqua#color-themes","content":" Aqua by default uses:  #let s = (s.methods.colors)( self: s, primary: rgb(&quot;#003F88&quot;), primary-light: rgb(&quot;#2159A5&quot;), primary-lightest: rgb(&quot;#F2F4F8&quot;),   color themes, which you can modify by #let s = (s.methods.colors)(self: s, ..).  ","version":"0.4.0+","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/0.4.0+/themes/aqua#slide-function-family","content":" Aqua theme offers a series of custom slide functions:  #title-slide(..args)   title-slide will read information from self.info for display.    #let outline-slide(self: none, enum-args: (:), leading: 50pt)   Display an outline slide.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // Aqua theme title: auto, )[ ... ]   A default ordinary slide function with title and footer, where title defaults to the current section title.    #focus-slide[ ... ]   Used to draw the audience's attention. The background color is self.colors.primary.    #new-section-slide(title)   Start a new section with the given title.  ","version":"0.4.0+","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/0.4.0+/themes/aqua#slides-function","content":" The slides function has parameters:  title-slide: Default is true.outline-slide: Default is true.slide-level: Default is 1.  They can be set via #show: slides.with(..).  PS: The outline title can be modified via #(s.outline-title = [Outline]).  Additionally, you can disable the automatic inclusion of new-section-slide functionality by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.aqua.register(aspect-ratio: &quot;16-9&quot;, lang: &quot;en&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, outline-slide, focus-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.4.0+","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/0.4.0+/themes/aqua#example","content":" #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.aqua.register(aspect-ratio: &quot;16-9&quot;, lang: &quot;en&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, outline-slide, focus-slide) = utils.slides(s) #show: slides = The Section == Slide Title #slide[ #lorem(40) ] #focus-slide[ Another variant with primary color in background... ] == Summary #align(center + horizon)[ #set text(size: 3em, weight: &quot;bold&quot;, s.colors.primary) THANKS FOR ALL ]  ","version":"0.4.0+","tagName":"h2"},{"title":"Metropolis Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/themes/metropolis","content":"","keywords":"","version":"0.4.0+"},{"title":"Initialization​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.4.0+/themes/metropolis#initialization","content":" You can initialize it using the following code:  #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides   The register function takes the following parameters:  aspect-ratio: The aspect ratio of the slides, either &quot;16-9&quot; or &quot;4-3,&quot; defaulting to &quot;16-9.&quot;header: Content displayed in the header, defaulting to states.current-section-title, or it can be passed as a function like self =&gt; self.info.title.footer: Content displayed in the footer, defaulting to [], or it can be passed as a function like self =&gt; self.info.author.footer-right: Content displayed on the right side of the footer, defaulting to states.slide-counter.display() + &quot; / &quot; + states.last-slide-number.footer-progress: Whether to show the progress bar at the bottom of the slide, defaulting to true.  The Metropolis theme also provides an #alert[..] function, which you can use with #show strong: alert using the *alert text* syntax.  ","version":"0.4.0+","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.4.0+/themes/metropolis#color-theme","content":" Metropolis uses the following default color theme:  #let s = (s.methods.colors)( self: s, neutral-lightest: rgb(&quot;#fafafa&quot;), primary-dark: rgb(&quot;#23373b&quot;), secondary-light: rgb(&quot;#eb811b&quot;), secondary-lighter: rgb(&quot;#d6c6b7&quot;), )   You can modify this color theme using #let s = (s.methods.colors)(self: s, ..).  ","version":"0.4.0+","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.4.0+/themes/metropolis#slide-function-family","content":" The Metropolis theme provides a variety of custom slide functions:  #title-slide(extra: none, ..args)   title-slide reads information from self.info for display, and you can also pass in an extra parameter to display additional information.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // metropolis theme title: auto, footer: auto, align: horizon, )[ ... ]   A default slide with headers and footers, where the title defaults to the current section title, and the footer is what you set.    #focus-slide[ ... ]   Used to draw attention, with the background color set to self.colors.primary-dark.    #new-section-slide(short-title: auto, title)   Creates a new section with the given title.  ","version":"0.4.0+","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.4.0+/themes/metropolis#slides-function","content":" The slides function has the following parameters:  title-slide: Defaults to true.outline-slide: Defaults to true.slide-level: Defaults to 1.  You can set these using #show: slides.with(..).  PS: You can modify the outline title using #(s.outline-title = [Outline]).  And the function of automatically adding new-section-slide can be turned off by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slide, slides, title-slide, new-section-slide, focus-slide, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.4.0+","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.4.0+/themes/metropolis#example","content":" #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #set text(font: &quot;Fira Sans&quot;, weight: &quot;light&quot;, size: 20pt) #show math.equation: set text(font: &quot;Fira Math&quot;) #set strong(delta: 100) #set par(justify: true) #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides = First Section #slide[ A slide without a title but with some *important* information. ] == A long long long long long long long long long long long long long long long long long long long long long long long long Title #slide[ A slide with equation: $ x_(n+1) = (x_n + a/x_n) / 2 $ #lorem(200) ] = Second Section #focus-slide[ Wake up! ] == Simple Animation #slide[ A simple #pause dynamic slide with #alert[alert] #pause text. ] // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide, empty-slide) = utils.slides(s) = Appendix #slide[ Appendix. ]  ","version":"0.4.0+","tagName":"h2"},{"title":"Dewdrop Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/themes/dewdrop","content":"","keywords":"","version":"0.4.0+"},{"title":"Initialization​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.4.0+/themes/dewdrop#initialization","content":" You can initialize it using the following code:  #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.dewdrop.register( aspect-ratio: &quot;16-9&quot;, footer: [Dewdrop], navigation: &quot;mini-slides&quot;, // navigation: &quot;sidebar&quot;, // navigation: none, ) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides   The register function takes the following parameters:  aspect-ratio: The aspect ratio of the slides, either &quot;16-9&quot; or &quot;4-3,&quot; defaulting to &quot;16-9.&quot;navigation: The navigation bar style, which can be &quot;sidebar&quot;, &quot;mini-slides&quot;, or none, defaulting to &quot;sidebar&quot;.sidebar: Sidebar navigation settings, defaulting to (width: 10em).mini-slides: Mini-slides settings, defaulting to (height: 2em, x: 2em, section: false, subsection: true). height: The height of mini-slides, defaulting to 2em.x: Padding on the x-axis for mini-slides, defaulting to 2em.section: Whether to display slides after the section and before the subsection, defaulting to false.subsection: Whether to split mini-slides based on subsections or compress them into one line, defaulting to true. footer: Content displayed in the footer, defaulting to [], or it can be passed as a function like self =&gt; self.info.author.footer-right: Content displayed on the right side of the footer, defaulting to states.slide-counter.display() + &quot; / &quot; + states.last-slide-number.primary: Primary color, defaulting to rgb(&quot;#0c4842&quot;).alpha: Transparency, defaulting to 70%.  The Dewdrop theme also provides an #alert[..] function, which you can use with #show strong: alert using the *alert text* syntax.  ","version":"0.4.0+","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.4.0+/themes/dewdrop#color-theme","content":" Dewdrop uses the following default color theme:  #let s = (s.methods.colors)( self: s, neutral-darkest: rgb(&quot;#000000&quot;), neutral-dark: rgb(&quot;#202020&quot;), neutral-light: rgb(&quot;#f3f3f3&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), primary: primary, )   You can modify this color theme using #let s = (s.methods.colors)(self: s, ..).  ","version":"0.4.0+","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.4.0+/themes/dewdrop#slide-function-family","content":" The Dewdrop theme provides a variety of custom slide functions:  #title-slide(extra: none, ..args)   title-slide reads information from self.info for display, and you can also pass in an extra parameter to display additional information.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // Dewdrop theme footer: auto, )[ ... ]   A default slide with navigation and footer, where the footer is what you set.    #focus-slide[ ... ]   Used to draw attention, with the background color set to self.colors.primary.  ","version":"0.4.0+","tagName":"h2"},{"title":"Special Functions​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.4.0+/themes/dewdrop#special-functions","content":" #d-outline(enum-args: (:), list-args: (:), cover: true)   Displays the current table of contents. The cover parameter specifies whether to hide sections in an inactive state.    #d-sidebar()   An internal function used to display the sidebar.    #d-mini-slides()   An internal function used to display mini-slides.  ","version":"0.4.0+","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.4.0+/themes/dewdrop#slides-function","content":" The slides function has the following parameters:  title-slide: Defaults to true.outline-slide: Defaults to true.slide-level: Defaults to 2.  You can set these using #show: slides.with(..).  PS: You can modify the outline title using #(s.outline-title = [Outline]).  And the function of automatically adding new-section-slide can be turned off by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.dewdrop.register(aspect-ratio: &quot;16-9&quot;, footer: [Dewdrop]) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.4.0+","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.4.0+/themes/dewdrop#example","content":" #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.dewdrop.register( aspect-ratio: &quot;16-9&quot;, footer: [Dewdrop], navigation: &quot;mini-slides&quot;, // navigation: none, ) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides = Section A == Subsection A.1 #slide[ A slide with equation: $ x_(n+1) = (x_n + a/x_n) / 2 $ ] == Subsection A.2 #slide[ A slide without a title but with *important* infos ] = Section B == Subsection B.1 #slide[ #lorem(80) ] #focus-slide[ Wake up! ] == Subsection B.2 #slide[ We can use `#pause` to #pause display something later. #pause Just like this. #meanwhile Meanwhile, #pause we can also use `#meanwhile` to #pause display other content synchronously. ] // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide, empty-slide) = utils.slides(s) = Appendix === Appendix #slide[ Please pay attention to the current slide number. ]  ","version":"0.4.0+","tagName":"h2"},{"title":"Simple Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/themes/simple","content":"","keywords":"","version":"0.4.0+"},{"title":"Initialization​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/0.4.0+/themes/simple#initialization","content":" You can initialize it using the following code:  #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;, footer: [Simple slides]) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide, title-slide, centered-slide, focus-slide) = utils.slides(s) #show: slides   The register function takes the following parameters:  aspect-ratio: The aspect ratio of the slides, either &quot;16-9&quot; or &quot;4-3,&quot; defaulting to &quot;16-9.&quot;footer: Content displayed in the footer, defaulting to [], or it can be passed as a function like self =&gt; self.info.author.footer-right: Content displayed on the right side of the footer, defaulting to states.slide-counter.display() + &quot; / &quot; + states.last-slide-number.background: Background color, defaulting to white.foreground: Text color, defaulting to black.primary: Theme color, defaulting to aqua.darken(50%).  ","version":"0.4.0+","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/0.4.0+/themes/simple#slide-function-family","content":" The Simple theme provides a variety of custom slide functions:  #centered-slide(section: ..)[ ... ]   A slide with content centered, and the section parameter can be used to create a new section.    #title-slide[ ... ]   Similar to centered-slide, this is provided for consistency with Polylux syntax.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // simple theme args footer: auto, )[ ... ]   A default slide with headers and footers, where the header corresponds to the current section, and the footer is what you set.    #focus-slide(foreground: ..., background: ...)[ ... ]   Used to draw attention, it optionally accepts a foreground color (defaulting to white) and a background color (defaulting to auto, i.e., self.colors.primary).  ","version":"0.4.0+","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/0.4.0+/themes/simple#slides-function","content":" The slides function has the following parameter:  slide-level: Defaults to 1.  You can set it using #show: slides.with(..).  And the function of automatically adding new-section-slide can be turned off by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;, footer: [Simple slides]) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide, title-slide, centered-slide, focus-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.4.0+","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/0.4.0+/themes/simple#example","content":" #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;, footer: [Simple slides]) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide, title-slide, centered-slide, focus-slide) = utils.slides(s) #show: slides #title-slide[ = Keep it simple! #v(2em) Alpha #footnote[Uni Augsburg] #h(1em) Bravo #footnote[Uni Bayreuth] #h(1em) Charlie #footnote[Uni Chemnitz] #h(1em) July 23 ] == First slide #slide[ #lorem(20) ] #focus-slide[ _Focus!_ This is very important. ] = Let's start a new section! == Dynamic slide #slide[ Did you know that... #pause ...you can see the current section at the top of the slide? ]  ","version":"0.4.0+","tagName":"h2"},{"title":"University Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/themes/university","content":"","keywords":"","version":"0.4.0+"},{"title":"Initialization​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.4.0+/themes/university#initialization","content":" You can initialize the University theme using the following code:  #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) #show: slides   The register function accepts the following parameters:  aspect-ratio: Sets the aspect ratio of the slides to &quot;16-9&quot; or &quot;4-3,&quot; with the default being &quot;16-9.&quot;progress-bar: Controls whether the progress bar at the top of each slide is displayed, with the default being true.display-current-section: Whether to display the current section.footer-columns: The width of the footer in the bottom three columns, the default is (25%, 1fr, 25%).footer-a: The first column, default is self =&gt; self.info.author.footer-b: Second column, default is self =&gt; if self.info.short-title == auto { self.info.title } else { self.info.short-title }.footer-c: third column, default is  self =&gt; { h(1fr) utils.info-date(self) h(1fr) states.slide-counter.display() + &quot; / &quot; + states.last-slide-number h(1fr) }   Additionally, the University theme provides an #alert[..] function, which you can use with the #show strong: alert syntax for emphasizing text with *alert text*.  ","version":"0.4.0+","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.4.0+/themes/university#color-theme","content":" The University theme defaults to the following color theme:  #let s = (s.methods.colors)( self: s, primary: rgb(&quot;#04364A&quot;), secondary: rgb(&quot;#176B87&quot;), tertiary: rgb(&quot;#448C95&quot;), )   You can modify this color theme using #let s = (s.methods.colors)(self: s, ..).  ","version":"0.4.0+","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.4.0+/themes/university#slide-function-family","content":" The University theme provides a series of custom slide functions:  ","version":"0.4.0+","tagName":"h2"},{"title":"Title Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.4.0+/themes/university#title-slide","content":" #title-slide(logo: none, authors: none, ..args)   The title-slide function reads information from self.info for display. You can also pass the logo parameter and an array-type authors parameter.  ","version":"0.4.0+","tagName":"h3"},{"title":"Regular Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.4.0+/themes/university#regular-slide","content":" #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // university theme title: none, subtitle: none, header: none, footer: auto, )[ ... ]   The default slide function with a title and footer. The title defaults to the current section title, and the footer is set as per your configuration.  ","version":"0.4.0+","tagName":"h3"},{"title":"Focus Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.4.0+/themes/university#focus-slide","content":" #focus-slide(background-img: ..., background-color: ...)[ ... ]   Used to capture the audience's attention. The default background color is self.colors.primary.  ","version":"0.4.0+","tagName":"h3"},{"title":"Matrix Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.4.0+/themes/university#matrix-slide","content":" #matrix-slide(columns: ..., rows: ...)[ ... ][ ... ]   Refer to the documentation.  ","version":"0.4.0+","tagName":"h3"},{"title":"slides Function​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.4.0+/themes/university#slides-function","content":" The slides function has parameters:  title-slide: Defaults to true.slide-level: Defaults to 1.  You can set these parameters using #show: slides.with(..).  And the function of automatically adding new-section-slide can be turned off by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.4.0+","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.4.0+/themes/university#example","content":" #import &quot;@preview/touying:0.4.0&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) #show: slides.with(title-slide: false) #title-slide(authors: ([Author A], [Author B])) = The Section == Slide Title #slide[ #lorem(40) ] #slide(subtitle: emph[What is the problem?])[ #lorem(40) ] #focus-slide[ Another variant with primary color in background... ] #matrix-slide[ left ][ middle ][ right ] #matrix-slide(columns: 1)[ top ][ bottom ] #matrix-slide(columns: (1fr, 2fr, 1fr), ..(lorem(8),) * 9)  ","version":"0.4.0+","tagName":"h2"},{"title":"Fit to Height / Width","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/utilities/fit-to","content":"","keywords":"","version":"0.4.0+"},{"title":"Fit to Height​","type":1,"pageTitle":"Fit to Height / Width","url":"/touying/docs/0.4.0+/utilities/fit-to#fit-to-height","content":" If you need to make an image fill the remaining slide height, you can try the fit-to-height function:  #utils.fit-to-height(1fr)[BIG]   Function definition:  #let fit-to-height( width: none, prescale-width: none, grow: true, shrink: true, height, body ) = { .. }   Parameters:  width: If specified, this will determine the width of the content after scaling. So, if you want the scaled content to fill half of the slide width, you can use width: 50%.prescale-width: This parameter allows you to make Typst's layout assume that the given content is to be laid out in a container of a certain width before scaling. For example, you can use prescale-width: 200% assuming the slide's width is twice the original.grow: Whether it can grow, default is true.shrink: Whether it can shrink, default is true.height: The specified height.body: The specific content.  ","version":"0.4.0+","tagName":"h2"},{"title":"Fit to Width​","type":1,"pageTitle":"Fit to Height / Width","url":"/touying/docs/0.4.0+/utilities/fit-to#fit-to-width","content":" If you need to limit the title width to exactly fill the slide width, you can try the fit-to-width function:  #utils.fit-to-width(1fr)[#lorem(20)]   Function definition:  #let fit-to-width(grow: true, shrink: true, width, body) = { .. }   Parameters:  grow: Whether it can grow, default is true.shrink: Whether it can shrink, default is true.width: The specified width.body: The specific content. ","version":"0.4.0+","tagName":"h2"},{"title":"Object-Oriented Programming","type":0,"sectionRef":"#","url":"/touying/docs/0.4.0+/utilities/oop","content":"Object-Oriented Programming Touying provides some convenient utility functions for object-oriented programming. #let call-or-display(self, it) = { if type(it) == function { return it(self) } else { return it } } Call or display as-is. #let methods(self) = { .. } Used to bind self to methods and return, very commonly used.","keywords":"","version":"0.4.0+"},{"title":"Changelog","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/changelog","content":"","keywords":"","version":"0.4.1"},{"title":"v0.4.1​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.1/changelog#v041","content":" ","version":"0.4.1","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.1/changelog#features","content":" feat: support builtin outline and bookmarkfeat: support speaker note for dual-screenfeat: add touying-mitex functionfeat: touying offers a gallery page via wiki  ","version":"0.4.1","tagName":"h3"},{"title":"Fixes​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.1/changelog#fixes","content":" fix: add outline-slide for dewdrop themefix: fix regression of default value &quot;auto&quot; for repeat  ","version":"0.4.1","tagName":"h3"},{"title":"Miscellaneous Improvements​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.1/changelog#miscellaneous-improvements","content":" feat: add list support for touying-outline functionfeat: add auto-reset-footnotefeat: add freeze-in-empty-page for better page counterfeat: add ..args for register method to capture unused arguments  ","version":"0.4.1","tagName":"h3"},{"title":"v0.4.0​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.1/changelog#v040","content":" ","version":"0.4.1","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.1/changelog#features-1","content":" feat: support #footnote[] for all themes.feat: access subslide and repeat in footer and header by self =&gt; self.subslide.feat: support numbered theorem environments by ctheorems.feat: support numbering for sections and subsections.  ","version":"0.4.1","tagName":"h3"},{"title":"Fixes​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.1/changelog#fixes-1","content":" fix: make nested includes work correctly.fix: disable multi-page slides from creating the same section multiple times.  ","version":"0.4.1","tagName":"h3"},{"title":"Breaking changes​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.1/changelog#breaking-changes","content":" refactor: remove self.padding and add self.full-header self.full-footer config.  ","version":"0.4.1","tagName":"h2"},{"title":"v0.3.3​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.1/changelog#v033","content":" template: move template to touying-aqua package, make Touying searchable in Typst Universe Packagesthemes: fix bugs in university and dewdrop themefeat: make set-show rule work without setting parameterfeat: make composer parameter more simplerfeat: add empty-slide function  ","version":"0.4.1","tagName":"h2"},{"title":"v0.3.2​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.1/changelog#v032","content":" fix critical bug: fix is-sequence function, make grid and table work correctly in touyingtheme: add aqua theme, thanks for pride7theme: make university theme more configurablerefactor: don't export variable s by default anymore, it will be extracted by register function (Breaking Change)meta: add categories and template config to typst.toml for Typst 0.11  ","version":"0.4.1","tagName":"h2"},{"title":"v0.3.1​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.1/changelog#v031","content":" fix some typosfix slide-level bugfix bug of pdfpc label  ","version":"0.4.1","tagName":"h2"},{"title":"v0.3.0​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.1/changelog#v030","content":" ","version":"0.4.1","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.1/changelog#features-2","content":" better show-slides mode.support align and pad.  ","version":"0.4.1","tagName":"h3"},{"title":"Documentation​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.1/changelog#documentation","content":" Add more detailed documentation.  ","version":"0.4.1","tagName":"h3"},{"title":"Refactor​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.1/changelog#refactor","content":" simplify theme.  ","version":"0.4.1","tagName":"h3"},{"title":"Fix​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.1/changelog#fix","content":" fix many bugs.  ","version":"0.4.1","tagName":"h3"},{"title":"v0.2.1​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.1/changelog#v021","content":" ","version":"0.4.1","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.1/changelog#features-3","content":" Touying-reducer: support cetz and fletcher animationuniversity theme: add university theme  ","version":"0.4.1","tagName":"h3"},{"title":"Fix​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.1/changelog#fix-1","content":" fix footer progress in metropolis themefix some bugs in simple and dewdrop themesfix bug that outline does not display more than 4 sections  ","version":"0.4.1","tagName":"h3"},{"title":"v0.2.0​","type":1,"pageTitle":"Changelog","url":"/touying/docs/0.4.1/changelog#v020","content":" Object-oriented programming: Singleton s, binding methods utils.methods(s) and (self: obj, ..) =&gt; {..} methods.Page arguments management: Instead of using #set page(..), you should use self.page-args to retrieve or set page parameters, thereby avoiding unnecessary creation of new pages.#pause for sequence content: You can use #pause at the outermost level of a slide, including inline and list.#pause for layout functions: You can use the composer parameter to add yourself layout function like utils.side-by-side, and simply use multiple pos parameters like #slide[..][..].#meanwhile for synchronous display: Provide a #meanwhile for resetting subslides counter.#pause and #meanwhile for math equation: Provide a #touying-equation(&quot;x + y pause + z&quot;) for math equation animations.Slides: Create simple slides using standard headings.Callback-style uncover, only and alternatives: Based on the concise syntax provided by Polylux, allow precise control of the timing for displaying content. You should manually control the number of subslides using the repeat parameter. Transparent cover: Enable transparent cover using oop syntax like #let s = (s.methods.enable-transparent-cover)(self: s).Handout mode: enable handout mode by #let s = (s.methods.enable-handout-mode)(self: s).Fit-to-width and fit-to-height: Fit-to-width for title in header and fit-to-height for image. utils.fit-to-width(grow: true, shrink: true, width, body)utils.fit-to-height(width: none, prescale-width: none, grow: true, shrink: true, height, body) Slides counter: states.slide-counter.display() + &quot; / &quot; + states.last-slide-number and states.touying-progress(ratio =&gt; ..).Appendix: Freeze the last-slide-number to prevent the slide number from increasing further.Sections: Touying's built-in section support can be used to display the current section title and show progress. section and subsection parameter in #slide to register a new section or subsection.states.current-section-title to get the current section.states.touying-outline or s.methods.touying-outline to display a outline of sections.states.touying-final-sections(sections =&gt; ..) for custom outline display.states.touying-progress-with-sections((current-sections: .., final-sections: .., current-slide-number: .., last-slide-number: ..) =&gt; ..) for powerful progress display. Navigation bar: Navigation bar like here by states.touying-progress-with-sections(..), in dewdrop theme.Pdfpc: pdfpc support and export .pdfpc file without external tool by typst query command simply. ","version":"0.4.1","tagName":"h2"},{"title":"Creating Your Own Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/build-your-own-theme","content":"","keywords":"","version":"0.4.1"},{"title":"Modifying Existing Themes​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.4.1/build-your-own-theme#modifying-existing-themes","content":" If you wish to modify a theme within the Touying package locally instead of creating one from scratch, you can achieve this by following these steps:  Copy the theme code from the themes directory to your local machine. For example, copy themes/university.typ to a local file named university.typ.Remove all #import &quot;../xxx.typ&quot; commands at the top of the university.typ file.Add #import &quot;@preview/touying:0.4.1&quot;: * at the top of the university.typ file to import all modules.Replace self: s in the register function with self: themes.default.register() (Important).  You can then import and use the theme by:  #import &quot;@preview/touying:0.4.1&quot;: * #import &quot;university.typ&quot; #let s = university.register(aspect-ratio: &quot;16-9&quot;)   For a specific example, refer to: https://typst.app/project/rqRuzg0keo_ZEB5AdxjweA  ","version":"0.4.1","tagName":"h2"},{"title":"Import​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.4.1/build-your-own-theme#import","content":" Depending on whether the theme is for personal use or part of Touying, you can import in two ways:  If for personal use:  #import &quot;@preview/touying:0.4.1&quot;: *   If part of Touying themes:  #import &quot;../utils/utils.typ&quot; #import &quot;../utils/states.typ&quot; #import &quot;../utils/components.typ&quot;   Additionally, add the import statement in Touying's themes/themes.typ:  #import &quot;bamboo.typ&quot;   ","version":"0.4.1","tagName":"h2"},{"title":"Register Function and Init Method​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.4.1/build-your-own-theme#register-function-and-init-method","content":" Next, we'll distinguish between the bamboo.typ template file and the main.typ file, the latter of which is sometimes omitted.  Generally, the first step in creating slides is to determine font size and page aspect ratio. Therefore, we need to register an initialization method:  // bamboo.typ #import &quot;@preview/touying:0.4.1&quot;: * #let register( self: themes.default.register(), aspect-ratio: &quot;16-9&quot;, ) = { self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, ) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self } // main.typ #import &quot;@preview/touying:0.4.1&quot;: * #import &quot;bamboo.typ&quot; #let s = bamboo.register(aspect-ratio: &quot;16-9&quot;) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide) = utils.slides(s) #show: slides = First Section == First Slide #slide[ A slide with a title and an *important* information. ]   As you can see, we created a register function and passed an aspect-ratio parameter to set the page aspect ratio. We get default self by self: themes.default.register(). As you might already know, in Touying, we should not use set page(..) to set page parameters but rather use the syntax self.page-args += (..) to set them, as explained in the Page Layout section.  In addition, we registered a self.methods.init method, which can be used for some global style settings. For example, in this case, we added set text(size: 20pt) to set the font size. You can also place additional global style settings here, such as set par(justify: true). Since the init function is placed inside self.methods, it is a method, not a regular function. Therefore, we need to add the parameter self: none to use it properly.  As you can see, later in main.typ, we apply the global style settings in init using #show: init, where init is bound and unpacked through utils.methods(s).  If you pay extra attention, you'll notice that the register function has an independent self at the end. This actually represents returning the modified self as the return value, which will be saved in #let s = ... This line is therefore indispensable.  ","version":"0.4.1","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.4.1/build-your-own-theme#color-theme","content":" Choosing an attractive color theme for your slides is crucial. Touying provides built-in color theme support to minimize API differences between different themes. Touying offers two dimensions of color selection: the first is neutral, primary, secondary, and tertiary for hue distinction, with primary being the most commonly used; the second is default, light, lighter, lightest, dark, darker, and darkest for brightness distinction.  As we are creating the Bamboo theme, we chose a color for the primary theme, similar to bamboo (rgb(&quot;#5E8B65&quot;)), and included neutral lightest/darkest as background and font colors.  As shown in the code below, we use (self.methods.colors)(self: self, ..) to modify the color theme. Essentially, it is a wrapper for self.colors += (..).  #let register( self: themes.default.register(), aspect-ratio: &quot;16-9&quot;, ) = { // color theme self = (self.methods.colors)( self: self, primary: rgb(&quot;#5E8B65&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), neutral-darkest: rgb(&quot;#000000&quot;), ) self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, ) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self }   After adding the color theme, we can access the color using syntax like self.colors.primary.  It's worth noting that users can change the theme color at any time using:  #let s = (s.methods.colors)(self: s, primary: rgb(&quot;#3578B9&quot;))   This flexibility demonstrates Touying's powerful customization capabilities.  ","version":"0.4.1","tagName":"h2"},{"title":"Practical: Custom Alert Method​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.4.1/build-your-own-theme#practical-custom-alert-method","content":" In general, we need to provide a #alert[..] function for users, similar to #strong[..]. Typically, #alert[..] emphasizes text using the primary theme color for aesthetics. We add a line in the register function:  self.methods.alert = (self: none, it) =&gt; text(fill: self.colors.primary, it)   This code sets the text color to self.colors.primary, utilizing the theme's primary color.  ","version":"0.4.1","tagName":"h2"},{"title":"Custom Header and Footer​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.4.1/build-your-own-theme#custom-header-and-footer","content":" Here, assuming you've already read the Page Layout section, we know we should add headers and footers to the slides.  Firstly, we add self.bamboo-title = []. This means we save the title of the current slide as a member variable self.bamboo-title, stored in self. This makes it easy to use in the header and later modifications. Similarly, we create self.bamboo-footer, saving the footer: [] parameter from the register function for displaying in the bottom-left corner.  It's worth noting that our header is actually a content function in the form of let header(self) = { .. } with the self parameter, allowing us to get the latest information from self. For example, self.bamboo-title. The footer is similar.  The components.cell used inside is actually #let cell = block.with(width: 100%, height: 100%, above: 0pt, below: 0pt, breakable: false), and show: components.cell is shorthand for components.cell(body). The show: pad.with(.4em) in the footer is similar.  Another point to note is the states module, which contains many counters and state-related content. For example, states.current-section-title is used to display the current section, and states.slide-counter.display() + &quot; / &quot; + states.last-slide-number is used to display the current page number and total number of pages.  We observe the usage of utils.call-or-display(self, self.bamboo-footer) to display self.bamboo-footer. This is used to handle situations like self.bamboo-footer = (self) =&gt; {..}, ensuring a unified approach to displaying content functions and content.  To ensure proper display of the header and footer and sufficient spacing from the main content, we also set margins, such as self.page-args += (margin: (top: 4em, bottom: 1.5em, x: 2em)).  We also need to customize a slide method that accepts slide(self: none, title: auto, ..args). The first self: none is a required method parameter for getting the latest self. The second title is used to update self.bamboo-title for displaying in the header. The third ..args collects the remaining parameters and passes them to (self.methods.touying-slide)(self: self, ..args), which is necessary for the Touying slide functionality to work properly. Additionally, we need to register this method in the register function with self.methods.slide = slide.  // bamboo.typ #import &quot;@preview/touying:0.4.1&quot;: * #let slide(self: none, title: auto, ..args) = { if title != auto { self.bamboo-title = title } (self.methods.touying-slide)(self: self, ..args) } #let register( self: themes.default.register(), aspect-ratio: &quot;16-9&quot;, footer: [], ) = { // color theme self = (self.methods.colors)( self: self, primary: rgb(&quot;#5E8B65&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), neutral-darkest: rgb(&quot;#000000&quot;), ) // variables for later use self.bamboo-title = [] self.bamboo-footer = footer // set page let header(self) = { set align(top) show: components.cell.with(fill: self.colors.primary, inset: 1em) set align(horizon) set text(fill: self.colors.neutral-lightest, size: .7em) states.current-section-title linebreak() set text(size: 1.5em) utils.call-or-display(self, self.bamboo-title) } let footer(self) = { set align(bottom) show: pad.with(.4em) set text(fill: self.colors.neutral-darkest, size: .8em) utils.call-or-display(self, self.bamboo-footer) h(1fr) states.slide-counter.display() + &quot; / &quot; + states.last-slide-number } self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, header: header, footer: footer, margin: (top: 4em, bottom: 1.5em, x: 2em), ) // register methods self.methods.slide = slide self.methods.alert = (self: none, it) =&gt; text(fill: self.colors.primary, it) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self } // main.typ #import &quot;@preview/touying:0.4.1&quot;: * #import &quot;bamboo.typ&quot; #let s = bamboo.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide) = utils.slides(s) #show: slides = First Section == First Slide #slide[ A slide with a title and an *important* information. ]     ","version":"0.4.1","tagName":"h2"},{"title":"Custom Special Slide​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.4.1/build-your-own-theme#custom-special-slide","content":" Building upon the basic slide, we further add some special slide functions such as title-slide, focus-slide, and a custom slides method.  For the title-slide method, first, we call self = utils.empty-page(self). This function clears self.page-args.header, self.page-args.footer, and sets margin to 0em, creating a blank page effect. Then, we use let info = self.info + args.named() to get information stored in self.info and update it with the passed args.named() for later use as info.title. The specific page content body will vary for each theme, so we won't go into details here. Finally, we call `(self.methods.touying-slide)(self: self, repeat: none, body  ), where repeat: noneindicates that this page does not require animation effects, and passing thebody` parameter displays its content.  For the new-section-slide method, the process is similar. The only thing to note is that in (self.methods.touying-slide)(self: self, repeat: none, section: section, body), we pass an additional section: section parameter to declare the creation of a new section. Another point to note is that besides self.methods.new-section-slide = new-section-slide, we also register self.methods.touying-new-section-slide = new-section-slide, so new-section-slide will be automatically called when encountering a first-level title.  For the focus-slide method, most of the content is similar, but it's worth noting that we use self.page-args += (..) to update the page's background color.  Finally, we update the slides(self: none, title-slide: true, slide-level: 1, ..args) method. When title-slide is true, using #show: slides will automatically create a title-slide. Setting slide-level: 1 indicates that the first-level and second-level titles correspond to section and title, respectively.  // bamboo.typ #import &quot;@preview/touying:0.4.1&quot;: * #let slide(self: none, title: auto, ..args) = { if title != auto { self.bamboo-title = title } (self.methods.touying-slide)(self: self, ..args) } #let title-slide(self: none, ..args) = { self = utils.empty-page(self) let info = self.info + args.named() let body = { set align(center + horizon) block( fill: self.colors.primary, width: 80%, inset: (y: 1em), radius: 1em, text(size: 2em, fill: self.colors.neutral-lightest, weight: &quot;bold&quot;, info.title) ) set text(fill: self.colors.neutral-darkest) if info.author != none { block(info.author) } if info.date != none { block(if type(info.date) == datetime { info.date.display(self.datetime-format) } else { info.date }) } } (self.methods.touying-slide)(self: self, repeat: none, body) } #let new-section-slide(self: none, section) = { self = utils.empty-page(self) let body = { set align(center + horizon) set text(size: 2em, fill: self.colors.primary, weight: &quot;bold&quot;, style: &quot;italic&quot;) section } (self.methods.touying-slide)(self: self, repeat: none, section: section, body) } #let focus-slide(self: none, body) = { self = utils.empty-page(self) self.page-args += ( fill: self.colors.primary, margin: 2em, ) set text(fill: self.colors.neutral-lightest, size: 2em) (self.methods.touying-slide)(self: self, repeat: none, align(horizon + center, body)) } #let slides(self: none, title-slide: true, slide-level: 1, ..args) = { if title-slide { (self.methods.title-slide)(self: self) } (self.methods.touying-slides)(self: self, slide-level: slide-level, ..args) } #let register( self: themes.default.register(), aspect-ratio: &quot;16-9&quot;, footer: [], ) = { // color theme self = (self.methods.colors)( self: self, primary: rgb(&quot;#5E8B65&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), neutral-darkest: rgb(&quot;#000000&quot;), ) // variables for later use self.bamboo-title = [] self.bamboo-footer = footer // set page let header(self) = { set align(top) show: components.cell.with(fill: self.colors.primary, inset: 1em) set align(horizon) set text(fill: self.colors.neutral-lightest, size: .7em) states.current-section-title linebreak() set text(size: 1.5em) utils.call-or-display(self, self.bamboo-title) } let footer(self) = { set align(bottom) show: pad.with(.4em) set text(fill: self.colors.neutral-darkest, size: .8em) utils.call-or-display(self, self.bamboo-footer) h(1fr) states.slide-counter.display() + &quot; / &quot; + states.last-slide-number } self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, header: header, footer: footer, margin: (top: 4em, bottom: 1.5em, x: 2em), ) // register methods self.methods.slide = slide self.methods.title-slide = title-slide self.methods.new-section-slide = new-section-slide self.methods.touying-new-section-slide = new-section-slide self.methods.focus-slide = focus-slide self.methods.slides = slides self.methods.alert = (self: none, it) =&gt; text(fill: self.colors.primary, it) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self } // main.typ #import &quot;@preview/touying:0.4.1&quot;: * #import &quot;bamboo.typ&quot; #let s = bamboo.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, focus-slide) = utils.slides(s) #show: slides = First Section == First Slide #slide[ A slide with a title and an *important* information. ] #focus-slide[ Focus on it! ]     ","version":"0.4.1","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/0.4.1/build-your-own-theme#conclusion","content":" Congratulations! You've created a simple and elegant theme. Perhaps you may find that Touying introduces a wealth of concepts, making it initially challenging to grasp. This is normal, as Touying opts for functionality over simplicity. However, thanks to Touying's comprehensive and unified approach, you can easily extract commonalities between different themes and transfer your knowledge seamlessly. You can also save global variables, modify existing themes, or switch between themes effortlessly, showcasing the benefits of Touying's decoupling and object-oriented programming. ","version":"0.4.1","tagName":"h2"},{"title":"Complex Animations","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/dynamic/complex","content":"","keywords":"","version":"0.4.1"},{"title":"Callback-Style Functions​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/0.4.1/dynamic/complex#callback-style-functions","content":" To overcome the limitations of styled and layout mentioned earlier, Touying cleverly implements always-effective only, uncover, and alternatives using callback functions. Specifically, you need to introduce these three functions as follows:  #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) In subslide #self.subslide, test #uncover(&quot;2-&quot;)[uncover] function, and test #only(&quot;2-&quot;)[only] function, #pause and paused text. ])     Notice that we no longer pass a content block but instead pass a callback function with a self parameter. Later, we extract only, uncover, and alternatives functions from self using:  #let (uncover, only, alternatives) = utils.methods(self)   We then call these functions in subsequent steps.  Here's an interesting fact: the self.subslide of type int indicates the current subslide index, and in fact, the only, uncover, and alternatives functions rely on self.subslide to determine the current subslide index.  Warning We manually specify the repeat: 3 parameter, indicating the display of 3 subslides. We need to do this manually because Touying cannot infer how many subslides only, uncover, and alternatives should display.  ","version":"0.4.1","tagName":"h2"},{"title":"only​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/0.4.1/dynamic/complex#only","content":" The only function means it &quot;appears&quot; only on selected subslides. If it doesn't appear, it completely disappears and doesn't occupy any space. In other words, #only(index, body) is either body or none.  The index can be an int type or a str type like &quot;2-&quot; or &quot;2-3&quot;. For more usage, refer to Polylux.  ","version":"0.4.1","tagName":"h2"},{"title":"uncover​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/0.4.1/dynamic/complex#uncover","content":" The uncover function means it &quot;displays&quot; only on selected subslides; otherwise, it will be covered by the cover function but still occupies the original space. In other words, #uncover(index, body) is either body or cover(body).  The index can be an int type or a str type like &quot;2-&quot; or &quot;2-3&quot;. For more usage, refer to Polylux.  You may also have noticed that #pause actually uses the cover function, providing a more convenient syntax. In reality, their effects are almost identical.  ","version":"0.4.1","tagName":"h2"},{"title":"alternatives​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/0.4.1/dynamic/complex#alternatives","content":" The alternatives function displays a series of different content in different subslides. For example:  #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) #alternatives[Ann][Bob][Christopher] likes #alternatives[chocolate][strawberry][vanilla] ice cream. ])     As you can see, alternatives can automatically expand to the most suitable width and height, a capability that only and uncover lack. In fact, alternatives has other parameters, such as start: 2, repeat-last: true, and position: center + horizon. For more usage, refer to Polylux. ","version":"0.4.1","tagName":"h2"},{"title":"Code Style","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/code-styles","content":"","keywords":"","version":"0.4.1"},{"title":"Simple Style​","type":1,"pageTitle":"Code Style","url":"/touying/docs/0.4.1/code-styles#simple-style","content":" If we only need simplicity, we can directly input content under the heading, just like writing a normal Typst document. The heading here serves to divide the pages, and we can use commands like #pause to achieve animation effects.  #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.simple.register() #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     You can use an empty heading == to create a new page. This skill also helps clear the continuation of the previous title.  PS: We can use the #slides-end marker to signify the end of #show: slides.  ","version":"0.4.1","tagName":"h2"},{"title":"Block Style​","type":1,"pageTitle":"Code Style","url":"/touying/docs/0.4.1/code-styles#block-style","content":" Many times, using simple style alone cannot achieve all the functions we need. For more powerful features and clearer structure, we can also use block style in the form of #slide[...]. The #slide function needs to be unpacked using the syntax #let (slide, empty-slide) = utils.slides(s) to be used correctly after #show: slides.  For example, the previous example can be transformed into:  #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.simple.register() #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Title == First Slide #slide[ Hello, Touying! #pause Hello, Typst! ]   and #empty-slide[] to create an empty slide without header and footer.  There are many advantages to doing this:  Many times, we not only need the default #slide[...] but also special slide functions like #focus-slide[...].Different themes' #slide[...] functions may have more parameters than the default, such as the university theme's #slide[...] function having a subtitle parameter.Only slide functions can use the callback-style content block to achieve complex animation effects with #only and #uncover functions.It has a clearer structure. By identifying #slide[...] blocks, we can easily distinguish the specific pagination effects of slides.  ","version":"0.4.1","tagName":"h2"},{"title":"Convention Over Configuration​","type":1,"pageTitle":"Code Style","url":"/touying/docs/0.4.1/code-styles#convention-over-configuration","content":" You may have noticed that when using the simple theme, using a level-one heading automatically creates a new section slide. This is because the simple theme registers an s.methods.touying-new-section-slide method, so Touying will automatically call this method.  If we don't want it to automatically create such a section slide, we can delete this method:  #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.simple.register() #(s.methods.touying-new-section-slide = none) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     As you can see, there are only two pages left, and the default section slide is gone.  Similarly, we can register a new section slide:  #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.simple.register() #(s.methods.touying-new-section-slide = (self: none, section, ..args) =&gt; { self = utils.empty-page(self) (s.methods.touying-slide)(self: self, section: section, { set align(center + horizon) set text(size: 2em, fill: s.colors.primary, style: &quot;italic&quot;, weight: &quot;bold&quot;) section }, ..args) }) #let (init, slides, touying-outline) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     Similarly, we can modify s.methods.touying-new-subsection-slide to do the same for subsection.  In fact, besides s.methods.touying-new-section-slide, another special slide function is the s.methods.slide function, which will be called by default in simple style when #slide[...] is not explicitly used.  Also, since #slide[...] is registered in s.slides = (&quot;slide&quot;,), the section, subsection, and title parameters will be automatically passed, while others like #focus-slide[...] will not automatically receive these three parameters.  Principle In fact, you can also not use #show: slides and utils.slides(s), but only use utils.methods(s), for example: #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.simple.register() #let (init, touying-outline, slide) = utils.methods(s) #show: init #slide(section: [Title], title: [First Slide])[ Hello, Touying! #pause Hello, Typst! ] Here, you need to manually pass in section, subsection, and title, but it will have better performance, suitable for cases where faster performance is needed, such as when there are more than dozens or hundreds of pages. ","version":"0.4.1","tagName":"h2"},{"title":"Cover Function","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/dynamic/cover","content":"","keywords":"","version":"0.4.1"},{"title":"Default Cover Function: hide​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/0.4.1/dynamic/cover#default-cover-function-hide","content":" The cover function is a method stored in s.methods.cover, which is later used by uncover and #pause.  The default cover function is the hide function. This function makes the internal content invisible without affecting the layout.  ","version":"0.4.1","tagName":"h2"},{"title":"Updating the Cover Function​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/0.4.1/dynamic/cover#updating-the-cover-function","content":" In some cases, you might want to use your own cover function. In that case, you can set your own cover function using:  let s = (s.methods.update-cover)(self: s, is-method: true, cover-fn)   Here, if you set is-method: false, Touying will wrap cover-fn into a method for you.  ","version":"0.4.1","tagName":"h2"},{"title":"hack: handle enum and list​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/0.4.1/dynamic/cover#hack-handle-enum-and-list","content":" You will find that the existing cover function cannot hide the mark of enum and list, refer to here, so you can hack:  #let s = (s.methods.update-cover)(self: s, body =&gt; box(scale(x: 0%, body)))   ","version":"0.4.1","tagName":"h2"},{"title":"Semi-Transparent Cover Function​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/0.4.1/dynamic/cover#semi-transparent-cover-function","content":" Touying supports a semi-transparent cover function, which can be enabled by adding:  #let s = (s.methods.enable-transparent-cover)(self: s)   You can adjust the transparency through the alpha: .. parameter.  Warning Note that the transparent-cover here does not preserve text layout like hide does because it adds an extra layer of box, which may disrupt the original structure of the page.  Internals The enable-transparent-cover method is defined as: #let s.methods.enable-transparent-cover = ( self: none, constructor: rgb, alpha: 85%, ) =&gt; { self.methods.cover = (self: none, body) =&gt; { utils.cover-with-rect( fill: utils.update-alpha( constructor: constructor, self.page-args.fill, alpha, ), body ) } self } It creates a semi-transparent rectangular mask with the same color as the background to simulate the effect of transparent content. Here, constructor: rgb and alpha: 85% indicate the background color's construction function and transparency level, respectively. ","version":"0.4.1","tagName":"h2"},{"title":"Math Equation Animations","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/dynamic/equation","content":"","keywords":"","version":"0.4.1"},{"title":"Simple Animation​","type":1,"pageTitle":"Math Equation Animations","url":"/touying/docs/0.4.1/dynamic/equation#simple-animation","content":" Let's start with an example:  #slide[ Touying equation with pause: #touying-equation(` f(x) &amp;= pause x^2 + 2x + 1 \\ &amp;= pause (x + 1)^2 \\ `) #meanwhile Touying equation is very simple. ]     We use the touying-equation function to incorporate pause and meanwhile within the text of math equations (in fact, you can also use #pause or #pause;).  As you would expect, the math equation is displayed step by step, making it suitable for presenters to demonstrate their math reasoning.  Warning While the touying-equation function is convenient, you should always be aware that it doesn't perform complex syntax analysis. It simply splits the string using regular expressions. Therefore, you should not use pause or meanwhile within functions like display(..)!  ","version":"0.4.1","tagName":"h2"},{"title":"Complex Animation​","type":1,"pageTitle":"Math Equation Animations","url":"/touying/docs/0.4.1/dynamic/equation#complex-animation","content":" In fact, we can also use only, uncover, and alternatives within touying-equation with a little trick:  #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) #touying-equation(scope: (uncover: uncover), ` f(x) &amp;= pause x^2 + 2x + uncover(&quot;3-&quot;, 1) \\ &amp;= pause (x + 1)^2 \\ `) ])     We can pass the functions we need into the touying-equation through the scope parameter, such as uncover in this example.  ","version":"0.4.1","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Math Equation Animations","url":"/touying/docs/0.4.1/dynamic/equation#parameters","content":" The function definition of touying-equation is:  #let touying-equation(block: true, numbering: none, supplement: auto, scope: (:), body) = { .. }   Therefore, you can pass parameters like block, numbering, and supplement to touying-equation just like using normal math equations. ","version":"0.4.1","tagName":"h2"},{"title":"Handout Mode","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/dynamic/handout","content":"Handout Mode While watching slides and attending lectures, the audience often wishes to have handouts for reviewing challenging concepts. Therefore, it's beneficial for the author to provide handouts for the audience, preferably before the lecture for better preparation. The handout mode differs from the regular mode as it doesn't require intricate animation effects. It retains only the last subslide of each slide. Enabling handout mode is simple: #let s = (s.methods.enable-handout-mode)(self: s) ","keywords":"","version":"0.4.1"},{"title":"Other Animations","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/dynamic/other","content":"","keywords":"","version":"0.4.1"},{"title":"Simple Animations​","type":1,"pageTitle":"Other Animations","url":"/touying/docs/0.4.1/dynamic/other#simple-animations","content":" Here's an example:  #import &quot;@preview/touying:0.4.1&quot;: * #import &quot;@preview/cetz:0.2.2&quot; #import &quot;@preview/fletcher:0.4.4&quot; as fletcher: node, edge // cetz and fletcher bindings for touying #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: fletcher.diagram, cover: fletcher.hide) #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides.with(title-slide: false, outline-slide: false) // cetz animation #slide[ Cetz in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) ] // fletcher animation #slide[ Fletcher in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) ]     ","version":"0.4.1","tagName":"h2"},{"title":"only and uncover​","type":1,"pageTitle":"Other Animations","url":"/touying/docs/0.4.1/dynamic/other#only-and-uncover","content":" In fact, we can also use only and uncover within cetz, just requiring a bit of skill:  #slide(repeat: 3, self =&gt; [ #let (uncover, only) = utils.methods(self) Cetz in Touying in subslide #self.subslide: #cetz.canvas({ import cetz.draw: * let self = (self.methods.update-cover)(self: self, hide.with(bounds: true)) let (uncover,) = utils.methods(self) rect((0,0), (5,5)) uncover(&quot;2-3&quot;, { rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) }) only(3, line((0,0), (2.5, 2.5), name: &quot;line&quot;)) }) ])  ","version":"0.4.1","tagName":"h2"},{"title":"Simple Animations","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/dynamic/simple","content":"","keywords":"","version":"0.4.1"},{"title":"pause​","type":1,"pageTitle":"Simple Animations","url":"/touying/docs/0.4.1/dynamic/simple#pause","content":" The purpose of #pause is straightforward – it separates the subsequent content into the next subslide. You can use multiple #pause to create multiple subslides. Here's a simple example:  #slide[ First #pause Second #pause Third ]     This example will create three subslides, gradually revealing the content.  As you can see, #pause can be used inline or on a separate line.  ","version":"0.4.1","tagName":"h2"},{"title":"meanwhile​","type":1,"pageTitle":"Simple Animations","url":"/touying/docs/0.4.1/dynamic/simple#meanwhile","content":" In some cases, you may need to display additional content simultaneously with #pause. In such cases, you can use #meanwhile.  #slide[ First #pause Second #meanwhile Third #pause Fourth ]     This example will create only two subslides, with &quot;First&quot; and &quot;Third&quot; displayed simultaneously, and &quot;Second&quot; and &quot;Fourth&quot; displayed simultaneously.  ","version":"0.4.1","tagName":"h2"},{"title":"Handling layout functions​","type":1,"pageTitle":"Simple Animations","url":"/touying/docs/0.4.1/dynamic/simple#handling-layout-functions","content":" If you use layout functions like grid inside slide[..], you might be surprised to find that subsequent #pause and #meanwhile do not work. This is because Touying cannot detect the content inside layout functions. But you can use the composer parameter of #slide() to meet most requirements.  Internals Touying doesn't rely on counter and locate to implement #pause. Instead, it has a parser written in Typst script. It parses the input content block as a sequence and then transforms and reorganizes this sequence into the series of subslides we need. ","version":"0.4.1","tagName":"h2"},{"title":"Pympress","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/external/pympress","content":"","keywords":"","version":"0.4.1"},{"title":"Speaker Notes​","type":1,"pageTitle":"Pympress","url":"/touying/docs/0.4.1/external/pympress#speaker-notes","content":" #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) // Set the speaker notes configuration, you can show it by pympress #let s = (s.methods.show-notes-on-second-screen)(self: s, right) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Animation == Simple Animation We can use `#pause` to #pause display something later. #pause Just like this. #meanwhile Meanwhile, #pause we can also use `#meanwhile` to #pause display other content synchronously. #speaker-note[ + This is a speaker note. + You won't see it unless you use `#let s = (s.math.show-notes-on-second-screen)(self: s, right)` ]     Then we can use the pympress to show it.   ","version":"0.4.1","tagName":"h2"},{"title":"Pdfpc","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/external/pdfpc","content":"","keywords":"","version":"0.4.1"},{"title":"Adding Metadata​","type":1,"pageTitle":"Pdfpc","url":"/touying/docs/0.4.1/external/pdfpc#adding-metadata","content":" Touying remains consistent with Polylux to avoid conflicts between APIs.  For example, you can add notes using #pdfpc.speaker-note(&quot;This is a note that only the speaker will see.&quot;).  ","version":"0.4.1","tagName":"h2"},{"title":"Pdfpc Configuration​","type":1,"pageTitle":"Pdfpc","url":"/touying/docs/0.4.1/external/pdfpc#pdfpc-configuration","content":" To add pdfpc configurations, you can use  #let s = (s.methods.append-preamble)(self: s, pdfpc.config( duration-minutes: 30, start-time: datetime(hour: 14, minute: 10, second: 0), end-time: datetime(hour: 14, minute: 40, second: 0), last-minutes: 5, note-font-size: 12, disable-markdown: false, default-transition: ( type: &quot;push&quot;, duration-seconds: 2, angle: ltr, alignment: &quot;vertical&quot;, direction: &quot;inward&quot;, ), ))   Add the corresponding configurations. Refer to Polylux for specific configuration details.  ","version":"0.4.1","tagName":"h2"},{"title":"Exporting .pdfpc File​","type":1,"pageTitle":"Pdfpc","url":"/touying/docs/0.4.1/external/pdfpc#exporting-pdfpc-file","content":" Assuming your document is ./example.typ, you can export the .pdfpc file directly using:  typst query --root . ./example.typ --field value --one &quot;&lt;pdfpc-file&gt;&quot; &gt; ./example.pdfpc   With the compatibility of Touying and Polylux, you can make Polylux also support direct export by adding the following code:  #import &quot;@preview/touying:0.4.1&quot; #locate(loc =&gt; touying.pdfpc.pdfpc-file(loc))  ","version":"0.4.1","tagName":"h2"},{"title":"Typst Preview","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/external/typst-preview","content":"Typst Preview The Typst Preview extension for VS Code provides an excellent slide mode, allowing us to preview and present slides. Press Ctrl/Cmd + Shift + P and type Typst Preview: Preview current file in slide mode to open the preview in slide mode. Press Ctrl/Cmd + Shift + P and type Typst Preview: Preview current file in browser and slide mode to open the slide mode in the browser. Now, you can press keys like F11 to enter fullscreen mode in the browser, making it suitable for slide presentations. Since Typst Preview is based on SVG, it can play GIF animations, which is very helpful for dynamic slides.","keywords":"","version":"0.4.1"},{"title":"Codly","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/integration/codly","content":"Codly When using Codly, we should initialize it using the s.methods.append-preamble method. #import &quot;@preview/touying:0.4.1&quot;: * #import &quot;@preview/codly:0.2.0&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.append-preamble)(self: s)[ #codly(languages: ( rust: (name: &quot;Rust&quot;, icon: &quot;\\u{fa53}&quot;, color: rgb(&quot;#CE412B&quot;)), )) ] #let (init, slides) = utils.methods(s) #show heading.where(level: 2): set block(below: 1em) #show: init #show: codly-init.with() #let (slide, empty-slide) = utils.slides(s) #show: slides #slide[ == First slide #raw(lang: &quot;rust&quot;, block: true, `pub fn main() { println!(&quot;Hello, world!&quot;); }`.text) ] ","keywords":"","version":"0.4.1"},{"title":"CeTZ","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/integration/cetz","content":"","keywords":"","version":"0.4.1"},{"title":"Simple Animation​","type":1,"pageTitle":"CeTZ","url":"/touying/docs/0.4.1/integration/cetz#simple-animation","content":" An example:  #import &quot;@preview/touying:0.4.1&quot;: * #import &quot;@preview/cetz:0.2.2&quot; #import &quot;@preview/fletcher:0.4.4&quot; as fletcher: node, edge // cetz and fletcher bindings for touying #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: fletcher.diagram, cover: fletcher.hide) #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides.with(title-slide: false, outline-slide: false) // cetz animation #slide[ Cetz in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) ] // fletcher animation #slide[ Fletcher in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) ]     ","version":"0.4.1","tagName":"h2"},{"title":"only and uncover​","type":1,"pageTitle":"CeTZ","url":"/touying/docs/0.4.1/integration/cetz#only-and-uncover","content":" In fact, we can also use only and uncover within CeTZ, but it requires a bit of technique:  #slide(repeat: 3, self =&gt; [ #let (uncover, only) = utils.methods(self) Cetz in Touying in subslide #self.subslide: #cetz.canvas({ import cetz.draw: * let self = (self.methods.update-cover)(self: self, hide.with(bounds: true)) let (uncover,) = utils.methods(self) rect((0,0), (5,5)) uncover(&quot;2-3&quot;, { rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) }) only(3, line((0,0), (2.5, 2.5), name: &quot;line&quot;)) }) ])  ","version":"0.4.1","tagName":"h2"},{"title":"Global Settings","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/global-settings","content":"","keywords":"","version":"0.4.1"},{"title":"Global Styles​","type":1,"pageTitle":"Global Settings","url":"/touying/docs/0.4.1/global-settings#global-styles","content":" For Touying, global styles refer to set rules or show rules that need to be applied everywhere, such as #set text(size: 20pt).  Themes in Touying encapsulate some of their own global styles, which are placed in #show: init. For example, the university theme encapsulates the following:  self.methods.init = (self: none, body) =&gt; { set text(size: 25pt) show footnote.entry: set text(size: .6em) body }   If you are not a theme creator but want to add your own global styles to your slides, you can simply place them after #show: init and before #show: slides. For example, the metropolis theme recommends adding the following global styles:  #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init // global styles #set text(font: &quot;Fira Sans&quot;, weight: &quot;light&quot;, size: 20pt) #show math.equation: set text(font: &quot;Fira Math&quot;) #set strong(delta: 100) #set par(justify: true) #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides   However, note that you should not use #set page(..). Instead, modify s.page-args and s.padding, for example:  #(s.page-args += ( margin: (x: 0em, y: 2em), header: align(top)[Header], footer: align(bottom)[Footer], header-ascent: 0em, footer-descent: 0em, )) #(s.padding += (x: 4em, y: 0em))   ","version":"0.4.1","tagName":"h2"},{"title":"Global Information​","type":1,"pageTitle":"Global Settings","url":"/touying/docs/0.4.1/global-settings#global-information","content":" Like Beamer, Touying, through an OOP-style unified API design, can help you better maintain global information, allowing you to easily switch between different themes. Global information is a typical example of this.  You can set the title, subtitle, author, date, and institution information for slides using:  #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], )   In subsequent slides, you can access them through s.info or self.info.  This information is generally used in the title-slide, header, and footer of the theme, for example:  #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution)   The date can accept datetime format or content format, and the display format for the datetime format can be changed using:  #let s = (s.methods.datetime-format)(self: s, &quot;[year]-[month]-[day]&quot;)   Principle Here, we will introduce a bit of OOP concept in Touying. You should know that Typst is a typesetting language that supports incremental rendering, which means Typst caches the results of previous function calls. This requires that Typst consists of pure functions, meaning functions that do not change external variables. Thus, it is challenging to modify a global variable in the true sense, even with the use of state or counter. This would require the use of locate with callback functions to obtain the values inside, and this approach would have a significant impact on performance. Touying does not use state or counter and does not violate the principle of pure functions in Typst. Instead, it uses a clever approach in an object-oriented style, maintaining a global singleton s. In Touying, an object refers to a Typst dictionary with its own member variables and methods. We agree that methods all have a named parameter self for passing the object itself, and methods are placed in the .methods domain. With this concept, it becomes easier to write methods to update info: #let s = ( info: (:), methods: ( // update info info: (self: none, ..args) =&gt; { self.info += args.named() self }, ) ) #let s = (s.methods.info)(self: s, title: [title]) Title is #s.info.title Now you can understand the purpose of the utils.methods() function: to bind self to all methods of s and return it, simplifying the subsequent usage through unpacking syntax. #let (init, slides, alert) = utils.methods(s)   ","version":"0.4.1","tagName":"h2"},{"title":"State Initialization​","type":1,"pageTitle":"Global Settings","url":"/touying/docs/0.4.1/global-settings#state-initialization","content":" In general, the two ways mentioned above are sufficient for adding global settings. However, there are still situations where we need to initialize counters or states. If you place this code before #show: slides, a blank page will be created, which is something we don't want to see. In such cases, you can use the s.methods.append-preamble method. For example, when using the codly package:  #import &quot;@preview/touying:0.4.1&quot;: * #import &quot;@preview/codly:0.2.0&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.append-preamble)(self: s)[ #codly(languages: ( rust: (name: &quot;Rust&quot;, icon: &quot;\\u{fa53}&quot;, color: rgb(&quot;#CE412B&quot;)), )) ] #let (init, slides) = utils.methods(s) #show heading.where(level: 2): set block(below: 1em) #show: init #show: codly-init.with() #let (slide, empty-slide) = utils.slides(s) #show: slides #slide[ == First slide #raw(lang: &quot;rust&quot;, block: true, `pub fn main() { println!(&quot;Hello, world!&quot;); }`.text) ]     Or when configuring Pdfpc:  // Pdfpc configuration // typst query --root . ./example.typ --field value --one &quot;&lt;pdfpc-file&gt;&quot; &gt; ./example.pdfpc #let s = (s.methods.append-preamble)(self: s, pdfpc.config( duration-minutes: 30, start-time: datetime(hour: 14, minute: 10, second: 0), end-time: datetime(hour: 14, minute: 40, second: 0), last-minutes: 5, note-font-size: 12, disable-markdown: false, default-transition: ( type: &quot;push&quot;, duration-seconds: 2, angle: ltr, alignment: &quot;vertical&quot;, direction: &quot;inward&quot;, ), ))  ","version":"0.4.1","tagName":"h2"},{"title":"MiTeX","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/integration/mitex","content":"MiTeX During the process of creating slides, we often already have a LaTeX math equation that we simply want to paste into the slides without transcribing it into a Typst math equation. In such cases, we can use MiTeX. Example: #import &quot;@preview/mitex:0.2.3&quot;: * Write inline equations like #mi(&quot;x&quot;) or #mi[y]. Also block equations (this case is from #text(blue.lighten(20%), link(&quot;https://katex.org/&quot;)[katex.org])): #mitex(` \\newcommand{\\f}[2]{#1f(#2)} \\f\\relax{x} = \\int_{-\\infty}^\\infty \\f\\hat\\xi\\,e^{2 \\pi i \\xi x} \\,d\\xi `) Touying also provides a touying-mitex function, which can be used for example #touying-mitex(mitex, ` f(x) &amp;= \\pause x^2 + 2x + 1 \\\\ &amp;= \\pause (x + 1)^2 \\\\ `) ","keywords":"","version":"0.4.1"},{"title":"Ctheorems","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/integration/ctheorems","content":"Ctheorems Touying can work seamlessly with the ctheorems package, allowing you to directly use the ctheorems package. Moreover, you can utilize #let s = (s.methods.numbering)(self: s, section: &quot;1.&quot;, &quot;1.1&quot;) to set numbering for sections and subsections. #import &quot;@preview/touying:0.4.1&quot;: * #import &quot;@preview/ctheorems:1.1.2&quot;: * // Register university theme #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;) // Set the numbering of section and subsection #let s = (s.methods.numbering)(self: s, section: &quot;1.&quot;, &quot;1.1&quot;) // Theorems configuration by ctheorems #show: thmrules.with(qed-symbol: $square$) #let theorem = thmbox(&quot;theorem&quot;, &quot;Theorem&quot;, fill: rgb(&quot;#eeffee&quot;)) #let corollary = thmplain( &quot;corollary&quot;, &quot;Corollary&quot;, base: &quot;theorem&quot;, titlefmt: strong ) #let definition = thmbox(&quot;definition&quot;, &quot;Definition&quot;, inset: (x: 1.2em, top: 1em)) #let example = thmplain(&quot;example&quot;, &quot;Example&quot;).with(numbering: none) #let proof = thmproof(&quot;proof&quot;, &quot;Proof&quot;) // Extract methods #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert // Extract slide functions #let (slide, empty-slide) = utils.slides(s) #show: slides = Theorems == Prime numbers #definition[ A natural number is called a #highlight[_prime number_] if it is greater than 1 and cannot be written as the product of two smaller natural numbers. ] #example[ The numbers $2$, $3$, and $17$ are prime. @cor_largest_prime shows that this list is not exhaustive! ] #theorem(&quot;Euclid&quot;)[ There are infinitely many primes. ] #proof[ Suppose to the contrary that $p_1, p_2, dots, p_n$ is a finite enumeration of all primes. Set $P = p_1 p_2 dots p_n$. Since $P + 1$ is not in our list, it cannot be prime. Thus, some prime factor $p_j$ divides $P + 1$. Since $p_j$ also divides $P$, it must divide the difference $(P + 1) - P = 1$, a contradiction. ] #corollary[ There is no largest prime number. ] &lt;cor_largest_prime&gt; #corollary[ There are infinitely many composite numbers. ] #theorem[ There are arbitrarily long stretches of composite numbers. ] #proof[ For any $n &gt; 2$, consider $ n! + 2, quad n! + 3, quad ..., quad n! + n #qedhere $ ] ","keywords":"","version":"0.4.1"},{"title":"Fletcher","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/integration/fletcher","content":"Fletcher Touying provides the touying-reducer, which adds pause and meanwhile animations to Fletcher. An example: #import &quot;@preview/touying:0.4.1&quot;: * #import &quot;@preview/cetz:0.2.2&quot; #import &quot;@preview/fletcher:0.4.4&quot; as fletcher: node, edge // cetz and fletcher bindings for touying #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: fletcher.diagram, cover: fletcher.hide) #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides.with(title-slide: false, outline-slide: false) // cetz animation #slide[ Cetz in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) ] // fletcher animation #slide[ Fletcher in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) ] ","keywords":"","version":"0.4.1"},{"title":"Introduction to Touying","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/intro","content":"","keywords":"","version":"0.4.1"},{"title":"Why Use Touying​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.4.1/intro#why-use-touying","content":" Unlike PowerPoint, Touying is not a &quot;what you see is what you get&quot; tool. You can write your slides in a &quot;content and style separation&quot; manner, especially with Typst, which offers a concise yet powerful syntax, better supporting content like code blocks, mathematical formulas, and theorems. Another advantage is that, with templates, writing slides with Touying is much faster than PowerPoint. Therefore, Touying is more suitable for users with a demand for &quot;research writing.&quot;Compared to Markdown Slides, Touying, relying on Typst, has more powerful typesetting control, such as headers, footers, layout, and convenient custom functions. These are capabilities that Markdown struggles to provide, or does not do well. Additionally, Touying offers #pause and #meanwhile markers, providing more convenient dynamic slide capabilities.Compared to Beamer, Touying has faster compilation speed, a more concise syntax, and simpler theme customization capabilities. Touying's compilation speed can be maintained in milliseconds or tens of milliseconds, compared to Beamer's compilation time of seconds or tens of seconds. Touying's syntax is more concise than Beamer, making it easier to change templates and create your own templates. In terms of features, Touying supports most of Beamer's capabilities and provides some convenient features that Beamer lacks.Compared to Polylux, Touying provides an object-oriented programming (OOP) style syntax, allowing the simulation of &quot;global variables&quot; through a global singleton. This makes it easy to write themes. Touying does not rely on counter and locate to implement #pause, resulting in better performance. Touying is a community-driven project (we welcome more people to join), and it does not overly emphasize maintaining API consistency. Instead, it chooses to maintain documentation for multiple versions, providing more novel yet powerful features.  ","version":"0.4.1","tagName":"h2"},{"title":"About the Name​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.4.1/intro#about-the-name","content":" &quot;Touying&quot; is derived from the Chinese word &quot;投影&quot; (tóuyǐng), which means &quot;projection&quot; In English, it also conveys the meaning of a &quot;project&quot;. In comparison, the term &quot;beamer&quot; in LaTeX means a projector in German.  ","version":"0.4.1","tagName":"h2"},{"title":"About the Documentation​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.4.1/intro#about-the-documentation","content":" This documentation is powered by Docusaurus. We will maintain English and Chinese versions of the documentation for Touying, and for each major version, we will maintain a documentation copy. This allows you to easily refer to old versions of the Touying documentation and migrate to new versions.  Docusaurus creates a new version:  npm run docusaurus docs:version 0.y.x   ","version":"0.4.1","tagName":"h2"},{"title":"Contribution​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.4.1/intro#contribution","content":" Touying is free, open-source, and community-driven. If you're interested, you can visit GitHub anytime and raise issues or submit pull requests. We also welcome you to join the touying-typ organization.  ","version":"0.4.1","tagName":"h2"},{"title":"Gallery​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.4.1/intro#gallery","content":" Touying offers a gallery page via wiki, where you can browse elegant slides created by Touying users. You're also encouraged to contribute your own beautiful slides here!  ","version":"0.4.1","tagName":"h2"},{"title":"License​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/0.4.1/intro#license","content":" Touying is released under the MIT license. ","version":"0.4.1","tagName":"h2"},{"title":"Multi-File Architecture","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/multi-file","content":"","keywords":"","version":"0.4.1"},{"title":"Configuration and Content Separation​","type":1,"pageTitle":"Multi-File Architecture","url":"/touying/docs/0.4.1/multi-file#configuration-and-content-separation","content":" A simple Touying multi-file architecture consists of three files: a global configuration file globals.typ, a main entry file main.typ, and a content file content.typ for storing the actual content.  These three files are separated to allow both main.typ and content.typ to import globals.typ without causing circular references.  globals.typ can be used to store some global custom functions and initialize Touying themes:  // globals.typ #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.numbering)(self: s, section: &quot;1.&quot;, &quot;1.1&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #let (slide, empty-slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) // as well as some utility functions   main.typ, as the main entry point of the project, applies show rules by importing globals.typ and includes content.typ using #include:  // main.typ #import &quot;/globals.typ&quot;: * #show: init #show strong: alert #show: slides #include &quot;content.typ&quot;   content.typ is where you write the actual content:  // content.typ #import &quot;/globals.typ&quot;: * = The Section == Slide Title Hello, Touying! #focus-slide[ Focus on me. ]   ","version":"0.4.1","tagName":"h2"},{"title":"Multiple Sections​","type":1,"pageTitle":"Multi-File Architecture","url":"/touying/docs/0.4.1/multi-file#multiple-sections","content":" Implementing multiple sections is also straightforward. You only need to create a sections directory and move the content.typ file to the sections.typ directory, for example:  // main.typ #import &quot;/globals.typ&quot;: * #show: init #show strong: alert #show: slides #include &quot;sections/content.typ&quot; // #include &quot;sections/another-section.typ&quot;   And  // sections/content.typ #import &quot;/globals.typ&quot;: * = The Section == Slide Title Hello, Touying! #focus-slide[ Focus on me. ]   Now, you have learned how to use Touying to achieve a multi-file architecture for large-scale slides. ","version":"0.4.1","tagName":"h2"},{"title":"Pinit","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/integration/pinit","content":"","keywords":"","version":"0.4.1"},{"title":"Simple Example​","type":1,"pageTitle":"Pinit","url":"/touying/docs/0.4.1/integration/pinit#simple-example","content":" #import &quot;@preview/pinit:0.1.3&quot;: * #set text(size: 24pt) A simple #pin(1)highlighted text#pin(2). #pinit-highlight(1, 2) #pinit-point-from(2)[It is simple.]     Another example:    ","version":"0.4.1","tagName":"h2"},{"title":"Complex Example​","type":1,"pageTitle":"Pinit","url":"/touying/docs/0.4.1/integration/pinit#complex-example","content":"   An example of shared usage with Touying:  #import &quot;@preview/touying:0.4.1&quot;: * #import &quot;@preview/pinit:0.1.3&quot;: * #(s.page-args.paper = &quot;presentation-4-3&quot;) #let (init, slides) = utils.methods(s) #show: init #set text(size: 20pt, font: &quot;Calibri&quot;, ligatures: false) #show heading: set text(weight: &quot;regular&quot;) #show heading: set block(above: 1.4em, below: 1em) #show heading.where(level: 1): set text(size: 1.5em) // Useful functions #let crimson = rgb(&quot;#c00000&quot;) #let greybox(..args, body) = rect(fill: luma(95%), stroke: 0.5pt, inset: 0pt, outset: 10pt, ..args, body) #let redbold(body) = { set text(fill: crimson, weight: &quot;bold&quot;) body } #let blueit(body) = { set text(fill: blue) body } #let (slide, empty-slide) = utils.slides(s) #show: slides // Main body #slide(self =&gt; [ #let (uncover, only) = utils.methods(self) = Asymptotic Notation: $O$ Use #pin(&quot;h1&quot;)asymptotic notations#pin(&quot;h2&quot;) to describe asymptotic efficiency of algorithms. (Ignore constant coefficients and lower-order terms.) #pause #greybox[ Given a function $g(n)$, we denote by $O(g(n))$ the following *set of functions*: #redbold(${f(n): &quot;exists&quot; c &gt; 0 &quot;and&quot; n_0 &gt; 0, &quot;such that&quot; f(n) &lt;= c dot g(n) &quot;for all&quot; n &gt;= n_0}$) ] #pinit-highlight(&quot;h1&quot;, &quot;h2&quot;) #pause $f(n) = O(g(n))$: #pin(1)$f(n)$ is *asymptotically smaller* than $g(n)$.#pin(2) // #absolute-place(dx: 550pt, dy: 320pt, image(width: 25%, &quot;asymptotic.png&quot;)) #pause $f(n) redbold(in) O(g(n))$: $f(n)$ is *asymptotically* #redbold[at most] $g(n)$. #only(&quot;4-&quot;, pinit-line(stroke: 3pt + crimson, start-dy: -0.25em, end-dy: -0.25em, 1, 2)) #pause #block[Insertion Sort as an #pin(&quot;r1&quot;)example#pin(&quot;r2&quot;):] - Best Case: $T(n) approx c n + c' n - c''$ #pin(3) - Worst case: $T(n) approx c n + (c' \\/ 2) n^2 - c''$ #pin(4) #pinit-rect(&quot;r1&quot;, &quot;r2&quot;) #pause #pinit-place(3, dx: 15pt, dy: -15pt)[#redbold[$T(n) = O(n)$]] #pinit-place(4, dx: 15pt, dy: -15pt)[#redbold[$T(n) = O(n)$]] #pause #blueit[Q: Is $n^(3) = O(n^2)$#pin(&quot;que&quot;)? How to prove your answer#pin(&quot;ans&quot;)?] #pause #only(&quot;8-&quot;, pinit-point-to(&quot;que&quot;, fill: crimson, redbold[No.])) #only(&quot;8-&quot;, pinit-point-from(&quot;ans&quot;, body-dx: -150pt)[ Show that the equation $(3/2)^n &gt;= c$ \\ has infinitely many solutions for $n$. ]) ])    ","version":"0.4.1","tagName":"h2"},{"title":"Touying Sections","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/progress/sections","content":"","keywords":"","version":"0.4.1"},{"title":"touying-outline​","type":1,"pageTitle":"Touying Sections","url":"/touying/docs/0.4.1/progress/sections#touying-outline","content":" #touying-outline(enum-args: (:), padding: 0pt) is used to display a simple outline.  Of course, you can now just use #outline(indent: 2em, title: none).  ","version":"0.4.1","tagName":"h2"},{"title":"touying-final-sections​","type":1,"pageTitle":"Touying Sections","url":"/touying/docs/0.4.1/progress/sections#touying-final-sections","content":" #states.touying-final-sections(final-sections =&gt; ..) is used to customize the display of the outline.  ","version":"0.4.1","tagName":"h2"},{"title":"touying-progress-with-sections​","type":1,"pageTitle":"Touying Sections","url":"/touying/docs/0.4.1/progress/sections#touying-progress-with-sections","content":" #states.touying-progress-with-sections((current-sections: .., final-sections: .., current-slide-number: .., last-slide-number: ..) =&gt; ..)   This is the most powerful one, allowing you to build any complex progress display with its functionalities. ","version":"0.4.1","tagName":"h2"},{"title":"Touying Counters","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/progress/counters","content":"","keywords":"","version":"0.4.1"},{"title":"Slide Counter​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/0.4.1/progress/counters#slide-counter","content":" You can access the slide counter using states.slide-counter and display the current slide number with states.slide-counter.display().  ","version":"0.4.1","tagName":"h2"},{"title":"Last-Slide Counter​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/0.4.1/progress/counters#last-slide-counter","content":" In some cases, we may need to add an appendix to slides, leading to the requirement to freeze the last-slide counter. Therefore, a second counter is maintained here.  You can use states.last-slide-number to display the number of the last slide before the appendix.  ","version":"0.4.1","tagName":"h2"},{"title":"Progress​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/0.4.1/progress/counters#progress","content":" You can use  #states.touying-progress(ratio =&gt; ..)   to show the current progress.  ","version":"0.4.1","tagName":"h2"},{"title":"Appendix​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/0.4.1/progress/counters#appendix","content":" You can use  // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide, empty-slide) = utils.methods(s) #slide[ appendix ]   syntax to enter the appendix.  Additionally, #let s = (s.methods.appendix-in-outline)(self: s, false) can be used to hide the appendix section from the outline. ","version":"0.4.1","tagName":"h2"},{"title":"Page Layout","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/layout","content":"","keywords":"","version":"0.4.1"},{"title":"Basic Concepts​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/0.4.1/layout#basic-concepts","content":" To create stylish slides using Typst, it's essential to understand Typst's page model correctly. If you're not concerned with customizing page styles, you can choose to skip this section. However, it's still recommended to go through it.  Let's illustrate Typst's default page model through a specific example.  #let container = rect.with(height: 100%, width: 100%, inset: 0pt) #let innerbox = rect.with(stroke: (dash: &quot;dashed&quot;)) #set text(size: 30pt) #set page( paper: &quot;presentation-16-9&quot;, header: container[#innerbox[Header]], header-ascent: 30%, footer: container[#innerbox[Footer]], footer-descent: 30%, ) #place(top + right)[Margin→] #container[ #container[ #innerbox[Content] ] ]     We need to distinguish the following concepts:  Model: Typst has a model similar to the CSS Box Model, divided into Margin, Padding, and Content. However, padding is not a property of set page(..) but is obtained by manually adding #pad(..).Margin: Margins are the edges of the page, divided into top, bottom, left, and right. They are the core of Typst's page model, and all other properties are influenced by margins, especially Header and Footer. Header and Footer are actually located within the Margin.Header: The Header is the content at the top of the page, divided into container and innerbox. We can observe that the edge of the header container and padding does not align but has some space in between, which is actually header-ascent: 30%, where the percentage is relative to the margin-top. Additionally, we notice that the header innerbox is actually located at the bottom left corner of the header container, meaning innerbox defaults to #set align(left + bottom).Footer: The Footer is the content at the bottom of the page, similar to the Header but in the opposite direction.Place: The place function enables absolute positioning relative to the parent container without affecting other elements inside the parent container. It allows specifying alignment, dx, and dy, making it suitable for placing decorative elements like logos.  Therefore, to apply Typst to create slides, we only need to set:  #set page( margin: (x: 4em, y: 2em), header: align(top)[Header], footer: align(bottom)[Footer], header-ascent: 0em, footer-descent: 0em, )   However, we still need to address how the header occupies the entire page width. Here, we use negative padding to achieve this. For instance:  #let container = rect.with(stroke: (dash: &quot;dashed&quot;), height: 100%, width: 100%, inset: 0pt) #let innerbox = rect.with(fill: rgb(&quot;#d0d0d0&quot;)) #let margin = (x: 4em, y: 2em) // negative padding for header and footer #let negative-padding = pad.with(x: -margin.x, y: 0em) #set text(size: 30pt) #set page( paper: &quot;presentation-16-9&quot;, margin: margin, header: negative-padding[#container[#align(top)[#innerbox(width: 100%)[Header]]]], header-ascent: 0em, footer: negative-padding[#container[#align(bottom)[#innerbox(width: 100%)[Footer]]]], footer-descent: 0em, ) #place(top + right)[↑Margin→] #container[ #container[ #innerbox[Content] ] ]     ","version":"0.4.1","tagName":"h2"},{"title":"Page Management​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/0.4.1/layout#page-management","content":" Since modifying page parameters using the set page(..) command in Typst creates a new page instead of modifying the current one, Touying chooses to maintain a s.page-args member variable and a s.padding member variable. These parameters are only applied when Touying creates a new slide, so users only need to focus on s.page-args and s.padding.  For example, the previous example can be modified as follows:  #(s.page-args += ( margin: (x: 4em, y: 2em), header: align(top)[Header], footer: align(bottom)[Footer], header-ascent: 0em, footer-descent: 0em, ))   Touying automatically detects the value of margin.x and adds negative padding to the header if self.full-header == true.  Similarly, if you're unsatisfied with the header or footer style of a particular theme, you can change it using:  #(s.page-args.footer = [Custom Footer])   However, it's essential to note that if you change page parameters in this way, you need to place it before #let (slide, empty-slide) = utils.slides(s), or you'll have to call #let (slide, empty-slide) = utils.slides(s) again.  Warning Therefore, you should not use the set page(..) command directly but instead modify the s.page-args member variable internally.  This approach also allows us to query the current page parameters in real-time using s.page-args, which is useful for functions that need to obtain margins or the current page's background color, such as transparent-cover. This is partially equivalent to context get rule and is actually more convenient to use.  ","version":"0.4.1","tagName":"h2"},{"title":"Application: Adding a Logo​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/0.4.1/layout#application-adding-a-logo","content":" Adding a logo to slides is a very common but also a very versatile requirement. The difficulty lies in the fact that the required size and position of the logo often vary from person to person. Therefore, most of Touying's themes do not include configuration options for logos. But with the concepts of page layout mentioned in this section, we know that we can use the place function in the header or footer to place a logo image.  For example, suppose we decide to add the GitHub icon to the metropolis theme. We can implement it like this:  #import &quot;@preview/touying:0.4.1&quot;: * #import &quot;@preview/octique:0.1.0&quot;: * #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;) #(s.page-args.header = self =&gt; { // display the original header utils.call-or-display(self, s.page-args.header) // place logo at the top-right place(top + right, dx: -0.5em, dy: 0.3em)[ #octique(&quot;mark-github&quot;, color: rgb(&quot;#fafafa&quot;), width: 1.5em, height: 1.5em) ] }) #let (init, slide) = utils.methods(s) #show: init #slide(title: [Title])[ Logo example. ]     Here, utils.call-or-display(self, body) can be used to display body as content or a callback function in the form self =&gt; content.  ","version":"0.4.1","tagName":"h2"},{"title":"Page Columns​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/0.4.1/layout#page-columns","content":" If you need to divide the page into two or three columns, you can use the compose feature provided by the default slide function in Touying. The simplest example is as follows:  #slide[ First column. ][ Second column. ]     If you need to change the way columns are composed, you can modify the composer parameter of slide. The default parameter is utils.side-by-side.with(columns: auto, gutter: 1em). If we want the left column to occupy the remaining width, we can use  #slide(composer: (1fr, auto))[ First column. ][ Second column. ]    ","version":"0.4.1","tagName":"h2"},{"title":"Sections and Subsections","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/sections","content":"","keywords":"","version":"0.4.1"},{"title":"Structure​","type":1,"pageTitle":"Sections and Subsections","url":"/touying/docs/0.4.1/sections#structure","content":" Similar to Beamer, Touying also has the concept of sections and subsections.  Generally, level 1, level 2, and level 3 headings correspond to section, subsection, and title, respectively, as in the dewdrop theme.  #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.dewdrop.register() #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Section == Subsection === Title Hello, Touying!     However, often we don't need subsections, and we can use level 1 and level 2 headings to correspond to section and title, as in the university theme.  #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.university.register() #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Section == Title Hello, Touying!     In fact, we can control this behavior through the slide-level parameter of the slides function. slide-level represents the complexity of the nested structure, starting from 0. For example, #show: slides.with(slide-level: 2) is equivalent to the section, subsection, and title structure; while #show: slides.with(slide-level: 1) is equivalent to the section and title structure.  ","version":"0.4.1","tagName":"h2"},{"title":"Numbering​","type":1,"pageTitle":"Sections and Subsections","url":"/touying/docs/0.4.1/sections#numbering","content":" To add numbering to sections and subsections, we simply use:  #let s = (s.methods.numbering)(self: s, section: &quot;1.&quot;, &quot;1.1&quot;)   This sets the default numbering to 1.1, with the section corresponding to 1..  ","version":"0.4.1","tagName":"h2"},{"title":"Table of Contents​","type":1,"pageTitle":"Sections and Subsections","url":"/touying/docs/0.4.1/sections#table-of-contents","content":" Displaying a table of contents in Touying is straightforward:  #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.simple.register() #let (init, slides, alert, touying-outline) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides.with(slide-level: 2) = Section == Subsection === Title ==== Table of contents #touying-outline()     Where the definition of touying-outline() is:  #let touying-outline(enum-args: (:), padding: 0pt) = { .. }   You can modify the parameters of the internal enum through enum-args.  Of course, you can also use Typst's native outline:  #outline(title: none, indent: 2em)     If you have complex custom requirements for the table of contents, you can use:  #states.touying-final-sections(sections =&gt; ..)   As done in the dewdrop theme. ","version":"0.4.1","tagName":"h2"},{"title":"Aqua Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/themes/aqua","content":"","keywords":"","version":"0.4.1"},{"title":"Initialization​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/0.4.1/themes/aqua#initialization","content":" You can initialize it with the following code:  #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.aqua.register(aspect-ratio: &quot;16-9&quot;, lang: &quot;en&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, outline-slide, focus-slide) = utils.slides(s) #show: slides   Where register takes parameters:  aspect-ratio: The aspect ratio of slides, either &quot;16-9&quot; or &quot;4-3&quot;, default is &quot;16-9&quot;.footer: Content shown on the right side of the footer, default is states.slide-counter.display().lang: Language configuration, currently supports &quot;en&quot; and &quot;zh&quot;, default is &quot;en&quot;.  Aqua theme also provides an #alert[..] function, which you can utilize with #show strong: alert using *alert text* syntax.  ","version":"0.4.1","tagName":"h2"},{"title":"Color Themes​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/0.4.1/themes/aqua#color-themes","content":" Aqua by default uses:  #let s = (s.methods.colors)( self: s, primary: rgb(&quot;#003F88&quot;), primary-light: rgb(&quot;#2159A5&quot;), primary-lightest: rgb(&quot;#F2F4F8&quot;),   color themes, which you can modify by #let s = (s.methods.colors)(self: s, ..).  ","version":"0.4.1","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/0.4.1/themes/aqua#slide-function-family","content":" Aqua theme offers a series of custom slide functions:  #title-slide(..args)   title-slide will read information from self.info for display.    #let outline-slide(self: none, enum-args: (:), leading: 50pt)   Display an outline slide.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // Aqua theme title: auto, )[ ... ]   A default ordinary slide function with title and footer, where title defaults to the current section title.    #focus-slide[ ... ]   Used to draw the audience's attention. The background color is self.colors.primary.    #new-section-slide(title)   Start a new section with the given title.  ","version":"0.4.1","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/0.4.1/themes/aqua#slides-function","content":" The slides function has parameters:  title-slide: Default is true.outline-slide: Default is true.slide-level: Default is 1.  They can be set via #show: slides.with(..).  PS: The outline title can be modified via #(s.outline-title = [Outline]).  Additionally, you can disable the automatic inclusion of new-section-slide functionality by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.aqua.register(aspect-ratio: &quot;16-9&quot;, lang: &quot;en&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, outline-slide, focus-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.4.1","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/0.4.1/themes/aqua#example","content":" #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.aqua.register(aspect-ratio: &quot;16-9&quot;, lang: &quot;en&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, outline-slide, focus-slide) = utils.slides(s) #show: slides = The Section == Slide Title #slide[ #lorem(40) ] #focus-slide[ Another variant with primary color in background... ] == Summary #align(center + horizon)[ #set text(size: 3em, weight: &quot;bold&quot;, s.colors.primary) THANKS FOR ALL ]  ","version":"0.4.1","tagName":"h2"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/start","content":"","keywords":"","version":"0.4.1"},{"title":"More Complex Examples​","type":1,"pageTitle":"Getting Started","url":"/touying/docs/0.4.1/start#more-complex-examples","content":" In fact, Touying provides various styles for slide writing. You can also use the #slide[..] syntax to access more powerful features provided by Touying.    Touying offers many built-in themes to easily create beautiful slides. For example, in this case:  #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;)   you can use the university theme. For more detailed tutorials on themes, you can refer to the following sections.  #import &quot;@preview/touying:0.4.1&quot;: * #import &quot;@preview/cetz:0.2.2&quot; #import &quot;@preview/fletcher:0.4.4&quot; as fletcher: node, edge #import &quot;@preview/ctheorems:1.1.2&quot;: * // cetz and fletcher bindings for touying #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: fletcher.diagram, cover: fletcher.hide) // Register university theme // You can replace it with other themes and it can still work normally #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) // Set the numbering of section and subsection #let s = (s.methods.numbering)(self: s, section: &quot;1.&quot;, &quot;1.1&quot;) // Global information configuration #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) // Pdfpc configuration // typst query --root . ./example.typ --field value --one &quot;&lt;pdfpc-file&gt;&quot; &gt; ./example.pdfpc #let s = (s.methods.append-preamble)(self: s, pdfpc.config( duration-minutes: 30, start-time: datetime(hour: 14, minute: 10, second: 0), end-time: datetime(hour: 14, minute: 40, second: 0), last-minutes: 5, note-font-size: 12, disable-markdown: false, default-transition: ( type: &quot;push&quot;, duration-seconds: 2, angle: ltr, alignment: &quot;vertical&quot;, direction: &quot;inward&quot;, ), )) // Theorems configuration by ctheorems #show: thmrules.with(qed-symbol: $square$) #let theorem = thmbox(&quot;theorem&quot;, &quot;Theorem&quot;, fill: rgb(&quot;#eeffee&quot;)) #let corollary = thmplain( &quot;corollary&quot;, &quot;Corollary&quot;, base: &quot;theorem&quot;, titlefmt: strong ) #let definition = thmbox(&quot;definition&quot;, &quot;Definition&quot;, inset: (x: 1.2em, top: 1em)) #let example = thmplain(&quot;example&quot;, &quot;Example&quot;).with(numbering: none) #let proof = thmproof(&quot;proof&quot;, &quot;Proof&quot;) // Extract methods #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert // Extract slide functions #let (slide, empty-slide) = utils.slides(s) #show: slides = Animation == Simple Animation We can use `#pause` to #pause display something later. #pause Just like this. #meanwhile Meanwhile, #pause we can also use `#meanwhile` to #pause display other content synchronously. == Complex Animation #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) At subslide #self.subslide, we can use #uncover(&quot;2-&quot;)[`#uncover` function] for reserving space, use #only(&quot;2-&quot;)[`#only` function] for not reserving space, #alternatives[call `#only` multiple times \\u{2717}][use `#alternatives` function #sym.checkmark] for choosing one of the alternatives. ]) == Math Equation Animation Touying equation with `pause`: #touying-equation(` f(x) &amp;= pause x^2 + 2x + 1 \\ &amp;= pause (x + 1)^2 \\ `) #meanwhile Here, #pause we have the expression of $f(x)$. #pause By factorizing, we can obtain this result. == CeTZ Animation CeTZ Animation in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) == Fletcher Animation Fletcher Animation in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) = Theorems == Prime numbers #definition[ A natural number is called a #highlight[_prime number_] if it is greater than 1 and cannot be written as the product of two smaller natural numbers. ] #example[ The numbers $2$, $3$, and $17$ are prime. @cor_largest_prime shows that this list is not exhaustive! ] #theorem(&quot;Euclid&quot;)[ There are infinitely many primes. ] #proof[ Suppose to the contrary that $p_1, p_2, dots, p_n$ is a finite enumeration of all primes. Set $P = p_1 p_2 dots p_n$. Since $P + 1$ is not in our list, it cannot be prime. Thus, some prime factor $p_j$ divides $P + 1$. Since $p_j$ also divides $P$, it must divide the difference $(P + 1) - P = 1$, a contradiction. ] #corollary[ There is no largest prime number. ] &lt;cor_largest_prime&gt; #corollary[ There are infinitely many composite numbers. ] #theorem[ There are arbitrarily long stretches of composite numbers. ] #proof[ For any $n &gt; 2$, consider $ n! + 2, quad n! + 3, quad ..., quad n! + n #qedhere $ ] = Others == Side-by-side #slide(composer: (1fr, 1fr))[ First column. ][ Second column. ] == Multiple Pages #lorem(200) // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide, empty-slide) = utils.slides(s) == Appendix #slide[ Please pay attention to the current slide number. ]     Touying offers many built-in themes to easily create beautiful slides. For example, in this case:  #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;)   you can use the university theme. For more detailed tutorials on themes, you can refer to the following sections. ","version":"0.4.1","tagName":"h2"},{"title":"Dewdrop Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/themes/dewdrop","content":"","keywords":"","version":"0.4.1"},{"title":"Initialization​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.4.1/themes/dewdrop#initialization","content":" You can initialize it using the following code:  #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.dewdrop.register( aspect-ratio: &quot;16-9&quot;, footer: [Dewdrop], navigation: &quot;mini-slides&quot;, // navigation: &quot;sidebar&quot;, // navigation: none, ) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides   The register function takes the following parameters:  aspect-ratio: The aspect ratio of the slides, either &quot;16-9&quot; or &quot;4-3,&quot; defaulting to &quot;16-9.&quot;navigation: The navigation bar style, which can be &quot;sidebar&quot;, &quot;mini-slides&quot;, or none, defaulting to &quot;sidebar&quot;.sidebar: Sidebar navigation settings, defaulting to (width: 10em).mini-slides: Mini-slides settings, defaulting to (height: 2em, x: 2em, section: false, subsection: true). height: The height of mini-slides, defaulting to 2em.x: Padding on the x-axis for mini-slides, defaulting to 2em.section: Whether to display slides after the section and before the subsection, defaulting to false.subsection: Whether to split mini-slides based on subsections or compress them into one line, defaulting to true. footer: Content displayed in the footer, defaulting to [], or it can be passed as a function like self =&gt; self.info.author.footer-right: Content displayed on the right side of the footer, defaulting to states.slide-counter.display() + &quot; / &quot; + states.last-slide-number.primary: Primary color, defaulting to rgb(&quot;#0c4842&quot;).alpha: Transparency, defaulting to 70%.  The Dewdrop theme also provides an #alert[..] function, which you can use with #show strong: alert using the *alert text* syntax.  ","version":"0.4.1","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.4.1/themes/dewdrop#color-theme","content":" Dewdrop uses the following default color theme:  #let s = (s.methods.colors)( self: s, neutral-darkest: rgb(&quot;#000000&quot;), neutral-dark: rgb(&quot;#202020&quot;), neutral-light: rgb(&quot;#f3f3f3&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), primary: primary, )   You can modify this color theme using #let s = (s.methods.colors)(self: s, ..).  ","version":"0.4.1","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.4.1/themes/dewdrop#slide-function-family","content":" The Dewdrop theme provides a variety of custom slide functions:  #title-slide(extra: none, ..args)   title-slide reads information from self.info for display, and you can also pass in an extra parameter to display additional information.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // Dewdrop theme footer: auto, )[ ... ]   A default slide with navigation and footer, where the footer is what you set.    #focus-slide[ ... ]   Used to draw attention, with the background color set to self.colors.primary.  ","version":"0.4.1","tagName":"h2"},{"title":"Special Functions​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.4.1/themes/dewdrop#special-functions","content":" #d-outline(enum-args: (:), list-args: (:), cover: true)   Displays the current table of contents. The cover parameter specifies whether to hide sections in an inactive state.    #d-sidebar()   An internal function used to display the sidebar.    #d-mini-slides()   An internal function used to display mini-slides.  ","version":"0.4.1","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.4.1/themes/dewdrop#slides-function","content":" The slides function has the following parameters:  title-slide: Defaults to true.outline-slide: Defaults to true.slide-level: Defaults to 2.  You can set these using #show: slides.with(..).  PS: You can modify the outline title using #(s.outline-title = [Outline]).  And the function of automatically adding new-section-slide can be turned off by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.dewdrop.register(aspect-ratio: &quot;16-9&quot;, footer: [Dewdrop]) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.4.1","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/0.4.1/themes/dewdrop#example","content":" #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.dewdrop.register( aspect-ratio: &quot;16-9&quot;, footer: [Dewdrop], navigation: &quot;mini-slides&quot;, // navigation: none, ) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides = Section A == Subsection A.1 #slide[ A slide with equation: $ x_(n+1) = (x_n + a/x_n) / 2 $ ] == Subsection A.2 #slide[ A slide without a title but with *important* infos ] = Section B == Subsection B.1 #slide[ #lorem(80) ] #focus-slide[ Wake up! ] == Subsection B.2 #slide[ We can use `#pause` to #pause display something later. #pause Just like this. #meanwhile Meanwhile, #pause we can also use `#meanwhile` to #pause display other content synchronously. ] // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide, empty-slide) = utils.slides(s) = Appendix === Appendix #slide[ Please pay attention to the current slide number. ]  ","version":"0.4.1","tagName":"h2"},{"title":"Metropolis Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/themes/metropolis","content":"","keywords":"","version":"0.4.1"},{"title":"Initialization​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.4.1/themes/metropolis#initialization","content":" You can initialize it using the following code:  #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides   The register function takes the following parameters:  aspect-ratio: The aspect ratio of the slides, either &quot;16-9&quot; or &quot;4-3,&quot; defaulting to &quot;16-9.&quot;header: Content displayed in the header, defaulting to states.current-section-title, or it can be passed as a function like self =&gt; self.info.title.footer: Content displayed in the footer, defaulting to [], or it can be passed as a function like self =&gt; self.info.author.footer-right: Content displayed on the right side of the footer, defaulting to states.slide-counter.display() + &quot; / &quot; + states.last-slide-number.footer-progress: Whether to show the progress bar at the bottom of the slide, defaulting to true.  The Metropolis theme also provides an #alert[..] function, which you can use with #show strong: alert using the *alert text* syntax.  ","version":"0.4.1","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.4.1/themes/metropolis#color-theme","content":" Metropolis uses the following default color theme:  #let s = (s.methods.colors)( self: s, neutral-lightest: rgb(&quot;#fafafa&quot;), primary-dark: rgb(&quot;#23373b&quot;), secondary-light: rgb(&quot;#eb811b&quot;), secondary-lighter: rgb(&quot;#d6c6b7&quot;), )   You can modify this color theme using #let s = (s.methods.colors)(self: s, ..).  ","version":"0.4.1","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.4.1/themes/metropolis#slide-function-family","content":" The Metropolis theme provides a variety of custom slide functions:  #title-slide(extra: none, ..args)   title-slide reads information from self.info for display, and you can also pass in an extra parameter to display additional information.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // metropolis theme title: auto, footer: auto, align: horizon, )[ ... ]   A default slide with headers and footers, where the title defaults to the current section title, and the footer is what you set.    #focus-slide[ ... ]   Used to draw attention, with the background color set to self.colors.primary-dark.    #new-section-slide(short-title: auto, title)   Creates a new section with the given title.  ","version":"0.4.1","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.4.1/themes/metropolis#slides-function","content":" The slides function has the following parameters:  title-slide: Defaults to true.outline-slide: Defaults to true.slide-level: Defaults to 1.  You can set these using #show: slides.with(..).  PS: You can modify the outline title using #(s.outline-title = [Outline]).  And the function of automatically adding new-section-slide can be turned off by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slide, slides, title-slide, new-section-slide, focus-slide, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.4.1","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/0.4.1/themes/metropolis#example","content":" #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #set text(font: &quot;Fira Sans&quot;, weight: &quot;light&quot;, size: 20pt) #show math.equation: set text(font: &quot;Fira Math&quot;) #set strong(delta: 100) #set par(justify: true) #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides = First Section #slide[ A slide without a title but with some *important* information. ] == A long long long long long long long long long long long long long long long long long long long long long long long long Title #slide[ A slide with equation: $ x_(n+1) = (x_n + a/x_n) / 2 $ #lorem(200) ] = Second Section #focus-slide[ Wake up! ] == Simple Animation #slide[ A simple #pause dynamic slide with #alert[alert] #pause text. ] // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide, empty-slide) = utils.slides(s) = Appendix #slide[ Appendix. ]  ","version":"0.4.1","tagName":"h2"},{"title":"Simple Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/themes/simple","content":"","keywords":"","version":"0.4.1"},{"title":"Initialization​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/0.4.1/themes/simple#initialization","content":" You can initialize it using the following code:  #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;, footer: [Simple slides]) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide, title-slide, centered-slide, focus-slide) = utils.slides(s) #show: slides   The register function takes the following parameters:  aspect-ratio: The aspect ratio of the slides, either &quot;16-9&quot; or &quot;4-3,&quot; defaulting to &quot;16-9.&quot;footer: Content displayed in the footer, defaulting to [], or it can be passed as a function like self =&gt; self.info.author.footer-right: Content displayed on the right side of the footer, defaulting to states.slide-counter.display() + &quot; / &quot; + states.last-slide-number.background: Background color, defaulting to white.foreground: Text color, defaulting to black.primary: Theme color, defaulting to aqua.darken(50%).  ","version":"0.4.1","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/0.4.1/themes/simple#slide-function-family","content":" The Simple theme provides a variety of custom slide functions:  #centered-slide(section: ..)[ ... ]   A slide with content centered, and the section parameter can be used to create a new section.    #title-slide[ ... ]   Similar to centered-slide, this is provided for consistency with Polylux syntax.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // simple theme args footer: auto, )[ ... ]   A default slide with headers and footers, where the header corresponds to the current section, and the footer is what you set.    #focus-slide(foreground: ..., background: ...)[ ... ]   Used to draw attention, it optionally accepts a foreground color (defaulting to white) and a background color (defaulting to auto, i.e., self.colors.primary).  ","version":"0.4.1","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/0.4.1/themes/simple#slides-function","content":" The slides function has the following parameter:  slide-level: Defaults to 1.  You can set it using #show: slides.with(..).  And the function of automatically adding new-section-slide can be turned off by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;, footer: [Simple slides]) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide, title-slide, centered-slide, focus-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.4.1","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/0.4.1/themes/simple#example","content":" #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;, footer: [Simple slides]) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide, title-slide, centered-slide, focus-slide) = utils.slides(s) #show: slides #title-slide[ = Keep it simple! #v(2em) Alpha #footnote[Uni Augsburg] #h(1em) Bravo #footnote[Uni Bayreuth] #h(1em) Charlie #footnote[Uni Chemnitz] #h(1em) July 23 ] == First slide #slide[ #lorem(20) ] #focus-slide[ _Focus!_ This is very important. ] = Let's start a new section! == Dynamic slide #slide[ Did you know that... #pause ...you can see the current section at the top of the slide? ]  ","version":"0.4.1","tagName":"h2"},{"title":"Fit to Height / Width","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/utilities/fit-to","content":"","keywords":"","version":"0.4.1"},{"title":"Fit to Height​","type":1,"pageTitle":"Fit to Height / Width","url":"/touying/docs/0.4.1/utilities/fit-to#fit-to-height","content":" If you need to make an image fill the remaining slide height, you can try the fit-to-height function:  #utils.fit-to-height(1fr)[BIG]   Function definition:  #let fit-to-height( width: none, prescale-width: none, grow: true, shrink: true, height, body ) = { .. }   Parameters:  width: If specified, this will determine the width of the content after scaling. So, if you want the scaled content to fill half of the slide width, you can use width: 50%.prescale-width: This parameter allows you to make Typst's layout assume that the given content is to be laid out in a container of a certain width before scaling. For example, you can use prescale-width: 200% assuming the slide's width is twice the original.grow: Whether it can grow, default is true.shrink: Whether it can shrink, default is true.height: The specified height.body: The specific content.  ","version":"0.4.1","tagName":"h2"},{"title":"Fit to Width​","type":1,"pageTitle":"Fit to Height / Width","url":"/touying/docs/0.4.1/utilities/fit-to#fit-to-width","content":" If you need to limit the title width to exactly fill the slide width, you can try the fit-to-width function:  #utils.fit-to-width(1fr)[#lorem(20)]   Function definition:  #let fit-to-width(grow: true, shrink: true, width, body) = { .. }   Parameters:  grow: Whether it can grow, default is true.shrink: Whether it can shrink, default is true.width: The specified width.body: The specific content. ","version":"0.4.1","tagName":"h2"},{"title":"University Theme","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/themes/university","content":"","keywords":"","version":"0.4.1"},{"title":"Initialization​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.4.1/themes/university#initialization","content":" You can initialize the University theme using the following code:  #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) #show: slides   The register function accepts the following parameters:  aspect-ratio: Sets the aspect ratio of the slides to &quot;16-9&quot; or &quot;4-3,&quot; with the default being &quot;16-9.&quot;progress-bar: Controls whether the progress bar at the top of each slide is displayed, with the default being true.display-current-section: Whether to display the current section.footer-columns: The width of the footer in the bottom three columns, the default is (25%, 1fr, 25%).footer-a: The first column, default is self =&gt; self.info.author.footer-b: Second column, default is self =&gt; if self.info.short-title == auto { self.info.title } else { self.info.short-title }.footer-c: third column, default is  self =&gt; { h(1fr) utils.info-date(self) h(1fr) states.slide-counter.display() + &quot; / &quot; + states.last-slide-number h(1fr) }   Additionally, the University theme provides an #alert[..] function, which you can use with the #show strong: alert syntax for emphasizing text with *alert text*.  ","version":"0.4.1","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.4.1/themes/university#color-theme","content":" The University theme defaults to the following color theme:  #let s = (s.methods.colors)( self: s, primary: rgb(&quot;#04364A&quot;), secondary: rgb(&quot;#176B87&quot;), tertiary: rgb(&quot;#448C95&quot;), )   You can modify this color theme using #let s = (s.methods.colors)(self: s, ..).  ","version":"0.4.1","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.4.1/themes/university#slide-function-family","content":" The University theme provides a series of custom slide functions:  ","version":"0.4.1","tagName":"h2"},{"title":"Title Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.4.1/themes/university#title-slide","content":" #title-slide(logo: none, authors: none, ..args)   The title-slide function reads information from self.info for display. You can also pass the logo parameter and an array-type authors parameter.  ","version":"0.4.1","tagName":"h3"},{"title":"Regular Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.4.1/themes/university#regular-slide","content":" #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // university theme title: none, subtitle: none, header: none, footer: auto, )[ ... ]   The default slide function with a title and footer. The title defaults to the current section title, and the footer is set as per your configuration.  ","version":"0.4.1","tagName":"h3"},{"title":"Focus Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.4.1/themes/university#focus-slide","content":" #focus-slide(background-img: ..., background-color: ...)[ ... ]   Used to capture the audience's attention. The default background color is self.colors.primary.  ","version":"0.4.1","tagName":"h3"},{"title":"Matrix Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.4.1/themes/university#matrix-slide","content":" #matrix-slide(columns: ..., rows: ...)[ ... ][ ... ]   Refer to the documentation.  ","version":"0.4.1","tagName":"h3"},{"title":"slides Function​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.4.1/themes/university#slides-function","content":" The slides function has parameters:  title-slide: Defaults to true.slide-level: Defaults to 1.  You can set these parameters using #show: slides.with(..).  And the function of automatically adding new-section-slide can be turned off by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.4.1","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"University Theme","url":"/touying/docs/0.4.1/themes/university#example","content":" #import &quot;@preview/touying:0.4.1&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) #show: slides.with(title-slide: false) #title-slide(authors: ([Author A], [Author B])) = The Section == Slide Title #slide[ #lorem(40) ] #slide(subtitle: emph[What is the problem?])[ #lorem(40) ] #focus-slide[ Another variant with primary color in background... ] #matrix-slide[ left ][ middle ][ right ] #matrix-slide(columns: 1)[ top ][ bottom ] #matrix-slide(columns: (1fr, 2fr, 1fr), ..(lorem(8),) * 9)  ","version":"0.4.1","tagName":"h2"},{"title":"Object-Oriented Programming","type":0,"sectionRef":"#","url":"/touying/docs/0.4.1/utilities/oop","content":"Object-Oriented Programming Touying provides some convenient utility functions for object-oriented programming. #let call-or-display(self, it) = { if type(it) == function { return it(self) } else { return it } } Call or display as-is. #let methods(self) = { .. } Used to bind self to methods and return, very commonly used.","keywords":"","version":"0.4.1"},{"title":"Changelog","type":0,"sectionRef":"#","url":"/touying/docs/next/changelog","content":"","keywords":"","version":"Next"},{"title":"v0.4.2​","type":1,"pageTitle":"Changelog","url":"/touying/docs/next/changelog#v042","content":" theme(metropolis): decoupled text color with neutral-dark (Breaking change)feat: add mark-style uncover, only and alternativesfeat: add warning for styled block for slidesfeat: add warning for touying-temporary-markfeat: add markup-text for speaker-notefix: fix bug of slides  ","version":"Next","tagName":"h2"},{"title":"v0.4.1​","type":1,"pageTitle":"Changelog","url":"/touying/docs/next/changelog#v041","content":" ","version":"Next","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Changelog","url":"/touying/docs/next/changelog#features","content":" feat: support builtin outline and bookmarkfeat: support speaker note for dual-screenfeat: add touying-mitex functionfeat: touying offers a gallery page via wiki  ","version":"Next","tagName":"h3"},{"title":"Fixes​","type":1,"pageTitle":"Changelog","url":"/touying/docs/next/changelog#fixes","content":" fix: add outline-slide for dewdrop themefix: fix regression of default value &quot;auto&quot; for repeat  ","version":"Next","tagName":"h3"},{"title":"Miscellaneous Improvements​","type":1,"pageTitle":"Changelog","url":"/touying/docs/next/changelog#miscellaneous-improvements","content":" feat: add list support for touying-outline functionfeat: add auto-reset-footnotefeat: add freeze-in-empty-page for better page counterfeat: add ..args for register method to capture unused arguments  ","version":"Next","tagName":"h3"},{"title":"v0.4.0​","type":1,"pageTitle":"Changelog","url":"/touying/docs/next/changelog#v040","content":" ","version":"Next","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Changelog","url":"/touying/docs/next/changelog#features-1","content":" feat: support #footnote[] for all themes.feat: access subslide and repeat in footer and header by self =&gt; self.subslide.feat: support numbered theorem environments by ctheorems.feat: support numbering for sections and subsections.  ","version":"Next","tagName":"h3"},{"title":"Fixes​","type":1,"pageTitle":"Changelog","url":"/touying/docs/next/changelog#fixes-1","content":" fix: make nested includes work correctly.fix: disable multi-page slides from creating the same section multiple times.  ","version":"Next","tagName":"h3"},{"title":"Breaking changes​","type":1,"pageTitle":"Changelog","url":"/touying/docs/next/changelog#breaking-changes","content":" refactor: remove self.padding and add self.full-header self.full-footer config.  ","version":"Next","tagName":"h2"},{"title":"v0.3.3​","type":1,"pageTitle":"Changelog","url":"/touying/docs/next/changelog#v033","content":" template: move template to touying-aqua package, make Touying searchable in Typst Universe Packagesthemes: fix bugs in university and dewdrop themefeat: make set-show rule work without setting parameterfeat: make composer parameter more simplerfeat: add empty-slide function  ","version":"Next","tagName":"h2"},{"title":"v0.3.2​","type":1,"pageTitle":"Changelog","url":"/touying/docs/next/changelog#v032","content":" fix critical bug: fix is-sequence function, make grid and table work correctly in touyingtheme: add aqua theme, thanks for pride7theme: make university theme more configurablerefactor: don't export variable s by default anymore, it will be extracted by register function (Breaking Change)meta: add categories and template config to typst.toml for Typst 0.11  ","version":"Next","tagName":"h2"},{"title":"v0.3.1​","type":1,"pageTitle":"Changelog","url":"/touying/docs/next/changelog#v031","content":" fix some typosfix slide-level bugfix bug of pdfpc label  ","version":"Next","tagName":"h2"},{"title":"v0.3.0​","type":1,"pageTitle":"Changelog","url":"/touying/docs/next/changelog#v030","content":" ","version":"Next","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Changelog","url":"/touying/docs/next/changelog#features-2","content":" better show-slides mode.support align and pad.  ","version":"Next","tagName":"h3"},{"title":"Documentation​","type":1,"pageTitle":"Changelog","url":"/touying/docs/next/changelog#documentation","content":" Add more detailed documentation.  ","version":"Next","tagName":"h3"},{"title":"Refactor​","type":1,"pageTitle":"Changelog","url":"/touying/docs/next/changelog#refactor","content":" simplify theme.  ","version":"Next","tagName":"h3"},{"title":"Fix​","type":1,"pageTitle":"Changelog","url":"/touying/docs/next/changelog#fix","content":" fix many bugs.  ","version":"Next","tagName":"h3"},{"title":"v0.2.1​","type":1,"pageTitle":"Changelog","url":"/touying/docs/next/changelog#v021","content":" ","version":"Next","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Changelog","url":"/touying/docs/next/changelog#features-3","content":" Touying-reducer: support cetz and fletcher animationuniversity theme: add university theme  ","version":"Next","tagName":"h3"},{"title":"Fix​","type":1,"pageTitle":"Changelog","url":"/touying/docs/next/changelog#fix-1","content":" fix footer progress in metropolis themefix some bugs in simple and dewdrop themesfix bug that outline does not display more than 4 sections  ","version":"Next","tagName":"h3"},{"title":"v0.2.0​","type":1,"pageTitle":"Changelog","url":"/touying/docs/next/changelog#v020","content":" Object-oriented programming: Singleton s, binding methods utils.methods(s) and (self: obj, ..) =&gt; {..} methods.Page arguments management: Instead of using #set page(..), you should use self.page-args to retrieve or set page parameters, thereby avoiding unnecessary creation of new pages.#pause for sequence content: You can use #pause at the outermost level of a slide, including inline and list.#pause for layout functions: You can use the composer parameter to add yourself layout function like utils.side-by-side, and simply use multiple pos parameters like #slide[..][..].#meanwhile for synchronous display: Provide a #meanwhile for resetting subslides counter.#pause and #meanwhile for math equation: Provide a #touying-equation(&quot;x + y pause + z&quot;) for math equation animations.Slides: Create simple slides using standard headings.Callback-style uncover, only and alternatives: Based on the concise syntax provided by Polylux, allow precise control of the timing for displaying content. You should manually control the number of subslides using the repeat parameter. Transparent cover: Enable transparent cover using oop syntax like #let s = (s.methods.enable-transparent-cover)(self: s).Handout mode: enable handout mode by #let s = (s.methods.enable-handout-mode)(self: s).Fit-to-width and fit-to-height: Fit-to-width for title in header and fit-to-height for image. utils.fit-to-width(grow: true, shrink: true, width, body)utils.fit-to-height(width: none, prescale-width: none, grow: true, shrink: true, height, body) Slides counter: states.slide-counter.display() + &quot; / &quot; + states.last-slide-number and states.touying-progress(ratio =&gt; ..).Appendix: Freeze the last-slide-number to prevent the slide number from increasing further.Sections: Touying's built-in section support can be used to display the current section title and show progress. section and subsection parameter in #slide to register a new section or subsection.states.current-section-title to get the current section.states.touying-outline or s.methods.touying-outline to display a outline of sections.states.touying-final-sections(sections =&gt; ..) for custom outline display.states.touying-progress-with-sections((current-sections: .., final-sections: .., current-slide-number: .., last-slide-number: ..) =&gt; ..) for powerful progress display. Navigation bar: Navigation bar like here by states.touying-progress-with-sections(..), in dewdrop theme.Pdfpc: pdfpc support and export .pdfpc file without external tool by typst query command simply. ","version":"Next","tagName":"h2"},{"title":"Code Style","type":0,"sectionRef":"#","url":"/touying/docs/next/code-styles","content":"","keywords":"","version":"Next"},{"title":"Simple Style​","type":1,"pageTitle":"Code Style","url":"/touying/docs/next/code-styles#simple-style","content":" If we only need simplicity, we can directly input content under the heading, just like writing a normal Typst document. The heading here serves to divide the pages, and we can use commands like #pause to achieve animation effects.  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.simple.register() #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     You can use an empty heading == to create a new page. This skill also helps clear the continuation of the previous title.  PS: We can use the #slides-end marker to signify the end of #show: slides.  ","version":"Next","tagName":"h2"},{"title":"Block Style​","type":1,"pageTitle":"Code Style","url":"/touying/docs/next/code-styles#block-style","content":" Many times, using simple style alone cannot achieve all the functions we need. For more powerful features and clearer structure, we can also use block style in the form of #slide[...]. The #slide function needs to be unpacked using the syntax #let (slide, empty-slide) = utils.slides(s) to be used correctly after #show: slides.  For example, the previous example can be transformed into:  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.simple.register() #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Title == First Slide #slide[ Hello, Touying! #pause Hello, Typst! ]   and #empty-slide[] to create an empty slide without header and footer.  There are many advantages to doing this:  Many times, we not only need the default #slide[...] but also special slide functions like #focus-slide[...].Different themes' #slide[...] functions may have more parameters than the default, such as the university theme's #slide[...] function having a subtitle parameter.Only slide functions can use the callback-style content block to achieve complex animation effects with #only and #uncover functions.It has a clearer structure. By identifying #slide[...] blocks, we can easily distinguish the specific pagination effects of slides.  ","version":"Next","tagName":"h2"},{"title":"Convention Over Configuration​","type":1,"pageTitle":"Code Style","url":"/touying/docs/next/code-styles#convention-over-configuration","content":" You may have noticed that when using the simple theme, using a level-one heading automatically creates a new section slide. This is because the simple theme registers an s.methods.touying-new-section-slide method, so Touying will automatically call this method.  If we don't want it to automatically create such a section slide, we can delete this method:  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.simple.register() #(s.methods.touying-new-section-slide = none) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     As you can see, there are only two pages left, and the default section slide is gone.  Similarly, we can register a new section slide:  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.simple.register() #(s.methods.touying-new-section-slide = (self: none, section, ..args) =&gt; { self = utils.empty-page(self) (s.methods.touying-slide)(self: self, section: section, { set align(center + horizon) set text(size: 2em, fill: s.colors.primary, style: &quot;italic&quot;, weight: &quot;bold&quot;) section }, ..args) }) #let (init, slides, touying-outline) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     Similarly, we can modify s.methods.touying-new-subsection-slide to do the same for subsection.  In fact, besides s.methods.touying-new-section-slide, another special slide function is the s.methods.slide function, which will be called by default in simple style when #slide[...] is not explicitly used.  Also, since #slide[...] is registered in s.slides = (&quot;slide&quot;,), the section, subsection, and title parameters will be automatically passed, while others like #focus-slide[...] will not automatically receive these three parameters.  Principle In fact, you can also not use #show: slides and utils.slides(s), but only use utils.methods(s), for example: #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.simple.register() #let (init, touying-outline, slide) = utils.methods(s) #show: init #slide(section: [Title], title: [First Slide])[ Hello, Touying! #pause Hello, Typst! ] Here, you need to manually pass in section, subsection, and title, but it will have better performance, suitable for cases where faster performance is needed, such as when there are more than dozens or hundreds of pages. ","version":"Next","tagName":"h2"},{"title":"Complex Animations","type":0,"sectionRef":"#","url":"/touying/docs/next/dynamic/complex","content":"","keywords":"","version":"Next"},{"title":"Mark-Style Functions​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/next/dynamic/complex#mark-style-functions","content":" We can use mark-style functions, which are very convenient to use.  At subslide #utils.touying-wrapper((self: none) =&gt; str(self.subslide)), we can use #uncover(&quot;2-&quot;)[`#uncover` function] for reserving space, use #only(&quot;2-&quot;)[`#only` function] for not reserving space, #alternatives[call `#only` multiple times \\u{2717}][use `#alternatives` function #sym.checkmark] for choosing one of the alternatives.   However, this does not work in all cases, for example if you put uncover into the layout function like grid function, you will get an error.  ","version":"Next","tagName":"h2"},{"title":"Callback-Style Functions​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/next/dynamic/complex#callback-style-functions","content":" To overcome the limitations of layout functions mentioned earlier, Touying cleverly implements always-effective only, uncover, and alternatives using callback functions. Specifically, you need to introduce these three functions as follows:  #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) At subslide #self.subslide, we can use #uncover(&quot;2-&quot;)[`#uncover` function] for reserving space, use #only(&quot;2-&quot;)[`#only` function] for not reserving space, #alternatives[call `#only` multiple times \\u{2717}][use `#alternatives` function #sym.checkmark] for choosing one of the alternatives. ])     Notice that we no longer pass a content block but instead pass a callback function with a self parameter. Later, we extract only, uncover, and alternatives functions from self using:  #let (uncover, only, alternatives) = utils.methods(self)   We then call these functions in subsequent steps.  Here's an interesting fact: the self.subslide of type int indicates the current subslide index, and in fact, the only, uncover, and alternatives functions rely on self.subslide to determine the current subslide index.  Warning We manually specify the repeat: 3 parameter, indicating the display of 3 subslides. We need to do this manually because Touying cannot infer how many subslides only, uncover, and alternatives should display.  ","version":"Next","tagName":"h2"},{"title":"only​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/next/dynamic/complex#only","content":" The only function means it &quot;appears&quot; only on selected subslides. If it doesn't appear, it completely disappears and doesn't occupy any space. In other words, #only(index, body) is either body or none.  The index can be an int type or a str type like &quot;2-&quot; or &quot;2-3&quot;. For more usage, refer to Polylux.  ","version":"Next","tagName":"h2"},{"title":"uncover​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/next/dynamic/complex#uncover","content":" The uncover function means it &quot;displays&quot; only on selected subslides; otherwise, it will be covered by the cover function but still occupies the original space. In other words, #uncover(index, body) is either body or cover(body).  The index can be an int type or a str type like &quot;2-&quot; or &quot;2-3&quot;. For more usage, refer to Polylux.  You may also have noticed that #pause actually uses the cover function, providing a more convenient syntax. In reality, their effects are almost identical.  ","version":"Next","tagName":"h2"},{"title":"alternatives​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/next/dynamic/complex#alternatives","content":" The alternatives function displays a series of different content in different subslides. For example:  #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) #alternatives[Ann][Bob][Christopher] likes #alternatives[chocolate][strawberry][vanilla] ice cream. ])     As you can see, alternatives can automatically expand to the most suitable width and height, a capability that only and uncover lack. In fact, alternatives has other parameters, such as start: 2, repeat-last: true, and position: center + horizon. For more usage, refer to Polylux. ","version":"Next","tagName":"h2"},{"title":"Creating Your Own Theme","type":0,"sectionRef":"#","url":"/touying/docs/next/build-your-own-theme","content":"","keywords":"","version":"Next"},{"title":"Modifying Existing Themes​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/next/build-your-own-theme#modifying-existing-themes","content":" If you wish to modify a theme within the Touying package locally instead of creating one from scratch, you can achieve this by following these steps:  Copy the theme code from the themes directory to your local machine. For example, copy themes/university.typ to a local file named university.typ.Remove all #import &quot;../xxx.typ&quot; commands at the top of the university.typ file.Add #import &quot;@preview/touying:0.4.2&quot;: * at the top of the university.typ file to import all modules.Replace self: s in the register function with self: themes.default.register() (Important).  You can then import and use the theme by:  #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;university.typ&quot; #let s = university.register(aspect-ratio: &quot;16-9&quot;)   For a specific example, refer to: https://typst.app/project/rqRuzg0keo_ZEB5AdxjweA  ","version":"Next","tagName":"h2"},{"title":"Import​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/next/build-your-own-theme#import","content":" Depending on whether the theme is for personal use or part of Touying, you can import in two ways:  If for personal use:  #import &quot;@preview/touying:0.4.2&quot;: *   If part of Touying themes:  #import &quot;../utils/utils.typ&quot; #import &quot;../utils/states.typ&quot; #import &quot;../utils/components.typ&quot;   Additionally, add the import statement in Touying's themes/themes.typ:  #import &quot;bamboo.typ&quot;   ","version":"Next","tagName":"h2"},{"title":"Register Function and Init Method​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/next/build-your-own-theme#register-function-and-init-method","content":" Next, we'll distinguish between the bamboo.typ template file and the main.typ file, the latter of which is sometimes omitted.  Generally, the first step in creating slides is to determine font size and page aspect ratio. Therefore, we need to register an initialization method:  // bamboo.typ #import &quot;@preview/touying:0.4.2&quot;: * #let register( self: themes.default.register(), aspect-ratio: &quot;16-9&quot;, ) = { self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, ) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self } // main.typ #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;bamboo.typ&quot; #let s = bamboo.register(aspect-ratio: &quot;16-9&quot;) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide) = utils.slides(s) #show: slides = First Section == First Slide #slide[ A slide with a title and an *important* information. ]   As you can see, we created a register function and passed an aspect-ratio parameter to set the page aspect ratio. We get default self by self: themes.default.register(). As you might already know, in Touying, we should not use set page(..) to set page parameters but rather use the syntax self.page-args += (..) to set them, as explained in the Page Layout section.  In addition, we registered a self.methods.init method, which can be used for some global style settings. For example, in this case, we added set text(size: 20pt) to set the font size. You can also place additional global style settings here, such as set par(justify: true). Since the init function is placed inside self.methods, it is a method, not a regular function. Therefore, we need to add the parameter self: none to use it properly.  As you can see, later in main.typ, we apply the global style settings in init using #show: init, where init is bound and unpacked through utils.methods(s).  If you pay extra attention, you'll notice that the register function has an independent self at the end. This actually represents returning the modified self as the return value, which will be saved in #let s = ... This line is therefore indispensable.  ","version":"Next","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/next/build-your-own-theme#color-theme","content":" Choosing an attractive color theme for your slides is crucial. Touying provides built-in color theme support to minimize API differences between different themes. Touying offers two dimensions of color selection: the first is neutral, primary, secondary, and tertiary for hue distinction, with primary being the most commonly used; the second is default, light, lighter, lightest, dark, darker, and darkest for brightness distinction.  As we are creating the Bamboo theme, we chose a color for the primary theme, similar to bamboo (rgb(&quot;#5E8B65&quot;)), and included neutral lightest/darkest as background and font colors.  As shown in the code below, we use (self.methods.colors)(self: self, ..) to modify the color theme. Essentially, it is a wrapper for self.colors += (..).  #let register( self: themes.default.register(), aspect-ratio: &quot;16-9&quot;, ) = { // color theme self = (self.methods.colors)( self: self, primary: rgb(&quot;#5E8B65&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), neutral-darkest: rgb(&quot;#000000&quot;), ) self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, ) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self }   After adding the color theme, we can access the color using syntax like self.colors.primary.  It's worth noting that users can change the theme color at any time using:  #let s = (s.methods.colors)(self: s, primary: rgb(&quot;#3578B9&quot;))   This flexibility demonstrates Touying's powerful customization capabilities.  ","version":"Next","tagName":"h2"},{"title":"Practical: Custom Alert Method​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/next/build-your-own-theme#practical-custom-alert-method","content":" In general, we need to provide a #alert[..] function for users, similar to #strong[..]. Typically, #alert[..] emphasizes text using the primary theme color for aesthetics. We add a line in the register function:  self.methods.alert = (self: none, it) =&gt; text(fill: self.colors.primary, it)   This code sets the text color to self.colors.primary, utilizing the theme's primary color.  ","version":"Next","tagName":"h2"},{"title":"Custom Header and Footer​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/next/build-your-own-theme#custom-header-and-footer","content":" Here, assuming you've already read the Page Layout section, we know we should add headers and footers to the slides.  Firstly, we add self.bamboo-title = []. This means we save the title of the current slide as a member variable self.bamboo-title, stored in self. This makes it easy to use in the header and later modifications. Similarly, we create self.bamboo-footer, saving the footer: [] parameter from the register function for displaying in the bottom-left corner.  It's worth noting that our header is actually a content function in the form of let header(self) = { .. } with the self parameter, allowing us to get the latest information from self. For example, self.bamboo-title. The footer is similar.  The components.cell used inside is actually #let cell = block.with(width: 100%, height: 100%, above: 0pt, below: 0pt, breakable: false), and show: components.cell is shorthand for components.cell(body). The show: pad.with(.4em) in the footer is similar.  Another point to note is the states module, which contains many counters and state-related content. For example, states.current-section-title is used to display the current section, and states.slide-counter.display() + &quot; / &quot; + states.last-slide-number is used to display the current page number and total number of pages.  We observe the usage of utils.call-or-display(self, self.bamboo-footer) to display self.bamboo-footer. This is used to handle situations like self.bamboo-footer = (self) =&gt; {..}, ensuring a unified approach to displaying content functions and content.  To ensure proper display of the header and footer and sufficient spacing from the main content, we also set margins, such as self.page-args += (margin: (top: 4em, bottom: 1.5em, x: 2em)).  We also need to customize a slide method that accepts slide(self: none, title: auto, ..args). The first self: none is a required method parameter for getting the latest self. The second title is used to update self.bamboo-title for displaying in the header. The third ..args collects the remaining parameters and passes them to (self.methods.touying-slide)(self: self, ..args), which is necessary for the Touying slide functionality to work properly. Additionally, we need to register this method in the register function with self.methods.slide = slide.  // bamboo.typ #import &quot;@preview/touying:0.4.2&quot;: * #let slide(self: none, title: auto, ..args) = { if title != auto { self.bamboo-title = title } (self.methods.touying-slide)(self: self, ..args) } #let register( self: themes.default.register(), aspect-ratio: &quot;16-9&quot;, footer: [], ) = { // color theme self = (self.methods.colors)( self: self, primary: rgb(&quot;#5E8B65&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), neutral-darkest: rgb(&quot;#000000&quot;), ) // variables for later use self.bamboo-title = [] self.bamboo-footer = footer // set page let header(self) = { set align(top) show: components.cell.with(fill: self.colors.primary, inset: 1em) set align(horizon) set text(fill: self.colors.neutral-lightest, size: .7em) states.current-section-title linebreak() set text(size: 1.5em) utils.call-or-display(self, self.bamboo-title) } let footer(self) = { set align(bottom) show: pad.with(.4em) set text(fill: self.colors.neutral-darkest, size: .8em) utils.call-or-display(self, self.bamboo-footer) h(1fr) states.slide-counter.display() + &quot; / &quot; + states.last-slide-number } self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, header: header, footer: footer, margin: (top: 4em, bottom: 1.5em, x: 2em), ) // register methods self.methods.slide = slide self.methods.alert = (self: none, it) =&gt; text(fill: self.colors.primary, it) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self } // main.typ #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;bamboo.typ&quot; #let s = bamboo.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide) = utils.slides(s) #show: slides = First Section == First Slide #slide[ A slide with a title and an *important* information. ]     ","version":"Next","tagName":"h2"},{"title":"Custom Special Slide​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/next/build-your-own-theme#custom-special-slide","content":" Building upon the basic slide, we further add some special slide functions such as title-slide, focus-slide, and a custom slides method.  For the title-slide method, first, we call self = utils.empty-page(self). This function clears self.page-args.header, self.page-args.footer, and sets margin to 0em, creating a blank page effect. Then, we use let info = self.info + args.named() to get information stored in self.info and update it with the passed args.named() for later use as info.title. The specific page content body will vary for each theme, so we won't go into details here. Finally, we call `(self.methods.touying-slide)(self: self, repeat: none, body  ), where repeat: noneindicates that this page does not require animation effects, and passing thebody` parameter displays its content.  For the new-section-slide method, the process is similar. The only thing to note is that in (self.methods.touying-slide)(self: self, repeat: none, section: section, body), we pass an additional section: section parameter to declare the creation of a new section. Another point to note is that besides self.methods.new-section-slide = new-section-slide, we also register self.methods.touying-new-section-slide = new-section-slide, so new-section-slide will be automatically called when encountering a first-level title.  For the focus-slide method, most of the content is similar, but it's worth noting that we use self.page-args += (..) to update the page's background color.  Finally, we update the slides(self: none, title-slide: true, slide-level: 1, ..args) method. When title-slide is true, using #show: slides will automatically create a title-slide. Setting slide-level: 1 indicates that the first-level and second-level titles correspond to section and title, respectively.  // bamboo.typ #import &quot;@preview/touying:0.4.2&quot;: * #let slide(self: none, title: auto, ..args) = { if title != auto { self.bamboo-title = title } (self.methods.touying-slide)(self: self, ..args) } #let title-slide(self: none, ..args) = { self = utils.empty-page(self) let info = self.info + args.named() let body = { set align(center + horizon) block( fill: self.colors.primary, width: 80%, inset: (y: 1em), radius: 1em, text(size: 2em, fill: self.colors.neutral-lightest, weight: &quot;bold&quot;, info.title) ) set text(fill: self.colors.neutral-darkest) if info.author != none { block(info.author) } if info.date != none { block(if type(info.date) == datetime { info.date.display(self.datetime-format) } else { info.date }) } } (self.methods.touying-slide)(self: self, repeat: none, body) } #let new-section-slide(self: none, section) = { self = utils.empty-page(self) let body = { set align(center + horizon) set text(size: 2em, fill: self.colors.primary, weight: &quot;bold&quot;, style: &quot;italic&quot;) section } (self.methods.touying-slide)(self: self, repeat: none, section: section, body) } #let focus-slide(self: none, body) = { self = utils.empty-page(self) self.page-args += ( fill: self.colors.primary, margin: 2em, ) set text(fill: self.colors.neutral-lightest, size: 2em) (self.methods.touying-slide)(self: self, repeat: none, align(horizon + center, body)) } #let slides(self: none, title-slide: true, slide-level: 1, ..args) = { if title-slide { (self.methods.title-slide)(self: self) } (self.methods.touying-slides)(self: self, slide-level: slide-level, ..args) } #let register( self: themes.default.register(), aspect-ratio: &quot;16-9&quot;, footer: [], ) = { // color theme self = (self.methods.colors)( self: self, primary: rgb(&quot;#5E8B65&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), neutral-darkest: rgb(&quot;#000000&quot;), ) // variables for later use self.bamboo-title = [] self.bamboo-footer = footer // set page let header(self) = { set align(top) show: components.cell.with(fill: self.colors.primary, inset: 1em) set align(horizon) set text(fill: self.colors.neutral-lightest, size: .7em) states.current-section-title linebreak() set text(size: 1.5em) utils.call-or-display(self, self.bamboo-title) } let footer(self) = { set align(bottom) show: pad.with(.4em) set text(fill: self.colors.neutral-darkest, size: .8em) utils.call-or-display(self, self.bamboo-footer) h(1fr) states.slide-counter.display() + &quot; / &quot; + states.last-slide-number } self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, header: header, footer: footer, margin: (top: 4em, bottom: 1.5em, x: 2em), ) // register methods self.methods.slide = slide self.methods.title-slide = title-slide self.methods.new-section-slide = new-section-slide self.methods.touying-new-section-slide = new-section-slide self.methods.focus-slide = focus-slide self.methods.slides = slides self.methods.alert = (self: none, it) =&gt; text(fill: self.colors.primary, it) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self } // main.typ #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;bamboo.typ&quot; #let s = bamboo.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, focus-slide) = utils.slides(s) #show: slides = First Section == First Slide #slide[ A slide with a title and an *important* information. ] #focus-slide[ Focus on it! ]     ","version":"Next","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/next/build-your-own-theme#conclusion","content":" Congratulations! You've created a simple and elegant theme. Perhaps you may find that Touying introduces a wealth of concepts, making it initially challenging to grasp. This is normal, as Touying opts for functionality over simplicity. However, thanks to Touying's comprehensive and unified approach, you can easily extract commonalities between different themes and transfer your knowledge seamlessly. You can also save global variables, modify existing themes, or switch between themes effortlessly, showcasing the benefits of Touying's decoupling and object-oriented programming. ","version":"Next","tagName":"h2"},{"title":"Cover Function","type":0,"sectionRef":"#","url":"/touying/docs/next/dynamic/cover","content":"","keywords":"","version":"Next"},{"title":"Default Cover Function: hide​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/next/dynamic/cover#default-cover-function-hide","content":" The cover function is a method stored in s.methods.cover, which is later used by uncover and #pause.  The default cover function is the hide function. This function makes the internal content invisible without affecting the layout.  ","version":"Next","tagName":"h2"},{"title":"Updating the Cover Function​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/next/dynamic/cover#updating-the-cover-function","content":" In some cases, you might want to use your own cover function. In that case, you can set your own cover function using:  let s = (s.methods.update-cover)(self: s, is-method: true, cover-fn)   Here, if you set is-method: false, Touying will wrap cover-fn into a method for you.  ","version":"Next","tagName":"h2"},{"title":"hack: handle enum and list​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/next/dynamic/cover#hack-handle-enum-and-list","content":" You will find that the existing cover function cannot hide the mark of enum and list, refer to here, so you can hack:  #let s = (s.methods.update-cover)(self: s, body =&gt; box(scale(x: 0%, body)))   ","version":"Next","tagName":"h2"},{"title":"Semi-Transparent Cover Function​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/next/dynamic/cover#semi-transparent-cover-function","content":" Touying supports a semi-transparent cover function, which can be enabled by adding:  #let s = (s.methods.enable-transparent-cover)(self: s)   You can adjust the transparency through the alpha: .. parameter.  Warning Note that the transparent-cover here does not preserve text layout like hide does because it adds an extra layer of box, which may disrupt the original structure of the page.  Internals The enable-transparent-cover method is defined as: #let s.methods.enable-transparent-cover = ( self: none, constructor: rgb, alpha: 85%, ) =&gt; { self.methods.cover = (self: none, body) =&gt; { utils.cover-with-rect( fill: utils.update-alpha( constructor: constructor, self.page-args.fill, alpha, ), body ) } self } It creates a semi-transparent rectangular mask with the same color as the background to simulate the effect of transparent content. Here, constructor: rgb and alpha: 85% indicate the background color's construction function and transparency level, respectively. ","version":"Next","tagName":"h2"},{"title":"Handout Mode","type":0,"sectionRef":"#","url":"/touying/docs/next/dynamic/handout","content":"Handout Mode While watching slides and attending lectures, the audience often wishes to have handouts for reviewing challenging concepts. Therefore, it's beneficial for the author to provide handouts for the audience, preferably before the lecture for better preparation. The handout mode differs from the regular mode as it doesn't require intricate animation effects. It retains only the last subslide of each slide. Enabling handout mode is simple: #let s = (s.methods.enable-handout-mode)(self: s) ","keywords":"","version":"Next"},{"title":"Math Equation Animations","type":0,"sectionRef":"#","url":"/touying/docs/next/dynamic/equation","content":"","keywords":"","version":"Next"},{"title":"Simple Animation​","type":1,"pageTitle":"Math Equation Animations","url":"/touying/docs/next/dynamic/equation#simple-animation","content":" Let's start with an example:  #slide[ Touying equation with pause: #touying-equation(` f(x) &amp;= pause x^2 + 2x + 1 \\ &amp;= pause (x + 1)^2 \\ `) #meanwhile Touying equation is very simple. ]     We use the touying-equation function to incorporate pause and meanwhile within the text of math equations (in fact, you can also use #pause or #pause;).  As you would expect, the math equation is displayed step by step, making it suitable for presenters to demonstrate their math reasoning.  Warning While the touying-equation function is convenient, you should always be aware that it doesn't perform complex syntax analysis. It simply splits the string using regular expressions. Therefore, you should not use pause or meanwhile within functions like display(..)!  ","version":"Next","tagName":"h2"},{"title":"Complex Animation​","type":1,"pageTitle":"Math Equation Animations","url":"/touying/docs/next/dynamic/equation#complex-animation","content":" In fact, we can also use only, uncover, and alternatives within touying-equation with a little trick:  #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) #touying-equation(scope: (uncover: uncover), ` f(x) &amp;= pause x^2 + 2x + uncover(&quot;3-&quot;, 1) \\ &amp;= pause (x + 1)^2 \\ `) ])     We can pass the functions we need into the touying-equation through the scope parameter, such as uncover in this example.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Math Equation Animations","url":"/touying/docs/next/dynamic/equation#parameters","content":" The function definition of touying-equation is:  #let touying-equation(block: true, numbering: none, supplement: auto, scope: (:), body) = { .. }   Therefore, you can pass parameters like block, numbering, and supplement to touying-equation just like using normal math equations. ","version":"Next","tagName":"h2"},{"title":"Simple Animations","type":0,"sectionRef":"#","url":"/touying/docs/next/dynamic/simple","content":"","keywords":"","version":"Next"},{"title":"pause​","type":1,"pageTitle":"Simple Animations","url":"/touying/docs/next/dynamic/simple#pause","content":" The purpose of #pause is straightforward – it separates the subsequent content into the next subslide. You can use multiple #pause to create multiple subslides. Here's a simple example:  #slide[ First #pause Second #pause Third ]     This example will create three subslides, gradually revealing the content.  As you can see, #pause can be used inline or on a separate line.  ","version":"Next","tagName":"h2"},{"title":"meanwhile​","type":1,"pageTitle":"Simple Animations","url":"/touying/docs/next/dynamic/simple#meanwhile","content":" In some cases, you may need to display additional content simultaneously with #pause. In such cases, you can use #meanwhile.  #slide[ First #pause Second #meanwhile Third #pause Fourth ]     This example will create only two subslides, with &quot;First&quot; and &quot;Third&quot; displayed simultaneously, and &quot;Second&quot; and &quot;Fourth&quot; displayed simultaneously.  ","version":"Next","tagName":"h2"},{"title":"Handling layout functions​","type":1,"pageTitle":"Simple Animations","url":"/touying/docs/next/dynamic/simple#handling-layout-functions","content":" If you use layout functions like grid inside slide[..], you might be surprised to find that subsequent #pause and #meanwhile do not work. This is because Touying cannot detect the content inside layout functions. But you can use the composer parameter of #slide() to meet most requirements.  Internals Touying doesn't rely on counter and locate to implement #pause. Instead, it has a parser written in Typst script. It parses the input content block as a sequence and then transforms and reorganizes this sequence into the series of subslides we need. ","version":"Next","tagName":"h2"},{"title":"Pdfpc","type":0,"sectionRef":"#","url":"/touying/docs/next/external/pdfpc","content":"","keywords":"","version":"Next"},{"title":"Adding Metadata​","type":1,"pageTitle":"Pdfpc","url":"/touying/docs/next/external/pdfpc#adding-metadata","content":" Touying remains consistent with Polylux to avoid conflicts between APIs.  For example, you can add notes using #pdfpc.speaker-note(&quot;This is a note that only the speaker will see.&quot;).  ","version":"Next","tagName":"h2"},{"title":"Pdfpc Configuration​","type":1,"pageTitle":"Pdfpc","url":"/touying/docs/next/external/pdfpc#pdfpc-configuration","content":" To add pdfpc configurations, you can use  #let s = (s.methods.append-preamble)(self: s, pdfpc.config( duration-minutes: 30, start-time: datetime(hour: 14, minute: 10, second: 0), end-time: datetime(hour: 14, minute: 40, second: 0), last-minutes: 5, note-font-size: 12, disable-markdown: false, default-transition: ( type: &quot;push&quot;, duration-seconds: 2, angle: ltr, alignment: &quot;vertical&quot;, direction: &quot;inward&quot;, ), ))   Add the corresponding configurations. Refer to Polylux for specific configuration details.  ","version":"Next","tagName":"h2"},{"title":"Exporting .pdfpc File​","type":1,"pageTitle":"Pdfpc","url":"/touying/docs/next/external/pdfpc#exporting-pdfpc-file","content":" Assuming your document is ./example.typ, you can export the .pdfpc file directly using:  typst query --root . ./example.typ --field value --one &quot;&lt;pdfpc-file&gt;&quot; &gt; ./example.pdfpc   With the compatibility of Touying and Polylux, you can make Polylux also support direct export by adding the following code:  #import &quot;@preview/touying:0.4.2&quot; #locate(loc =&gt; touying.pdfpc.pdfpc-file(loc))  ","version":"Next","tagName":"h2"},{"title":"Other Animations","type":0,"sectionRef":"#","url":"/touying/docs/next/dynamic/other","content":"","keywords":"","version":"Next"},{"title":"Simple Animations​","type":1,"pageTitle":"Other Animations","url":"/touying/docs/next/dynamic/other#simple-animations","content":" Here's an example:  #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;@preview/cetz:0.2.2&quot; #import &quot;@preview/fletcher:0.4.4&quot; as fletcher: node, edge // cetz and fletcher bindings for touying #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: fletcher.diagram, cover: fletcher.hide) #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides.with(title-slide: false, outline-slide: false) // cetz animation #slide[ Cetz in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) ] // fletcher animation #slide[ Fletcher in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) ]     ","version":"Next","tagName":"h2"},{"title":"only and uncover​","type":1,"pageTitle":"Other Animations","url":"/touying/docs/next/dynamic/other#only-and-uncover","content":" In fact, we can also use only and uncover within cetz, just requiring a bit of skill:  #slide(repeat: 3, self =&gt; [ #let (uncover, only) = utils.methods(self) Cetz in Touying in subslide #self.subslide: #cetz.canvas({ import cetz.draw: * let self = (self.methods.update-cover)(self: self, hide.with(bounds: true)) let (uncover,) = utils.methods(self) rect((0,0), (5,5)) uncover(&quot;2-3&quot;, { rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) }) only(3, line((0,0), (2.5, 2.5), name: &quot;line&quot;)) }) ])  ","version":"Next","tagName":"h2"},{"title":"Typst Preview","type":0,"sectionRef":"#","url":"/touying/docs/next/external/typst-preview","content":"Typst Preview The Typst Preview extension for VS Code provides an excellent slide mode, allowing us to preview and present slides. Press Ctrl/Cmd + Shift + P and type Typst Preview: Preview current file in slide mode to open the preview in slide mode. Press Ctrl/Cmd + Shift + P and type Typst Preview: Preview current file in browser and slide mode to open the slide mode in the browser. Now, you can press keys like F11 to enter fullscreen mode in the browser, making it suitable for slide presentations. Since Typst Preview is based on SVG, it can play GIF animations, which is very helpful for dynamic slides.","keywords":"","version":"Next"},{"title":"Pympress","type":0,"sectionRef":"#","url":"/touying/docs/next/external/pympress","content":"","keywords":"","version":"Next"},{"title":"Speaker Notes​","type":1,"pageTitle":"Pympress","url":"/touying/docs/next/external/pympress#speaker-notes","content":" #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) // Set the speaker notes configuration, you can show it by pympress #let s = (s.methods.show-notes-on-second-screen)(self: s, right) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Animation == Simple Animation We can use `#pause` to #pause display something later. #pause Just like this. #meanwhile Meanwhile, #pause we can also use `#meanwhile` to #pause display other content synchronously. #speaker-note[ + This is a speaker note. + You won't see it unless you use `#let s = (s.math.show-notes-on-second-screen)(self: s, right)` ]     Then we can use the pympress to show it.   ","version":"Next","tagName":"h2"},{"title":"Codly","type":0,"sectionRef":"#","url":"/touying/docs/next/integration/codly","content":"Codly When using Codly, we should initialize it using the s.methods.append-preamble method. #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;@preview/codly:0.2.0&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.append-preamble)(self: s)[ #codly(languages: ( rust: (name: &quot;Rust&quot;, icon: &quot;\\u{fa53}&quot;, color: rgb(&quot;#CE412B&quot;)), )) ] #let (init, slides) = utils.methods(s) #show heading.where(level: 2): set block(below: 1em) #show: init #show: codly-init.with() #let (slide, empty-slide) = utils.slides(s) #show: slides #slide[ == First slide #raw(lang: &quot;rust&quot;, block: true, `pub fn main() { println!(&quot;Hello, world!&quot;); }`.text) ] ","keywords":"","version":"Next"},{"title":"CeTZ","type":0,"sectionRef":"#","url":"/touying/docs/next/integration/cetz","content":"","keywords":"","version":"Next"},{"title":"Simple Animation​","type":1,"pageTitle":"CeTZ","url":"/touying/docs/next/integration/cetz#simple-animation","content":" An example:  #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;@preview/cetz:0.2.2&quot; #import &quot;@preview/fletcher:0.4.4&quot; as fletcher: node, edge // cetz and fletcher bindings for touying #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: fletcher.diagram, cover: fletcher.hide) #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides.with(title-slide: false, outline-slide: false) // cetz animation #slide[ Cetz in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) ] // fletcher animation #slide[ Fletcher in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) ]     ","version":"Next","tagName":"h2"},{"title":"only and uncover​","type":1,"pageTitle":"CeTZ","url":"/touying/docs/next/integration/cetz#only-and-uncover","content":" In fact, we can also use only and uncover within CeTZ, but it requires a bit of technique:  #slide(repeat: 3, self =&gt; [ #let (uncover, only) = utils.methods(self) Cetz in Touying in subslide #self.subslide: #cetz.canvas({ import cetz.draw: * let self = (self.methods.update-cover)(self: self, hide.with(bounds: true)) let (uncover,) = utils.methods(self) rect((0,0), (5,5)) uncover(&quot;2-3&quot;, { rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) }) only(3, line((0,0), (2.5, 2.5), name: &quot;line&quot;)) }) ])  ","version":"Next","tagName":"h2"},{"title":"Ctheorems","type":0,"sectionRef":"#","url":"/touying/docs/next/integration/ctheorems","content":"Ctheorems Touying can work seamlessly with the ctheorems package, allowing you to directly use the ctheorems package. Moreover, you can utilize #let s = (s.methods.numbering)(self: s, section: &quot;1.&quot;, &quot;1.1&quot;) to set numbering for sections and subsections. #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;@preview/ctheorems:1.1.2&quot;: * // Register university theme #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;) // Set the numbering of section and subsection #let s = (s.methods.numbering)(self: s, section: &quot;1.&quot;, &quot;1.1&quot;) // Theorems configuration by ctheorems #show: thmrules.with(qed-symbol: $square$) #let theorem = thmbox(&quot;theorem&quot;, &quot;Theorem&quot;, fill: rgb(&quot;#eeffee&quot;)) #let corollary = thmplain( &quot;corollary&quot;, &quot;Corollary&quot;, base: &quot;theorem&quot;, titlefmt: strong ) #let definition = thmbox(&quot;definition&quot;, &quot;Definition&quot;, inset: (x: 1.2em, top: 1em)) #let example = thmplain(&quot;example&quot;, &quot;Example&quot;).with(numbering: none) #let proof = thmproof(&quot;proof&quot;, &quot;Proof&quot;) // Extract methods #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert // Extract slide functions #let (slide, empty-slide) = utils.slides(s) #show: slides = Theorems == Prime numbers #definition[ A natural number is called a #highlight[_prime number_] if it is greater than 1 and cannot be written as the product of two smaller natural numbers. ] #example[ The numbers $2$, $3$, and $17$ are prime. @cor_largest_prime shows that this list is not exhaustive! ] #theorem(&quot;Euclid&quot;)[ There are infinitely many primes. ] #proof[ Suppose to the contrary that $p_1, p_2, dots, p_n$ is a finite enumeration of all primes. Set $P = p_1 p_2 dots p_n$. Since $P + 1$ is not in our list, it cannot be prime. Thus, some prime factor $p_j$ divides $P + 1$. Since $p_j$ also divides $P$, it must divide the difference $(P + 1) - P = 1$, a contradiction. ] #corollary[ There is no largest prime number. ] &lt;cor_largest_prime&gt; #corollary[ There are infinitely many composite numbers. ] #theorem[ There are arbitrarily long stretches of composite numbers. ] #proof[ For any $n &gt; 2$, consider $ n! + 2, quad n! + 3, quad ..., quad n! + n #qedhere $ ] ","keywords":"","version":"Next"},{"title":"Global Settings","type":0,"sectionRef":"#","url":"/touying/docs/next/global-settings","content":"","keywords":"","version":"Next"},{"title":"Global Styles​","type":1,"pageTitle":"Global Settings","url":"/touying/docs/next/global-settings#global-styles","content":" For Touying, global styles refer to set rules or show rules that need to be applied everywhere, such as #set text(size: 20pt).  Themes in Touying encapsulate some of their own global styles, which are placed in #show: init. For example, the university theme encapsulates the following:  self.methods.init = (self: none, body) =&gt; { set text(size: 25pt) show footnote.entry: set text(size: .6em) body }   If you are not a theme creator but want to add your own global styles to your slides, you can simply place them after #show: init and before #show: slides. For example, the metropolis theme recommends adding the following global styles:  #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init // global styles #set text(font: &quot;Fira Sans&quot;, weight: &quot;light&quot;, size: 20pt) #show math.equation: set text(font: &quot;Fira Math&quot;) #set strong(delta: 100) #set par(justify: true) #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides   However, note that you should not use #set page(..). Instead, modify s.page-args and s.padding, for example:  #(s.page-args += ( margin: (x: 0em, y: 2em), header: align(top)[Header], footer: align(bottom)[Footer], header-ascent: 0em, footer-descent: 0em, )) #(s.padding += (x: 4em, y: 0em))   ","version":"Next","tagName":"h2"},{"title":"Global Information​","type":1,"pageTitle":"Global Settings","url":"/touying/docs/next/global-settings#global-information","content":" Like Beamer, Touying, through an OOP-style unified API design, can help you better maintain global information, allowing you to easily switch between different themes. Global information is a typical example of this.  You can set the title, subtitle, author, date, and institution information for slides using:  #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], )   In subsequent slides, you can access them through s.info or self.info.  This information is generally used in the title-slide, header, and footer of the theme, for example:  #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution)   The date can accept datetime format or content format, and the display format for the datetime format can be changed using:  #let s = (s.methods.datetime-format)(self: s, &quot;[year]-[month]-[day]&quot;)   Principle Here, we will introduce a bit of OOP concept in Touying. You should know that Typst is a typesetting language that supports incremental rendering, which means Typst caches the results of previous function calls. This requires that Typst consists of pure functions, meaning functions that do not change external variables. Thus, it is challenging to modify a global variable in the true sense, even with the use of state or counter. This would require the use of locate with callback functions to obtain the values inside, and this approach would have a significant impact on performance. Touying does not use state or counter and does not violate the principle of pure functions in Typst. Instead, it uses a clever approach in an object-oriented style, maintaining a global singleton s. In Touying, an object refers to a Typst dictionary with its own member variables and methods. We agree that methods all have a named parameter self for passing the object itself, and methods are placed in the .methods domain. With this concept, it becomes easier to write methods to update info: #let s = ( info: (:), methods: ( // update info info: (self: none, ..args) =&gt; { self.info += args.named() self }, ) ) #let s = (s.methods.info)(self: s, title: [title]) Title is #s.info.title Now you can understand the purpose of the utils.methods() function: to bind self to all methods of s and return it, simplifying the subsequent usage through unpacking syntax. #let (init, slides, alert) = utils.methods(s)   ","version":"Next","tagName":"h2"},{"title":"State Initialization​","type":1,"pageTitle":"Global Settings","url":"/touying/docs/next/global-settings#state-initialization","content":" In general, the two ways mentioned above are sufficient for adding global settings. However, there are still situations where we need to initialize counters or states. If you place this code before #show: slides, a blank page will be created, which is something we don't want to see. In such cases, you can use the s.methods.append-preamble method. For example, when using the codly package:  #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;@preview/codly:0.2.0&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.append-preamble)(self: s)[ #codly(languages: ( rust: (name: &quot;Rust&quot;, icon: &quot;\\u{fa53}&quot;, color: rgb(&quot;#CE412B&quot;)), )) ] #let (init, slides) = utils.methods(s) #show heading.where(level: 2): set block(below: 1em) #show: init #show: codly-init.with() #let (slide, empty-slide) = utils.slides(s) #show: slides #slide[ == First slide #raw(lang: &quot;rust&quot;, block: true, `pub fn main() { println!(&quot;Hello, world!&quot;); }`.text) ]     Or when configuring Pdfpc:  // Pdfpc configuration // typst query --root . ./example.typ --field value --one &quot;&lt;pdfpc-file&gt;&quot; &gt; ./example.pdfpc #let s = (s.methods.append-preamble)(self: s, pdfpc.config( duration-minutes: 30, start-time: datetime(hour: 14, minute: 10, second: 0), end-time: datetime(hour: 14, minute: 40, second: 0), last-minutes: 5, note-font-size: 12, disable-markdown: false, default-transition: ( type: &quot;push&quot;, duration-seconds: 2, angle: ltr, alignment: &quot;vertical&quot;, direction: &quot;inward&quot;, ), ))  ","version":"Next","tagName":"h2"},{"title":"MiTeX","type":0,"sectionRef":"#","url":"/touying/docs/next/integration/mitex","content":"MiTeX During the process of creating slides, we often already have a LaTeX math equation that we simply want to paste into the slides without transcribing it into a Typst math equation. In such cases, we can use MiTeX. Example: #import &quot;@preview/mitex:0.2.3&quot;: * Write inline equations like #mi(&quot;x&quot;) or #mi[y]. Also block equations (this case is from #text(blue.lighten(20%), link(&quot;https://katex.org/&quot;)[katex.org])): #mitex(` \\newcommand{\\f}[2]{#1f(#2)} \\f\\relax{x} = \\int_{-\\infty}^\\infty \\f\\hat\\xi\\,e^{2 \\pi i \\xi x} \\,d\\xi `) Touying also provides a touying-mitex function, which can be used for example #touying-mitex(mitex, ` f(x) &amp;= \\pause x^2 + 2x + 1 \\\\ &amp;= \\pause (x + 1)^2 \\\\ `) ","keywords":"","version":"Next"},{"title":"Fletcher","type":0,"sectionRef":"#","url":"/touying/docs/next/integration/fletcher","content":"Fletcher Touying provides the touying-reducer, which adds pause and meanwhile animations to Fletcher. An example: #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;@preview/cetz:0.2.2&quot; #import &quot;@preview/fletcher:0.4.4&quot; as fletcher: node, edge // cetz and fletcher bindings for touying #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: fletcher.diagram, cover: fletcher.hide) #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides.with(title-slide: false, outline-slide: false) // cetz animation #slide[ Cetz in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) ] // fletcher animation #slide[ Fletcher in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) ] ","keywords":"","version":"Next"},{"title":"Introduction to Touying","type":0,"sectionRef":"#","url":"/touying/docs/next/intro","content":"","keywords":"","version":"Next"},{"title":"Why Use Touying​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/next/intro#why-use-touying","content":" Unlike PowerPoint, Touying is not a &quot;what you see is what you get&quot; tool. You can write your slides in a &quot;content and style separation&quot; manner, especially with Typst, which offers a concise yet powerful syntax, better supporting content like code blocks, mathematical formulas, and theorems. Another advantage is that, with templates, writing slides with Touying is much faster than PowerPoint. Therefore, Touying is more suitable for users with a demand for &quot;research writing.&quot;Compared to Markdown Slides, Touying, relying on Typst, has more powerful typesetting control, such as headers, footers, layout, and convenient custom functions. These are capabilities that Markdown struggles to provide, or does not do well. Additionally, Touying offers #pause and #meanwhile markers, providing more convenient dynamic slide capabilities.Compared to Beamer, Touying has faster compilation speed, a more concise syntax, and simpler theme customization capabilities. Touying's compilation speed can be maintained in milliseconds or tens of milliseconds, compared to Beamer's compilation time of seconds or tens of seconds. Touying's syntax is more concise than Beamer, making it easier to change templates and create your own templates. In terms of features, Touying supports most of Beamer's capabilities and provides some convenient features that Beamer lacks.Compared to Polylux, Touying provides an object-oriented programming (OOP) style syntax, allowing the simulation of &quot;global variables&quot; through a global singleton. This makes it easy to write themes. Touying does not rely on counter and locate to implement #pause, resulting in better performance. Touying is a community-driven project (we welcome more people to join), and it does not overly emphasize maintaining API consistency. Instead, it chooses to maintain documentation for multiple versions, providing more novel yet powerful features.  ","version":"Next","tagName":"h2"},{"title":"About the Name​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/next/intro#about-the-name","content":" &quot;Touying&quot; is derived from the Chinese word &quot;投影&quot; (tóuyǐng), which means &quot;projection&quot; In English, it also conveys the meaning of a &quot;project&quot;. In comparison, the term &quot;beamer&quot; in LaTeX means a projector in German.  ","version":"Next","tagName":"h2"},{"title":"About the Documentation​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/next/intro#about-the-documentation","content":" This documentation is powered by Docusaurus. We will maintain English and Chinese versions of the documentation for Touying, and for each major version, we will maintain a documentation copy. This allows you to easily refer to old versions of the Touying documentation and migrate to new versions.  Docusaurus creates a new version:  npm run docusaurus docs:version 0.y.x   ","version":"Next","tagName":"h2"},{"title":"Contribution​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/next/intro#contribution","content":" Touying is free, open-source, and community-driven. If you're interested, you can visit GitHub anytime and raise issues or submit pull requests. We also welcome you to join the touying-typ organization.  ","version":"Next","tagName":"h2"},{"title":"Gallery​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/next/intro#gallery","content":" Touying offers a gallery page via wiki, where you can browse elegant slides created by Touying users. You're also encouraged to contribute your own beautiful slides here!  ","version":"Next","tagName":"h2"},{"title":"License​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/next/intro#license","content":" Touying is released under the MIT license. ","version":"Next","tagName":"h2"},{"title":"Multi-File Architecture","type":0,"sectionRef":"#","url":"/touying/docs/next/multi-file","content":"","keywords":"","version":"Next"},{"title":"Configuration and Content Separation​","type":1,"pageTitle":"Multi-File Architecture","url":"/touying/docs/next/multi-file#configuration-and-content-separation","content":" A simple Touying multi-file architecture consists of three files: a global configuration file globals.typ, a main entry file main.typ, and a content file content.typ for storing the actual content.  These three files are separated to allow both main.typ and content.typ to import globals.typ without causing circular references.  globals.typ can be used to store some global custom functions and initialize Touying themes:  // globals.typ #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.numbering)(self: s, section: &quot;1.&quot;, &quot;1.1&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #let (slide, empty-slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) // as well as some utility functions   main.typ, as the main entry point of the project, applies show rules by importing globals.typ and includes content.typ using #include:  // main.typ #import &quot;/globals.typ&quot;: * #show: init #show strong: alert #show: slides #include &quot;content.typ&quot;   content.typ is where you write the actual content:  // content.typ #import &quot;/globals.typ&quot;: * = The Section == Slide Title Hello, Touying! #focus-slide[ Focus on me. ]   ","version":"Next","tagName":"h2"},{"title":"Multiple Sections​","type":1,"pageTitle":"Multi-File Architecture","url":"/touying/docs/next/multi-file#multiple-sections","content":" Implementing multiple sections is also straightforward. You only need to create a sections directory and move the content.typ file to the sections.typ directory, for example:  // main.typ #import &quot;/globals.typ&quot;: * #show: init #show strong: alert #show: slides #include &quot;sections/content.typ&quot; // #include &quot;sections/another-section.typ&quot;   And  // sections/content.typ #import &quot;/globals.typ&quot;: * = The Section == Slide Title Hello, Touying! #focus-slide[ Focus on me. ]   Now, you have learned how to use Touying to achieve a multi-file architecture for large-scale slides. ","version":"Next","tagName":"h2"},{"title":"Page Layout","type":0,"sectionRef":"#","url":"/touying/docs/next/layout","content":"","keywords":"","version":"Next"},{"title":"Basic Concepts​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/next/layout#basic-concepts","content":" To create stylish slides using Typst, it's essential to understand Typst's page model correctly. If you're not concerned with customizing page styles, you can choose to skip this section. However, it's still recommended to go through it.  Let's illustrate Typst's default page model through a specific example.  #let container = rect.with(height: 100%, width: 100%, inset: 0pt) #let innerbox = rect.with(stroke: (dash: &quot;dashed&quot;)) #set text(size: 30pt) #set page( paper: &quot;presentation-16-9&quot;, header: container[#innerbox[Header]], header-ascent: 30%, footer: container[#innerbox[Footer]], footer-descent: 30%, ) #place(top + right)[Margin→] #container[ #container[ #innerbox[Content] ] ]     We need to distinguish the following concepts:  Model: Typst has a model similar to the CSS Box Model, divided into Margin, Padding, and Content. However, padding is not a property of set page(..) but is obtained by manually adding #pad(..).Margin: Margins are the edges of the page, divided into top, bottom, left, and right. They are the core of Typst's page model, and all other properties are influenced by margins, especially Header and Footer. Header and Footer are actually located within the Margin.Header: The Header is the content at the top of the page, divided into container and innerbox. We can observe that the edge of the header container and padding does not align but has some space in between, which is actually header-ascent: 30%, where the percentage is relative to the margin-top. Additionally, we notice that the header innerbox is actually located at the bottom left corner of the header container, meaning innerbox defaults to #set align(left + bottom).Footer: The Footer is the content at the bottom of the page, similar to the Header but in the opposite direction.Place: The place function enables absolute positioning relative to the parent container without affecting other elements inside the parent container. It allows specifying alignment, dx, and dy, making it suitable for placing decorative elements like logos.  Therefore, to apply Typst to create slides, we only need to set:  #set page( margin: (x: 4em, y: 2em), header: align(top)[Header], footer: align(bottom)[Footer], header-ascent: 0em, footer-descent: 0em, )   However, we still need to address how the header occupies the entire page width. Here, we use negative padding to achieve this. For instance:  #let container = rect.with(stroke: (dash: &quot;dashed&quot;), height: 100%, width: 100%, inset: 0pt) #let innerbox = rect.with(fill: rgb(&quot;#d0d0d0&quot;)) #let margin = (x: 4em, y: 2em) // negative padding for header and footer #let negative-padding = pad.with(x: -margin.x, y: 0em) #set text(size: 30pt) #set page( paper: &quot;presentation-16-9&quot;, margin: margin, header: negative-padding[#container[#align(top)[#innerbox(width: 100%)[Header]]]], header-ascent: 0em, footer: negative-padding[#container[#align(bottom)[#innerbox(width: 100%)[Footer]]]], footer-descent: 0em, ) #place(top + right)[↑Margin→] #container[ #container[ #innerbox[Content] ] ]     ","version":"Next","tagName":"h2"},{"title":"Page Management​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/next/layout#page-management","content":" Since modifying page parameters using the set page(..) command in Typst creates a new page instead of modifying the current one, Touying chooses to maintain a s.page-args member variable and a s.padding member variable. These parameters are only applied when Touying creates a new slide, so users only need to focus on s.page-args and s.padding.  For example, the previous example can be modified as follows:  #(s.page-args += ( margin: (x: 4em, y: 2em), header: align(top)[Header], footer: align(bottom)[Footer], header-ascent: 0em, footer-descent: 0em, ))   Touying automatically detects the value of margin.x and adds negative padding to the header if self.full-header == true.  Similarly, if you're unsatisfied with the header or footer style of a particular theme, you can change it using:  #(s.page-args.footer = [Custom Footer])   However, it's essential to note that if you change page parameters in this way, you need to place it before #let (slide, empty-slide) = utils.slides(s), or you'll have to call #let (slide, empty-slide) = utils.slides(s) again.  Warning Therefore, you should not use the set page(..) command directly but instead modify the s.page-args member variable internally.  This approach also allows us to query the current page parameters in real-time using s.page-args, which is useful for functions that need to obtain margins or the current page's background color, such as transparent-cover. This is partially equivalent to context get rule and is actually more convenient to use.  ","version":"Next","tagName":"h2"},{"title":"Application: Adding a Logo​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/next/layout#application-adding-a-logo","content":" Adding a logo to slides is a very common but also a very versatile requirement. The difficulty lies in the fact that the required size and position of the logo often vary from person to person. Therefore, most of Touying's themes do not include configuration options for logos. But with the concepts of page layout mentioned in this section, we know that we can use the place function in the header or footer to place a logo image.  For example, suppose we decide to add the GitHub icon to the metropolis theme. We can implement it like this:  #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;@preview/octique:0.1.0&quot;: * #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;) #(s.page-args.header = self =&gt; { // display the original header utils.call-or-display(self, s.page-args.header) // place logo at the top-right place(top + right, dx: -0.5em, dy: 0.3em)[ #octique(&quot;mark-github&quot;, color: rgb(&quot;#fafafa&quot;), width: 1.5em, height: 1.5em) ] }) #let (init, slide) = utils.methods(s) #show: init #slide(title: [Title])[ Logo example. ]     Here, utils.call-or-display(self, body) can be used to display body as content or a callback function in the form self =&gt; content.  ","version":"Next","tagName":"h2"},{"title":"Page Columns​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/next/layout#page-columns","content":" If you need to divide the page into two or three columns, you can use the compose feature provided by the default slide function in Touying. The simplest example is as follows:  #slide[ First column. ][ Second column. ]     If you need to change the way columns are composed, you can modify the composer parameter of slide. The default parameter is utils.side-by-side.with(columns: auto, gutter: 1em). If we want the left column to occupy the remaining width, we can use  #slide(composer: (1fr, auto))[ First column. ][ Second column. ]    ","version":"Next","tagName":"h2"},{"title":"Touying Counters","type":0,"sectionRef":"#","url":"/touying/docs/next/progress/counters","content":"","keywords":"","version":"Next"},{"title":"Slide Counter​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/next/progress/counters#slide-counter","content":" You can access the slide counter using states.slide-counter and display the current slide number with states.slide-counter.display().  ","version":"Next","tagName":"h2"},{"title":"Last-Slide Counter​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/next/progress/counters#last-slide-counter","content":" In some cases, we may need to add an appendix to slides, leading to the requirement to freeze the last-slide counter. Therefore, a second counter is maintained here.  You can use states.last-slide-number to display the number of the last slide before the appendix.  ","version":"Next","tagName":"h2"},{"title":"Progress​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/next/progress/counters#progress","content":" You can use  #states.touying-progress(ratio =&gt; ..)   to show the current progress.  ","version":"Next","tagName":"h2"},{"title":"Appendix​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/next/progress/counters#appendix","content":" You can use  // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide, empty-slide) = utils.methods(s) #slide[ appendix ]   syntax to enter the appendix.  Additionally, #let s = (s.methods.appendix-in-outline)(self: s, false) can be used to hide the appendix section from the outline. ","version":"Next","tagName":"h2"},{"title":"Pinit","type":0,"sectionRef":"#","url":"/touying/docs/next/integration/pinit","content":"","keywords":"","version":"Next"},{"title":"Simple Example​","type":1,"pageTitle":"Pinit","url":"/touying/docs/next/integration/pinit#simple-example","content":" #import &quot;@preview/pinit:0.1.3&quot;: * #set text(size: 24pt) A simple #pin(1)highlighted text#pin(2). #pinit-highlight(1, 2) #pinit-point-from(2)[It is simple.]     Another example:    ","version":"Next","tagName":"h2"},{"title":"Complex Example​","type":1,"pageTitle":"Pinit","url":"/touying/docs/next/integration/pinit#complex-example","content":"   An example of shared usage with Touying:  #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;@preview/pinit:0.1.3&quot;: * #(s.page-args.paper = &quot;presentation-4-3&quot;) #let (init, slides) = utils.methods(s) #show: init #set text(size: 20pt, font: &quot;Calibri&quot;, ligatures: false) #show heading: set text(weight: &quot;regular&quot;) #show heading: set block(above: 1.4em, below: 1em) #show heading.where(level: 1): set text(size: 1.5em) // Useful functions #let crimson = rgb(&quot;#c00000&quot;) #let greybox(..args, body) = rect(fill: luma(95%), stroke: 0.5pt, inset: 0pt, outset: 10pt, ..args, body) #let redbold(body) = { set text(fill: crimson, weight: &quot;bold&quot;) body } #let blueit(body) = { set text(fill: blue) body } #let (slide, empty-slide) = utils.slides(s) #show: slides // Main body #slide(self =&gt; [ #let (uncover, only) = utils.methods(self) = Asymptotic Notation: $O$ Use #pin(&quot;h1&quot;)asymptotic notations#pin(&quot;h2&quot;) to describe asymptotic efficiency of algorithms. (Ignore constant coefficients and lower-order terms.) #pause #greybox[ Given a function $g(n)$, we denote by $O(g(n))$ the following *set of functions*: #redbold(${f(n): &quot;exists&quot; c &gt; 0 &quot;and&quot; n_0 &gt; 0, &quot;such that&quot; f(n) &lt;= c dot g(n) &quot;for all&quot; n &gt;= n_0}$) ] #pinit-highlight(&quot;h1&quot;, &quot;h2&quot;) #pause $f(n) = O(g(n))$: #pin(1)$f(n)$ is *asymptotically smaller* than $g(n)$.#pin(2) // #absolute-place(dx: 550pt, dy: 320pt, image(width: 25%, &quot;asymptotic.png&quot;)) #pause $f(n) redbold(in) O(g(n))$: $f(n)$ is *asymptotically* #redbold[at most] $g(n)$. #only(&quot;4-&quot;, pinit-line(stroke: 3pt + crimson, start-dy: -0.25em, end-dy: -0.25em, 1, 2)) #pause #block[Insertion Sort as an #pin(&quot;r1&quot;)example#pin(&quot;r2&quot;):] - Best Case: $T(n) approx c n + c' n - c''$ #pin(3) - Worst case: $T(n) approx c n + (c' \\/ 2) n^2 - c''$ #pin(4) #pinit-rect(&quot;r1&quot;, &quot;r2&quot;) #pause #pinit-place(3, dx: 15pt, dy: -15pt)[#redbold[$T(n) = O(n)$]] #pinit-place(4, dx: 15pt, dy: -15pt)[#redbold[$T(n) = O(n)$]] #pause #blueit[Q: Is $n^(3) = O(n^2)$#pin(&quot;que&quot;)? How to prove your answer#pin(&quot;ans&quot;)?] #pause #only(&quot;8-&quot;, pinit-point-to(&quot;que&quot;, fill: crimson, redbold[No.])) #only(&quot;8-&quot;, pinit-point-from(&quot;ans&quot;, body-dx: -150pt)[ Show that the equation $(3/2)^n &gt;= c$ \\ has infinitely many solutions for $n$. ]) ])    ","version":"Next","tagName":"h2"},{"title":"Touying Sections","type":0,"sectionRef":"#","url":"/touying/docs/next/progress/sections","content":"","keywords":"","version":"Next"},{"title":"touying-outline​","type":1,"pageTitle":"Touying Sections","url":"/touying/docs/next/progress/sections#touying-outline","content":" #touying-outline(enum-args: (:), padding: 0pt) is used to display a simple outline.  Of course, you can now just use #outline(indent: 2em, title: none).  ","version":"Next","tagName":"h2"},{"title":"touying-final-sections​","type":1,"pageTitle":"Touying Sections","url":"/touying/docs/next/progress/sections#touying-final-sections","content":" #states.touying-final-sections(final-sections =&gt; ..) is used to customize the display of the outline.  ","version":"Next","tagName":"h2"},{"title":"touying-progress-with-sections​","type":1,"pageTitle":"Touying Sections","url":"/touying/docs/next/progress/sections#touying-progress-with-sections","content":" #states.touying-progress-with-sections((current-sections: .., final-sections: .., current-slide-number: .., last-slide-number: ..) =&gt; ..)   This is the most powerful one, allowing you to build any complex progress display with its functionalities. ","version":"Next","tagName":"h2"},{"title":"Sections and Subsections","type":0,"sectionRef":"#","url":"/touying/docs/next/sections","content":"","keywords":"","version":"Next"},{"title":"Structure​","type":1,"pageTitle":"Sections and Subsections","url":"/touying/docs/next/sections#structure","content":" Similar to Beamer, Touying also has the concept of sections and subsections.  Generally, level 1, level 2, and level 3 headings correspond to section, subsection, and title, respectively, as in the dewdrop theme.  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.dewdrop.register() #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Section == Subsection === Title Hello, Touying!     However, often we don't need subsections, and we can use level 1 and level 2 headings to correspond to section and title, as in the university theme.  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.university.register() #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Section == Title Hello, Touying!     In fact, we can control this behavior through the slide-level parameter of the slides function. slide-level represents the complexity of the nested structure, starting from 0. For example, #show: slides.with(slide-level: 2) is equivalent to the section, subsection, and title structure; while #show: slides.with(slide-level: 1) is equivalent to the section and title structure.  ","version":"Next","tagName":"h2"},{"title":"Numbering​","type":1,"pageTitle":"Sections and Subsections","url":"/touying/docs/next/sections#numbering","content":" To add numbering to sections and subsections, we simply use:  #let s = (s.methods.numbering)(self: s, section: &quot;1.&quot;, &quot;1.1&quot;)   This sets the default numbering to 1.1, with the section corresponding to 1..  ","version":"Next","tagName":"h2"},{"title":"Table of Contents​","type":1,"pageTitle":"Sections and Subsections","url":"/touying/docs/next/sections#table-of-contents","content":" Displaying a table of contents in Touying is straightforward:  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.simple.register() #let (init, slides, alert, touying-outline) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides.with(slide-level: 2) = Section == Subsection === Title ==== Table of contents #touying-outline()     Where the definition of touying-outline() is:  #let touying-outline(enum-args: (:), padding: 0pt) = { .. }   You can modify the parameters of the internal enum through enum-args.  Of course, you can also use Typst's native outline:  #outline(title: none, indent: 2em)     If you have complex custom requirements for the table of contents, you can use:  #states.touying-final-sections(sections =&gt; ..)   As done in the dewdrop theme. ","version":"Next","tagName":"h2"},{"title":"Aqua Theme","type":0,"sectionRef":"#","url":"/touying/docs/next/themes/aqua","content":"","keywords":"","version":"Next"},{"title":"Initialization​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/next/themes/aqua#initialization","content":" You can initialize it with the following code:  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.aqua.register(aspect-ratio: &quot;16-9&quot;, lang: &quot;en&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, outline-slide, focus-slide) = utils.slides(s) #show: slides   Where register takes parameters:  aspect-ratio: The aspect ratio of slides, either &quot;16-9&quot; or &quot;4-3&quot;, default is &quot;16-9&quot;.footer: Content shown on the right side of the footer, default is states.slide-counter.display().lang: Language configuration, currently supports &quot;en&quot; and &quot;zh&quot;, default is &quot;en&quot;.  Aqua theme also provides an #alert[..] function, which you can utilize with #show strong: alert using *alert text* syntax.  ","version":"Next","tagName":"h2"},{"title":"Color Themes​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/next/themes/aqua#color-themes","content":" Aqua by default uses:  #let s = (s.methods.colors)( self: s, primary: rgb(&quot;#003F88&quot;), primary-light: rgb(&quot;#2159A5&quot;), primary-lightest: rgb(&quot;#F2F4F8&quot;),   color themes, which you can modify by #let s = (s.methods.colors)(self: s, ..).  ","version":"Next","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/next/themes/aqua#slide-function-family","content":" Aqua theme offers a series of custom slide functions:  #title-slide(..args)   title-slide will read information from self.info for display.    #let outline-slide(self: none, enum-args: (:), leading: 50pt)   Display an outline slide.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // Aqua theme title: auto, )[ ... ]   A default ordinary slide function with title and footer, where title defaults to the current section title.    #focus-slide[ ... ]   Used to draw the audience's attention. The background color is self.colors.primary.    #new-section-slide(title)   Start a new section with the given title.  ","version":"Next","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/next/themes/aqua#slides-function","content":" The slides function has parameters:  title-slide: Default is true.outline-slide: Default is true.slide-level: Default is 1.  They can be set via #show: slides.with(..).  PS: The outline title can be modified via #(s.outline-title = [Outline]).  Additionally, you can disable the automatic inclusion of new-section-slide functionality by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.aqua.register(aspect-ratio: &quot;16-9&quot;, lang: &quot;en&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, outline-slide, focus-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/next/themes/aqua#example","content":" #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.aqua.register(aspect-ratio: &quot;16-9&quot;, lang: &quot;en&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, outline-slide, focus-slide) = utils.slides(s) #show: slides = The Section == Slide Title #slide[ #lorem(40) ] #focus-slide[ Another variant with primary color in background... ] == Summary #align(center + horizon)[ #set text(size: 3em, weight: &quot;bold&quot;, s.colors.primary) THANKS FOR ALL ]  ","version":"Next","tagName":"h2"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/touying/docs/next/start","content":"","keywords":"","version":"Next"},{"title":"More Complex Examples​","type":1,"pageTitle":"Getting Started","url":"/touying/docs/next/start#more-complex-examples","content":" In fact, Touying provides various styles for slide writing. You can also use the #slide[..] syntax to access more powerful features provided by Touying.    Touying offers many built-in themes to easily create beautiful slides. For example, in this case:  #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;)   you can use the university theme. For more detailed tutorials on themes, you can refer to the following sections.  #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;@preview/cetz:0.2.2&quot; #import &quot;@preview/fletcher:0.4.4&quot; as fletcher: node, edge #import &quot;@preview/ctheorems:1.1.2&quot;: * // cetz and fletcher bindings for touying #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: fletcher.diagram, cover: fletcher.hide) // Register university theme // You can replace it with other themes and it can still work normally #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) // Set the numbering of section and subsection #let s = (s.methods.numbering)(self: s, section: &quot;1.&quot;, &quot;1.1&quot;) // Set the speaker notes configuration // #let s = (s.methods.show-notes-on-second-screen)(self: s, right) // Global information configuration #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) // Pdfpc configuration // typst query --root . ./example.typ --field value --one &quot;&lt;pdfpc-file&gt;&quot; &gt; ./example.pdfpc #let s = (s.methods.append-preamble)(self: s, pdfpc.config( duration-minutes: 30, start-time: datetime(hour: 14, minute: 10, second: 0), end-time: datetime(hour: 14, minute: 40, second: 0), last-minutes: 5, note-font-size: 12, disable-markdown: false, default-transition: ( type: &quot;push&quot;, duration-seconds: 2, angle: ltr, alignment: &quot;vertical&quot;, direction: &quot;inward&quot;, ), )) // Theorems configuration by ctheorems #show: thmrules.with(qed-symbol: $square$) #let theorem = thmbox(&quot;theorem&quot;, &quot;Theorem&quot;, fill: rgb(&quot;#eeffee&quot;)) #let corollary = thmplain( &quot;corollary&quot;, &quot;Corollary&quot;, base: &quot;theorem&quot;, titlefmt: strong ) #let definition = thmbox(&quot;definition&quot;, &quot;Definition&quot;, inset: (x: 1.2em, top: 1em)) #let example = thmplain(&quot;example&quot;, &quot;Example&quot;).with(numbering: none) #let proof = thmproof(&quot;proof&quot;, &quot;Proof&quot;) // Extract methods #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert // Extract slide functions #let (slide, empty-slide) = utils.slides(s) #show: slides = Animation == Simple Animation We can use `#pause` to #pause display something later. #pause Just like this. #meanwhile Meanwhile, #pause we can also use `#meanwhile` to #pause display other content synchronously. #speaker-note[ + This is a speaker note. + You won't see it unless you use `#let s = (s.math.show-notes-on-second-screen)(self: s, right)` ] == Complex Animation - Mark-Style At subslide #utils.touying-wrapper((self: none) =&gt; str(self.subslide)), we can use #uncover(&quot;2-&quot;)[`#uncover` function] for reserving space, use #only(&quot;2-&quot;)[`#only` function] for not reserving space, #alternatives[call `#only` multiple times \\u{2717}][use `#alternatives` function #sym.checkmark] for choosing one of the alternatives. == Complex Animation - Callback-Style #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) At subslide #self.subslide, we can use #uncover(&quot;2-&quot;)[`#uncover` function] for reserving space, use #only(&quot;2-&quot;)[`#only` function] for not reserving space, #alternatives[call `#only` multiple times \\u{2717}][use `#alternatives` function #sym.checkmark] for choosing one of the alternatives. ]) == Math Equation Animation Touying equation with `pause`: #touying-equation(` f(x) &amp;= pause x^2 + 2x + 1 \\ &amp;= pause (x + 1)^2 \\ `) #meanwhile Here, #pause we have the expression of $f(x)$. #pause By factorizing, we can obtain this result. == CeTZ Animation CeTZ Animation in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) == Fletcher Animation Fletcher Animation in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) = Theorems == Prime numbers #definition[ A natural number is called a #highlight[_prime number_] if it is greater than 1 and cannot be written as the product of two smaller natural numbers. ] #example[ The numbers $2$, $3$, and $17$ are prime. @cor_largest_prime shows that this list is not exhaustive! ] #theorem(&quot;Euclid&quot;)[ There are infinitely many primes. ] #proof[ Suppose to the contrary that $p_1, p_2, dots, p_n$ is a finite enumeration of all primes. Set $P = p_1 p_2 dots p_n$. Since $P + 1$ is not in our list, it cannot be prime. Thus, some prime factor $p_j$ divides $P + 1$. Since $p_j$ also divides $P$, it must divide the difference $(P + 1) - P = 1$, a contradiction. ] #corollary[ There is no largest prime number. ] &lt;cor_largest_prime&gt; #corollary[ There are infinitely many composite numbers. ] #theorem[ There are arbitrarily long stretches of composite numbers. ] #proof[ For any $n &gt; 2$, consider $ n! + 2, quad n! + 3, quad ..., quad n! + n #qedhere $ ] = Others == Side-by-side #slide(composer: (1fr, 1fr))[ First column. ][ Second column. ] == Multiple Pages #lorem(200) // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide, empty-slide) = utils.slides(s) == Appendix #slide[ Please pay attention to the current slide number. ]     Touying offers many built-in themes to easily create beautiful slides. For example, in this case:  #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;)   you can use the university theme. For more detailed tutorials on themes, you can refer to the following sections. ","version":"Next","tagName":"h2"},{"title":"Metropolis Theme","type":0,"sectionRef":"#","url":"/touying/docs/next/themes/metropolis","content":"","keywords":"","version":"Next"},{"title":"Initialization​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/next/themes/metropolis#initialization","content":" You can initialize it using the following code:  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides   The register function takes the following parameters:  aspect-ratio: The aspect ratio of the slides, either &quot;16-9&quot; or &quot;4-3,&quot; defaulting to &quot;16-9.&quot;header: Content displayed in the header, defaulting to states.current-section-title, or it can be passed as a function like self =&gt; self.info.title.footer: Content displayed in the footer, defaulting to [], or it can be passed as a function like self =&gt; self.info.author.footer-right: Content displayed on the right side of the footer, defaulting to states.slide-counter.display() + &quot; / &quot; + states.last-slide-number.footer-progress: Whether to show the progress bar at the bottom of the slide, defaulting to true.  The Metropolis theme also provides an #alert[..] function, which you can use with #show strong: alert using the *alert text* syntax.  ","version":"Next","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/next/themes/metropolis#color-theme","content":" Metropolis uses the following default color theme:  #let s = (s.methods.colors)( self: s, neutral-lightest: rgb(&quot;#fafafa&quot;), primary-dark: rgb(&quot;#23373b&quot;), secondary-light: rgb(&quot;#eb811b&quot;), secondary-lighter: rgb(&quot;#d6c6b7&quot;), )   You can modify this color theme using #let s = (s.methods.colors)(self: s, ..).  ","version":"Next","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/next/themes/metropolis#slide-function-family","content":" The Metropolis theme provides a variety of custom slide functions:  #title-slide(extra: none, ..args)   title-slide reads information from self.info for display, and you can also pass in an extra parameter to display additional information.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // metropolis theme title: auto, footer: auto, align: horizon, )[ ... ]   A default slide with headers and footers, where the title defaults to the current section title, and the footer is what you set.    #focus-slide[ ... ]   Used to draw attention, with the background color set to self.colors.primary-dark.    #new-section-slide(short-title: auto, title)   Creates a new section with the given title.  ","version":"Next","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/next/themes/metropolis#slides-function","content":" The slides function has the following parameters:  title-slide: Defaults to true.outline-slide: Defaults to true.slide-level: Defaults to 1.  You can set these using #show: slides.with(..).  PS: You can modify the outline title using #(s.outline-title = [Outline]).  And the function of automatically adding new-section-slide can be turned off by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slide, slides, title-slide, new-section-slide, focus-slide, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/next/themes/metropolis#example","content":" #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #set text(font: &quot;Fira Sans&quot;, weight: &quot;light&quot;, size: 20pt) #show math.equation: set text(font: &quot;Fira Math&quot;) #set strong(delta: 100) #set par(justify: true) #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides = First Section #slide[ A slide without a title but with some *important* information. ] == A long long long long long long long long long long long long long long long long long long long long long long long long Title #slide[ A slide with equation: $ x_(n+1) = (x_n + a/x_n) / 2 $ #lorem(200) ] = Second Section #focus-slide[ Wake up! ] == Simple Animation #slide[ A simple #pause dynamic slide with #alert[alert] #pause text. ] // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide, empty-slide) = utils.slides(s) = Appendix #slide[ Appendix. ]  ","version":"Next","tagName":"h2"},{"title":"Dewdrop Theme","type":0,"sectionRef":"#","url":"/touying/docs/next/themes/dewdrop","content":"","keywords":"","version":"Next"},{"title":"Initialization​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/next/themes/dewdrop#initialization","content":" You can initialize it using the following code:  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.dewdrop.register( aspect-ratio: &quot;16-9&quot;, footer: [Dewdrop], navigation: &quot;mini-slides&quot;, // navigation: &quot;sidebar&quot;, // navigation: none, ) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides   The register function takes the following parameters:  aspect-ratio: The aspect ratio of the slides, either &quot;16-9&quot; or &quot;4-3,&quot; defaulting to &quot;16-9.&quot;navigation: The navigation bar style, which can be &quot;sidebar&quot;, &quot;mini-slides&quot;, or none, defaulting to &quot;sidebar&quot;.sidebar: Sidebar navigation settings, defaulting to (width: 10em).mini-slides: Mini-slides settings, defaulting to (height: 2em, x: 2em, section: false, subsection: true). height: The height of mini-slides, defaulting to 2em.x: Padding on the x-axis for mini-slides, defaulting to 2em.section: Whether to display slides after the section and before the subsection, defaulting to false.subsection: Whether to split mini-slides based on subsections or compress them into one line, defaulting to true. footer: Content displayed in the footer, defaulting to [], or it can be passed as a function like self =&gt; self.info.author.footer-right: Content displayed on the right side of the footer, defaulting to states.slide-counter.display() + &quot; / &quot; + states.last-slide-number.primary: Primary color, defaulting to rgb(&quot;#0c4842&quot;).alpha: Transparency, defaulting to 70%.  The Dewdrop theme also provides an #alert[..] function, which you can use with #show strong: alert using the *alert text* syntax.  ","version":"Next","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/next/themes/dewdrop#color-theme","content":" Dewdrop uses the following default color theme:  #let s = (s.methods.colors)( self: s, neutral-darkest: rgb(&quot;#000000&quot;), neutral-dark: rgb(&quot;#202020&quot;), neutral-light: rgb(&quot;#f3f3f3&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), primary: primary, )   You can modify this color theme using #let s = (s.methods.colors)(self: s, ..).  ","version":"Next","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/next/themes/dewdrop#slide-function-family","content":" The Dewdrop theme provides a variety of custom slide functions:  #title-slide(extra: none, ..args)   title-slide reads information from self.info for display, and you can also pass in an extra parameter to display additional information.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // Dewdrop theme footer: auto, )[ ... ]   A default slide with navigation and footer, where the footer is what you set.    #focus-slide[ ... ]   Used to draw attention, with the background color set to self.colors.primary.  ","version":"Next","tagName":"h2"},{"title":"Special Functions​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/next/themes/dewdrop#special-functions","content":" #d-outline(enum-args: (:), list-args: (:), cover: true)   Displays the current table of contents. The cover parameter specifies whether to hide sections in an inactive state.    #d-sidebar()   An internal function used to display the sidebar.    #d-mini-slides()   An internal function used to display mini-slides.  ","version":"Next","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/next/themes/dewdrop#slides-function","content":" The slides function has the following parameters:  title-slide: Defaults to true.outline-slide: Defaults to true.slide-level: Defaults to 2.  You can set these using #show: slides.with(..).  PS: You can modify the outline title using #(s.outline-title = [Outline]).  And the function of automatically adding new-section-slide can be turned off by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.dewdrop.register(aspect-ratio: &quot;16-9&quot;, footer: [Dewdrop]) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/next/themes/dewdrop#example","content":" #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.dewdrop.register( aspect-ratio: &quot;16-9&quot;, footer: [Dewdrop], navigation: &quot;mini-slides&quot;, // navigation: none, ) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides = Section A == Subsection A.1 #slide[ A slide with equation: $ x_(n+1) = (x_n + a/x_n) / 2 $ ] == Subsection A.2 #slide[ A slide without a title but with *important* infos ] = Section B == Subsection B.1 #slide[ #lorem(80) ] #focus-slide[ Wake up! ] == Subsection B.2 #slide[ We can use `#pause` to #pause display something later. #pause Just like this. #meanwhile Meanwhile, #pause we can also use `#meanwhile` to #pause display other content synchronously. ] // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide, empty-slide) = utils.slides(s) = Appendix === Appendix #slide[ Please pay attention to the current slide number. ]  ","version":"Next","tagName":"h2"},{"title":"Simple Theme","type":0,"sectionRef":"#","url":"/touying/docs/next/themes/simple","content":"","keywords":"","version":"Next"},{"title":"Initialization​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/next/themes/simple#initialization","content":" You can initialize it using the following code:  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;, footer: [Simple slides]) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide, title-slide, centered-slide, focus-slide) = utils.slides(s) #show: slides   The register function takes the following parameters:  aspect-ratio: The aspect ratio of the slides, either &quot;16-9&quot; or &quot;4-3,&quot; defaulting to &quot;16-9.&quot;footer: Content displayed in the footer, defaulting to [], or it can be passed as a function like self =&gt; self.info.author.footer-right: Content displayed on the right side of the footer, defaulting to states.slide-counter.display() + &quot; / &quot; + states.last-slide-number.background: Background color, defaulting to white.foreground: Text color, defaulting to black.primary: Theme color, defaulting to aqua.darken(50%).  ","version":"Next","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/next/themes/simple#slide-function-family","content":" The Simple theme provides a variety of custom slide functions:  #centered-slide(section: ..)[ ... ]   A slide with content centered, and the section parameter can be used to create a new section.    #title-slide[ ... ]   Similar to centered-slide, this is provided for consistency with Polylux syntax.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // simple theme args footer: auto, )[ ... ]   A default slide with headers and footers, where the header corresponds to the current section, and the footer is what you set.    #focus-slide(foreground: ..., background: ...)[ ... ]   Used to draw attention, it optionally accepts a foreground color (defaulting to white) and a background color (defaulting to auto, i.e., self.colors.primary).  ","version":"Next","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/next/themes/simple#slides-function","content":" The slides function has the following parameter:  slide-level: Defaults to 1.  You can set it using #show: slides.with(..).  And the function of automatically adding new-section-slide can be turned off by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;, footer: [Simple slides]) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide, title-slide, centered-slide, focus-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/next/themes/simple#example","content":" #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;, footer: [Simple slides]) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide, title-slide, centered-slide, focus-slide) = utils.slides(s) #show: slides #title-slide[ = Keep it simple! #v(2em) Alpha #footnote[Uni Augsburg] #h(1em) Bravo #footnote[Uni Bayreuth] #h(1em) Charlie #footnote[Uni Chemnitz] #h(1em) July 23 ] == First slide #slide[ #lorem(20) ] #focus-slide[ _Focus!_ This is very important. ] = Let's start a new section! == Dynamic slide #slide[ Did you know that... #pause ...you can see the current section at the top of the slide? ]  ","version":"Next","tagName":"h2"},{"title":"Fit to Height / Width","type":0,"sectionRef":"#","url":"/touying/docs/next/utilities/fit-to","content":"","keywords":"","version":"Next"},{"title":"Fit to Height​","type":1,"pageTitle":"Fit to Height / Width","url":"/touying/docs/next/utilities/fit-to#fit-to-height","content":" If you need to make an image fill the remaining slide height, you can try the fit-to-height function:  #utils.fit-to-height(1fr)[BIG]   Function definition:  #let fit-to-height( width: none, prescale-width: none, grow: true, shrink: true, height, body ) = { .. }   Parameters:  width: If specified, this will determine the width of the content after scaling. So, if you want the scaled content to fill half of the slide width, you can use width: 50%.prescale-width: This parameter allows you to make Typst's layout assume that the given content is to be laid out in a container of a certain width before scaling. For example, you can use prescale-width: 200% assuming the slide's width is twice the original.grow: Whether it can grow, default is true.shrink: Whether it can shrink, default is true.height: The specified height.body: The specific content.  ","version":"Next","tagName":"h2"},{"title":"Fit to Width​","type":1,"pageTitle":"Fit to Height / Width","url":"/touying/docs/next/utilities/fit-to#fit-to-width","content":" If you need to limit the title width to exactly fill the slide width, you can try the fit-to-width function:  #utils.fit-to-width(1fr)[#lorem(20)]   Function definition:  #let fit-to-width(grow: true, shrink: true, width, body) = { .. }   Parameters:  grow: Whether it can grow, default is true.shrink: Whether it can shrink, default is true.width: The specified width.body: The specific content. ","version":"Next","tagName":"h2"},{"title":"Object-Oriented Programming","type":0,"sectionRef":"#","url":"/touying/docs/next/utilities/oop","content":"Object-Oriented Programming Touying provides some convenient utility functions for object-oriented programming. #let call-or-display(self, it) = { if type(it) == function { return it(self) } else { return it } } Call or display as-is. #let methods(self) = { .. } Used to bind self to methods and return, very commonly used.","keywords":"","version":"Next"},{"title":"University Theme","type":0,"sectionRef":"#","url":"/touying/docs/next/themes/university","content":"","keywords":"","version":"Next"},{"title":"Initialization​","type":1,"pageTitle":"University Theme","url":"/touying/docs/next/themes/university#initialization","content":" You can initialize the University theme using the following code:  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) #show: slides   The register function accepts the following parameters:  aspect-ratio: Sets the aspect ratio of the slides to &quot;16-9&quot; or &quot;4-3,&quot; with the default being &quot;16-9.&quot;progress-bar: Controls whether the progress bar at the top of each slide is displayed, with the default being true.display-current-section: Whether to display the current section.footer-columns: The width of the footer in the bottom three columns, the default is (25%, 1fr, 25%).footer-a: The first column, default is self =&gt; self.info.author.footer-b: Second column, default is self =&gt; if self.info.short-title == auto { self.info.title } else { self.info.short-title }.footer-c: third column, default is  self =&gt; { h(1fr) utils.info-date(self) h(1fr) states.slide-counter.display() + &quot; / &quot; + states.last-slide-number h(1fr) }   Additionally, the University theme provides an #alert[..] function, which you can use with the #show strong: alert syntax for emphasizing text with *alert text*.  ","version":"Next","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"University Theme","url":"/touying/docs/next/themes/university#color-theme","content":" The University theme defaults to the following color theme:  #let s = (s.methods.colors)( self: s, primary: rgb(&quot;#04364A&quot;), secondary: rgb(&quot;#176B87&quot;), tertiary: rgb(&quot;#448C95&quot;), )   You can modify this color theme using #let s = (s.methods.colors)(self: s, ..).  ","version":"Next","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"University Theme","url":"/touying/docs/next/themes/university#slide-function-family","content":" The University theme provides a series of custom slide functions:  ","version":"Next","tagName":"h2"},{"title":"Title Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/next/themes/university#title-slide","content":" #title-slide(logo: none, authors: none, ..args)   The title-slide function reads information from self.info for display. You can also pass the logo parameter and an array-type authors parameter.  ","version":"Next","tagName":"h3"},{"title":"Regular Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/next/themes/university#regular-slide","content":" #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // university theme title: none, subtitle: none, header: none, footer: auto, )[ ... ]   The default slide function with a title and footer. The title defaults to the current section title, and the footer is set as per your configuration.  ","version":"Next","tagName":"h3"},{"title":"Focus Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/next/themes/university#focus-slide","content":" #focus-slide(background-img: ..., background-color: ...)[ ... ]   Used to capture the audience's attention. The default background color is self.colors.primary.  ","version":"Next","tagName":"h3"},{"title":"Matrix Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/next/themes/university#matrix-slide","content":" #matrix-slide(columns: ..., rows: ...)[ ... ][ ... ]   Refer to the documentation.  ","version":"Next","tagName":"h3"},{"title":"slides Function​","type":1,"pageTitle":"University Theme","url":"/touying/docs/next/themes/university#slides-function","content":" The slides function has parameters:  title-slide: Defaults to true.slide-level: Defaults to 1.  You can set these parameters using #show: slides.with(..).  And the function of automatically adding new-section-slide can be turned off by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"University Theme","url":"/touying/docs/next/themes/university#example","content":" #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) #show: slides.with(title-slide: false) #title-slide(authors: ([Author A], [Author B])) = The Section == Slide Title #slide[ #lorem(40) ] #slide(subtitle: emph[What is the problem?])[ #lorem(40) ] #focus-slide[ Another variant with primary color in background... ] #matrix-slide[ left ][ middle ][ right ] #matrix-slide(columns: 1)[ top ][ bottom ] #matrix-slide(columns: (1fr, 2fr, 1fr), ..(lorem(8),) * 9)  ","version":"Next","tagName":"h2"},{"title":"Changelog","type":0,"sectionRef":"#","url":"/touying/docs/changelog","content":"","keywords":"","version":"0.4.2"},{"title":"v0.4.2​","type":1,"pageTitle":"Changelog","url":"/touying/docs/changelog#v042","content":" theme(metropolis): decoupled text color with neutral-dark (Breaking change)feat: add mark-style uncover, only and alternativesfeat: add warning for styled block for slidesfeat: add warning for touying-temporary-markfeat: add markup-text for speaker-notefix: fix bug of slides  ","version":"0.4.2","tagName":"h2"},{"title":"v0.4.1​","type":1,"pageTitle":"Changelog","url":"/touying/docs/changelog#v041","content":" ","version":"0.4.2","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Changelog","url":"/touying/docs/changelog#features","content":" feat: support builtin outline and bookmarkfeat: support speaker note for dual-screenfeat: add touying-mitex functionfeat: touying offers a gallery page via wiki  ","version":"0.4.2","tagName":"h3"},{"title":"Fixes​","type":1,"pageTitle":"Changelog","url":"/touying/docs/changelog#fixes","content":" fix: add outline-slide for dewdrop themefix: fix regression of default value &quot;auto&quot; for repeat  ","version":"0.4.2","tagName":"h3"},{"title":"Miscellaneous Improvements​","type":1,"pageTitle":"Changelog","url":"/touying/docs/changelog#miscellaneous-improvements","content":" feat: add list support for touying-outline functionfeat: add auto-reset-footnotefeat: add freeze-in-empty-page for better page counterfeat: add ..args for register method to capture unused arguments  ","version":"0.4.2","tagName":"h3"},{"title":"v0.4.0​","type":1,"pageTitle":"Changelog","url":"/touying/docs/changelog#v040","content":" ","version":"0.4.2","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Changelog","url":"/touying/docs/changelog#features-1","content":" feat: support #footnote[] for all themes.feat: access subslide and repeat in footer and header by self =&gt; self.subslide.feat: support numbered theorem environments by ctheorems.feat: support numbering for sections and subsections.  ","version":"0.4.2","tagName":"h3"},{"title":"Fixes​","type":1,"pageTitle":"Changelog","url":"/touying/docs/changelog#fixes-1","content":" fix: make nested includes work correctly.fix: disable multi-page slides from creating the same section multiple times.  ","version":"0.4.2","tagName":"h3"},{"title":"Breaking changes​","type":1,"pageTitle":"Changelog","url":"/touying/docs/changelog#breaking-changes","content":" refactor: remove self.padding and add self.full-header self.full-footer config.  ","version":"0.4.2","tagName":"h2"},{"title":"v0.3.3​","type":1,"pageTitle":"Changelog","url":"/touying/docs/changelog#v033","content":" template: move template to touying-aqua package, make Touying searchable in Typst Universe Packagesthemes: fix bugs in university and dewdrop themefeat: make set-show rule work without setting parameterfeat: make composer parameter more simplerfeat: add empty-slide function  ","version":"0.4.2","tagName":"h2"},{"title":"v0.3.2​","type":1,"pageTitle":"Changelog","url":"/touying/docs/changelog#v032","content":" fix critical bug: fix is-sequence function, make grid and table work correctly in touyingtheme: add aqua theme, thanks for pride7theme: make university theme more configurablerefactor: don't export variable s by default anymore, it will be extracted by register function (Breaking Change)meta: add categories and template config to typst.toml for Typst 0.11  ","version":"0.4.2","tagName":"h2"},{"title":"v0.3.1​","type":1,"pageTitle":"Changelog","url":"/touying/docs/changelog#v031","content":" fix some typosfix slide-level bugfix bug of pdfpc label  ","version":"0.4.2","tagName":"h2"},{"title":"v0.3.0​","type":1,"pageTitle":"Changelog","url":"/touying/docs/changelog#v030","content":" ","version":"0.4.2","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Changelog","url":"/touying/docs/changelog#features-2","content":" better show-slides mode.support align and pad.  ","version":"0.4.2","tagName":"h3"},{"title":"Documentation​","type":1,"pageTitle":"Changelog","url":"/touying/docs/changelog#documentation","content":" Add more detailed documentation.  ","version":"0.4.2","tagName":"h3"},{"title":"Refactor​","type":1,"pageTitle":"Changelog","url":"/touying/docs/changelog#refactor","content":" simplify theme.  ","version":"0.4.2","tagName":"h3"},{"title":"Fix​","type":1,"pageTitle":"Changelog","url":"/touying/docs/changelog#fix","content":" fix many bugs.  ","version":"0.4.2","tagName":"h3"},{"title":"v0.2.1​","type":1,"pageTitle":"Changelog","url":"/touying/docs/changelog#v021","content":" ","version":"0.4.2","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Changelog","url":"/touying/docs/changelog#features-3","content":" Touying-reducer: support cetz and fletcher animationuniversity theme: add university theme  ","version":"0.4.2","tagName":"h3"},{"title":"Fix​","type":1,"pageTitle":"Changelog","url":"/touying/docs/changelog#fix-1","content":" fix footer progress in metropolis themefix some bugs in simple and dewdrop themesfix bug that outline does not display more than 4 sections  ","version":"0.4.2","tagName":"h3"},{"title":"v0.2.0​","type":1,"pageTitle":"Changelog","url":"/touying/docs/changelog#v020","content":" Object-oriented programming: Singleton s, binding methods utils.methods(s) and (self: obj, ..) =&gt; {..} methods.Page arguments management: Instead of using #set page(..), you should use self.page-args to retrieve or set page parameters, thereby avoiding unnecessary creation of new pages.#pause for sequence content: You can use #pause at the outermost level of a slide, including inline and list.#pause for layout functions: You can use the composer parameter to add yourself layout function like utils.side-by-side, and simply use multiple pos parameters like #slide[..][..].#meanwhile for synchronous display: Provide a #meanwhile for resetting subslides counter.#pause and #meanwhile for math equation: Provide a #touying-equation(&quot;x + y pause + z&quot;) for math equation animations.Slides: Create simple slides using standard headings.Callback-style uncover, only and alternatives: Based on the concise syntax provided by Polylux, allow precise control of the timing for displaying content. You should manually control the number of subslides using the repeat parameter. Transparent cover: Enable transparent cover using oop syntax like #let s = (s.methods.enable-transparent-cover)(self: s).Handout mode: enable handout mode by #let s = (s.methods.enable-handout-mode)(self: s).Fit-to-width and fit-to-height: Fit-to-width for title in header and fit-to-height for image. utils.fit-to-width(grow: true, shrink: true, width, body)utils.fit-to-height(width: none, prescale-width: none, grow: true, shrink: true, height, body) Slides counter: states.slide-counter.display() + &quot; / &quot; + states.last-slide-number and states.touying-progress(ratio =&gt; ..).Appendix: Freeze the last-slide-number to prevent the slide number from increasing further.Sections: Touying's built-in section support can be used to display the current section title and show progress. section and subsection parameter in #slide to register a new section or subsection.states.current-section-title to get the current section.states.touying-outline or s.methods.touying-outline to display a outline of sections.states.touying-final-sections(sections =&gt; ..) for custom outline display.states.touying-progress-with-sections((current-sections: .., final-sections: .., current-slide-number: .., last-slide-number: ..) =&gt; ..) for powerful progress display. Navigation bar: Navigation bar like here by states.touying-progress-with-sections(..), in dewdrop theme.Pdfpc: pdfpc support and export .pdfpc file without external tool by typst query command simply. ","version":"0.4.2","tagName":"h2"},{"title":"Creating Your Own Theme","type":0,"sectionRef":"#","url":"/touying/docs/build-your-own-theme","content":"","keywords":"","version":"0.4.2"},{"title":"Modifying Existing Themes​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/build-your-own-theme#modifying-existing-themes","content":" If you wish to modify a theme within the Touying package locally instead of creating one from scratch, you can achieve this by following these steps:  Copy the theme code from the themes directory to your local machine. For example, copy themes/university.typ to a local file named university.typ.Remove all #import &quot;../xxx.typ&quot; commands at the top of the university.typ file.Add #import &quot;@preview/touying:0.4.2&quot;: * at the top of the university.typ file to import all modules.Replace self: s in the register function with self: themes.default.register() (Important).  You can then import and use the theme by:  #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;university.typ&quot; #let s = university.register(aspect-ratio: &quot;16-9&quot;)   For a specific example, refer to: https://typst.app/project/rqRuzg0keo_ZEB5AdxjweA  ","version":"0.4.2","tagName":"h2"},{"title":"Import​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/build-your-own-theme#import","content":" Depending on whether the theme is for personal use or part of Touying, you can import in two ways:  If for personal use:  #import &quot;@preview/touying:0.4.2&quot;: *   If part of Touying themes:  #import &quot;../utils/utils.typ&quot; #import &quot;../utils/states.typ&quot; #import &quot;../utils/components.typ&quot;   Additionally, add the import statement in Touying's themes/themes.typ:  #import &quot;bamboo.typ&quot;   ","version":"0.4.2","tagName":"h2"},{"title":"Register Function and Init Method​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/build-your-own-theme#register-function-and-init-method","content":" Next, we'll distinguish between the bamboo.typ template file and the main.typ file, the latter of which is sometimes omitted.  Generally, the first step in creating slides is to determine font size and page aspect ratio. Therefore, we need to register an initialization method:  // bamboo.typ #import &quot;@preview/touying:0.4.2&quot;: * #let register( self: themes.default.register(), aspect-ratio: &quot;16-9&quot;, ) = { self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, ) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self } // main.typ #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;bamboo.typ&quot; #let s = bamboo.register(aspect-ratio: &quot;16-9&quot;) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide) = utils.slides(s) #show: slides = First Section == First Slide #slide[ A slide with a title and an *important* information. ]   As you can see, we created a register function and passed an aspect-ratio parameter to set the page aspect ratio. We get default self by self: themes.default.register(). As you might already know, in Touying, we should not use set page(..) to set page parameters but rather use the syntax self.page-args += (..) to set them, as explained in the Page Layout section.  In addition, we registered a self.methods.init method, which can be used for some global style settings. For example, in this case, we added set text(size: 20pt) to set the font size. You can also place additional global style settings here, such as set par(justify: true). Since the init function is placed inside self.methods, it is a method, not a regular function. Therefore, we need to add the parameter self: none to use it properly.  As you can see, later in main.typ, we apply the global style settings in init using #show: init, where init is bound and unpacked through utils.methods(s).  If you pay extra attention, you'll notice that the register function has an independent self at the end. This actually represents returning the modified self as the return value, which will be saved in #let s = ... This line is therefore indispensable.  ","version":"0.4.2","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/build-your-own-theme#color-theme","content":" Choosing an attractive color theme for your slides is crucial. Touying provides built-in color theme support to minimize API differences between different themes. Touying offers two dimensions of color selection: the first is neutral, primary, secondary, and tertiary for hue distinction, with primary being the most commonly used; the second is default, light, lighter, lightest, dark, darker, and darkest for brightness distinction.  As we are creating the Bamboo theme, we chose a color for the primary theme, similar to bamboo (rgb(&quot;#5E8B65&quot;)), and included neutral lightest/darkest as background and font colors.  As shown in the code below, we use (self.methods.colors)(self: self, ..) to modify the color theme. Essentially, it is a wrapper for self.colors += (..).  #let register( self: themes.default.register(), aspect-ratio: &quot;16-9&quot;, ) = { // color theme self = (self.methods.colors)( self: self, primary: rgb(&quot;#5E8B65&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), neutral-darkest: rgb(&quot;#000000&quot;), ) self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, ) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self }   After adding the color theme, we can access the color using syntax like self.colors.primary.  It's worth noting that users can change the theme color at any time using:  #let s = (s.methods.colors)(self: s, primary: rgb(&quot;#3578B9&quot;))   This flexibility demonstrates Touying's powerful customization capabilities.  ","version":"0.4.2","tagName":"h2"},{"title":"Practical: Custom Alert Method​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/build-your-own-theme#practical-custom-alert-method","content":" In general, we need to provide a #alert[..] function for users, similar to #strong[..]. Typically, #alert[..] emphasizes text using the primary theme color for aesthetics. We add a line in the register function:  self.methods.alert = (self: none, it) =&gt; text(fill: self.colors.primary, it)   This code sets the text color to self.colors.primary, utilizing the theme's primary color.  ","version":"0.4.2","tagName":"h2"},{"title":"Custom Header and Footer​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/build-your-own-theme#custom-header-and-footer","content":" Here, assuming you've already read the Page Layout section, we know we should add headers and footers to the slides.  Firstly, we add self.bamboo-title = []. This means we save the title of the current slide as a member variable self.bamboo-title, stored in self. This makes it easy to use in the header and later modifications. Similarly, we create self.bamboo-footer, saving the footer: [] parameter from the register function for displaying in the bottom-left corner.  It's worth noting that our header is actually a content function in the form of let header(self) = { .. } with the self parameter, allowing us to get the latest information from self. For example, self.bamboo-title. The footer is similar.  The components.cell used inside is actually #let cell = block.with(width: 100%, height: 100%, above: 0pt, below: 0pt, breakable: false), and show: components.cell is shorthand for components.cell(body). The show: pad.with(.4em) in the footer is similar.  Another point to note is the states module, which contains many counters and state-related content. For example, states.current-section-title is used to display the current section, and states.slide-counter.display() + &quot; / &quot; + states.last-slide-number is used to display the current page number and total number of pages.  We observe the usage of utils.call-or-display(self, self.bamboo-footer) to display self.bamboo-footer. This is used to handle situations like self.bamboo-footer = (self) =&gt; {..}, ensuring a unified approach to displaying content functions and content.  To ensure proper display of the header and footer and sufficient spacing from the main content, we also set margins, such as self.page-args += (margin: (top: 4em, bottom: 1.5em, x: 2em)).  We also need to customize a slide method that accepts slide(self: none, title: auto, ..args). The first self: none is a required method parameter for getting the latest self. The second title is used to update self.bamboo-title for displaying in the header. The third ..args collects the remaining parameters and passes them to (self.methods.touying-slide)(self: self, ..args), which is necessary for the Touying slide functionality to work properly. Additionally, we need to register this method in the register function with self.methods.slide = slide.  // bamboo.typ #import &quot;@preview/touying:0.4.2&quot;: * #let slide(self: none, title: auto, ..args) = { if title != auto { self.bamboo-title = title } (self.methods.touying-slide)(self: self, ..args) } #let register( self: themes.default.register(), aspect-ratio: &quot;16-9&quot;, footer: [], ) = { // color theme self = (self.methods.colors)( self: self, primary: rgb(&quot;#5E8B65&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), neutral-darkest: rgb(&quot;#000000&quot;), ) // variables for later use self.bamboo-title = [] self.bamboo-footer = footer // set page let header(self) = { set align(top) show: components.cell.with(fill: self.colors.primary, inset: 1em) set align(horizon) set text(fill: self.colors.neutral-lightest, size: .7em) states.current-section-title linebreak() set text(size: 1.5em) utils.call-or-display(self, self.bamboo-title) } let footer(self) = { set align(bottom) show: pad.with(.4em) set text(fill: self.colors.neutral-darkest, size: .8em) utils.call-or-display(self, self.bamboo-footer) h(1fr) states.slide-counter.display() + &quot; / &quot; + states.last-slide-number } self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, header: header, footer: footer, margin: (top: 4em, bottom: 1.5em, x: 2em), ) // register methods self.methods.slide = slide self.methods.alert = (self: none, it) =&gt; text(fill: self.colors.primary, it) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self } // main.typ #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;bamboo.typ&quot; #let s = bamboo.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide) = utils.slides(s) #show: slides = First Section == First Slide #slide[ A slide with a title and an *important* information. ]     ","version":"0.4.2","tagName":"h2"},{"title":"Custom Special Slide​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/build-your-own-theme#custom-special-slide","content":" Building upon the basic slide, we further add some special slide functions such as title-slide, focus-slide, and a custom slides method.  For the title-slide method, first, we call self = utils.empty-page(self). This function clears self.page-args.header, self.page-args.footer, and sets margin to 0em, creating a blank page effect. Then, we use let info = self.info + args.named() to get information stored in self.info and update it with the passed args.named() for later use as info.title. The specific page content body will vary for each theme, so we won't go into details here. Finally, we call `(self.methods.touying-slide)(self: self, repeat: none, body  ), where repeat: noneindicates that this page does not require animation effects, and passing thebody` parameter displays its content.  For the new-section-slide method, the process is similar. The only thing to note is that in (self.methods.touying-slide)(self: self, repeat: none, section: section, body), we pass an additional section: section parameter to declare the creation of a new section. Another point to note is that besides self.methods.new-section-slide = new-section-slide, we also register self.methods.touying-new-section-slide = new-section-slide, so new-section-slide will be automatically called when encountering a first-level title.  For the focus-slide method, most of the content is similar, but it's worth noting that we use self.page-args += (..) to update the page's background color.  Finally, we update the slides(self: none, title-slide: true, slide-level: 1, ..args) method. When title-slide is true, using #show: slides will automatically create a title-slide. Setting slide-level: 1 indicates that the first-level and second-level titles correspond to section and title, respectively.  // bamboo.typ #import &quot;@preview/touying:0.4.2&quot;: * #let slide(self: none, title: auto, ..args) = { if title != auto { self.bamboo-title = title } (self.methods.touying-slide)(self: self, ..args) } #let title-slide(self: none, ..args) = { self = utils.empty-page(self) let info = self.info + args.named() let body = { set align(center + horizon) block( fill: self.colors.primary, width: 80%, inset: (y: 1em), radius: 1em, text(size: 2em, fill: self.colors.neutral-lightest, weight: &quot;bold&quot;, info.title) ) set text(fill: self.colors.neutral-darkest) if info.author != none { block(info.author) } if info.date != none { block(if type(info.date) == datetime { info.date.display(self.datetime-format) } else { info.date }) } } (self.methods.touying-slide)(self: self, repeat: none, body) } #let new-section-slide(self: none, section) = { self = utils.empty-page(self) let body = { set align(center + horizon) set text(size: 2em, fill: self.colors.primary, weight: &quot;bold&quot;, style: &quot;italic&quot;) section } (self.methods.touying-slide)(self: self, repeat: none, section: section, body) } #let focus-slide(self: none, body) = { self = utils.empty-page(self) self.page-args += ( fill: self.colors.primary, margin: 2em, ) set text(fill: self.colors.neutral-lightest, size: 2em) (self.methods.touying-slide)(self: self, repeat: none, align(horizon + center, body)) } #let slides(self: none, title-slide: true, slide-level: 1, ..args) = { if title-slide { (self.methods.title-slide)(self: self) } (self.methods.touying-slides)(self: self, slide-level: slide-level, ..args) } #let register( self: themes.default.register(), aspect-ratio: &quot;16-9&quot;, footer: [], ) = { // color theme self = (self.methods.colors)( self: self, primary: rgb(&quot;#5E8B65&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), neutral-darkest: rgb(&quot;#000000&quot;), ) // variables for later use self.bamboo-title = [] self.bamboo-footer = footer // set page let header(self) = { set align(top) show: components.cell.with(fill: self.colors.primary, inset: 1em) set align(horizon) set text(fill: self.colors.neutral-lightest, size: .7em) states.current-section-title linebreak() set text(size: 1.5em) utils.call-or-display(self, self.bamboo-title) } let footer(self) = { set align(bottom) show: pad.with(.4em) set text(fill: self.colors.neutral-darkest, size: .8em) utils.call-or-display(self, self.bamboo-footer) h(1fr) states.slide-counter.display() + &quot; / &quot; + states.last-slide-number } self.page-args += ( paper: &quot;presentation-&quot; + aspect-ratio, header: header, footer: footer, margin: (top: 4em, bottom: 1.5em, x: 2em), ) // register methods self.methods.slide = slide self.methods.title-slide = title-slide self.methods.new-section-slide = new-section-slide self.methods.touying-new-section-slide = new-section-slide self.methods.focus-slide = focus-slide self.methods.slides = slides self.methods.alert = (self: none, it) =&gt; text(fill: self.colors.primary, it) self.methods.init = (self: none, body) =&gt; { set text(size: 20pt) body } self } // main.typ #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;bamboo.typ&quot; #let s = bamboo.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, focus-slide) = utils.slides(s) #show: slides = First Section == First Slide #slide[ A slide with a title and an *important* information. ] #focus-slide[ Focus on it! ]     ","version":"0.4.2","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"Creating Your Own Theme","url":"/touying/docs/build-your-own-theme#conclusion","content":" Congratulations! You've created a simple and elegant theme. Perhaps you may find that Touying introduces a wealth of concepts, making it initially challenging to grasp. This is normal, as Touying opts for functionality over simplicity. However, thanks to Touying's comprehensive and unified approach, you can easily extract commonalities between different themes and transfer your knowledge seamlessly. You can also save global variables, modify existing themes, or switch between themes effortlessly, showcasing the benefits of Touying's decoupling and object-oriented programming. ","version":"0.4.2","tagName":"h2"},{"title":"Code Style","type":0,"sectionRef":"#","url":"/touying/docs/code-styles","content":"","keywords":"","version":"0.4.2"},{"title":"Simple Style​","type":1,"pageTitle":"Code Style","url":"/touying/docs/code-styles#simple-style","content":" If we only need simplicity, we can directly input content under the heading, just like writing a normal Typst document. The heading here serves to divide the pages, and we can use commands like #pause to achieve animation effects.  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.simple.register() #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     You can use an empty heading == to create a new page. This skill also helps clear the continuation of the previous title.  PS: We can use the #slides-end marker to signify the end of #show: slides.  ","version":"0.4.2","tagName":"h2"},{"title":"Block Style​","type":1,"pageTitle":"Code Style","url":"/touying/docs/code-styles#block-style","content":" Many times, using simple style alone cannot achieve all the functions we need. For more powerful features and clearer structure, we can also use block style in the form of #slide[...]. The #slide function needs to be unpacked using the syntax #let (slide, empty-slide) = utils.slides(s) to be used correctly after #show: slides.  For example, the previous example can be transformed into:  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.simple.register() #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Title == First Slide #slide[ Hello, Touying! #pause Hello, Typst! ]   and #empty-slide[] to create an empty slide without header and footer.  There are many advantages to doing this:  Many times, we not only need the default #slide[...] but also special slide functions like #focus-slide[...].Different themes' #slide[...] functions may have more parameters than the default, such as the university theme's #slide[...] function having a subtitle parameter.Only slide functions can use the callback-style content block to achieve complex animation effects with #only and #uncover functions.It has a clearer structure. By identifying #slide[...] blocks, we can easily distinguish the specific pagination effects of slides.  ","version":"0.4.2","tagName":"h2"},{"title":"Convention Over Configuration​","type":1,"pageTitle":"Code Style","url":"/touying/docs/code-styles#convention-over-configuration","content":" You may have noticed that when using the simple theme, using a level-one heading automatically creates a new section slide. This is because the simple theme registers an s.methods.touying-new-section-slide method, so Touying will automatically call this method.  If we don't want it to automatically create such a section slide, we can delete this method:  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.simple.register() #(s.methods.touying-new-section-slide = none) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     As you can see, there are only two pages left, and the default section slide is gone.  Similarly, we can register a new section slide:  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.simple.register() #(s.methods.touying-new-section-slide = (self: none, section, ..args) =&gt; { self = utils.empty-page(self) (s.methods.touying-slide)(self: self, section: section, { set align(center + horizon) set text(size: 2em, fill: s.colors.primary, style: &quot;italic&quot;, weight: &quot;bold&quot;) section }, ..args) }) #let (init, slides, touying-outline) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     Similarly, we can modify s.methods.touying-new-subsection-slide to do the same for subsection.  In fact, besides s.methods.touying-new-section-slide, another special slide function is the s.methods.slide function, which will be called by default in simple style when #slide[...] is not explicitly used.  Also, since #slide[...] is registered in s.slides = (&quot;slide&quot;,), the section, subsection, and title parameters will be automatically passed, while others like #focus-slide[...] will not automatically receive these three parameters.  Principle In fact, you can also not use #show: slides and utils.slides(s), but only use utils.methods(s), for example: #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.simple.register() #let (init, touying-outline, slide) = utils.methods(s) #show: init #slide(section: [Title], title: [First Slide])[ Hello, Touying! #pause Hello, Typst! ] Here, you need to manually pass in section, subsection, and title, but it will have better performance, suitable for cases where faster performance is needed, such as when there are more than dozens or hundreds of pages. ","version":"0.4.2","tagName":"h2"},{"title":"Complex Animations","type":0,"sectionRef":"#","url":"/touying/docs/dynamic/complex","content":"","keywords":"","version":"0.4.2"},{"title":"Mark-Style Functions​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/dynamic/complex#mark-style-functions","content":" We can use mark-style functions, which are very convenient to use.  At subslide #utils.touying-wrapper((self: none) =&gt; str(self.subslide)), we can use #uncover(&quot;2-&quot;)[`#uncover` function] for reserving space, use #only(&quot;2-&quot;)[`#only` function] for not reserving space, #alternatives[call `#only` multiple times \\u{2717}][use `#alternatives` function #sym.checkmark] for choosing one of the alternatives.   However, this does not work in all cases, for example if you put uncover into the layout function like grid function, you will get an error.  ","version":"0.4.2","tagName":"h2"},{"title":"Callback-Style Functions​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/dynamic/complex#callback-style-functions","content":" To overcome the limitations of layout functions mentioned earlier, Touying cleverly implements always-effective only, uncover, and alternatives using callback functions. Specifically, you need to introduce these three functions as follows:  #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) At subslide #self.subslide, we can use #uncover(&quot;2-&quot;)[`#uncover` function] for reserving space, use #only(&quot;2-&quot;)[`#only` function] for not reserving space, #alternatives[call `#only` multiple times \\u{2717}][use `#alternatives` function #sym.checkmark] for choosing one of the alternatives. ])     Notice that we no longer pass a content block but instead pass a callback function with a self parameter. Later, we extract only, uncover, and alternatives functions from self using:  #let (uncover, only, alternatives) = utils.methods(self)   We then call these functions in subsequent steps.  Here's an interesting fact: the self.subslide of type int indicates the current subslide index, and in fact, the only, uncover, and alternatives functions rely on self.subslide to determine the current subslide index.  Warning We manually specify the repeat: 3 parameter, indicating the display of 3 subslides. We need to do this manually because Touying cannot infer how many subslides only, uncover, and alternatives should display.  ","version":"0.4.2","tagName":"h2"},{"title":"only​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/dynamic/complex#only","content":" The only function means it &quot;appears&quot; only on selected subslides. If it doesn't appear, it completely disappears and doesn't occupy any space. In other words, #only(index, body) is either body or none.  The index can be an int type or a str type like &quot;2-&quot; or &quot;2-3&quot;. For more usage, refer to Polylux.  ","version":"0.4.2","tagName":"h2"},{"title":"uncover​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/dynamic/complex#uncover","content":" The uncover function means it &quot;displays&quot; only on selected subslides; otherwise, it will be covered by the cover function but still occupies the original space. In other words, #uncover(index, body) is either body or cover(body).  The index can be an int type or a str type like &quot;2-&quot; or &quot;2-3&quot;. For more usage, refer to Polylux.  You may also have noticed that #pause actually uses the cover function, providing a more convenient syntax. In reality, their effects are almost identical.  ","version":"0.4.2","tagName":"h2"},{"title":"alternatives​","type":1,"pageTitle":"Complex Animations","url":"/touying/docs/dynamic/complex#alternatives","content":" The alternatives function displays a series of different content in different subslides. For example:  #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) #alternatives[Ann][Bob][Christopher] likes #alternatives[chocolate][strawberry][vanilla] ice cream. ])     As you can see, alternatives can automatically expand to the most suitable width and height, a capability that only and uncover lack. In fact, alternatives has other parameters, such as start: 2, repeat-last: true, and position: center + horizon. For more usage, refer to Polylux. ","version":"0.4.2","tagName":"h2"},{"title":"Cover Function","type":0,"sectionRef":"#","url":"/touying/docs/dynamic/cover","content":"","keywords":"","version":"0.4.2"},{"title":"Default Cover Function: hide​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/dynamic/cover#default-cover-function-hide","content":" The cover function is a method stored in s.methods.cover, which is later used by uncover and #pause.  The default cover function is the hide function. This function makes the internal content invisible without affecting the layout.  ","version":"0.4.2","tagName":"h2"},{"title":"Updating the Cover Function​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/dynamic/cover#updating-the-cover-function","content":" In some cases, you might want to use your own cover function. In that case, you can set your own cover function using:  let s = (s.methods.update-cover)(self: s, is-method: true, cover-fn)   Here, if you set is-method: false, Touying will wrap cover-fn into a method for you.  ","version":"0.4.2","tagName":"h2"},{"title":"hack: handle enum and list​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/dynamic/cover#hack-handle-enum-and-list","content":" You will find that the existing cover function cannot hide the mark of enum and list, refer to here, so you can hack:  #let s = (s.methods.update-cover)(self: s, body =&gt; box(scale(x: 0%, body)))   ","version":"0.4.2","tagName":"h2"},{"title":"Semi-Transparent Cover Function​","type":1,"pageTitle":"Cover Function","url":"/touying/docs/dynamic/cover#semi-transparent-cover-function","content":" Touying supports a semi-transparent cover function, which can be enabled by adding:  #let s = (s.methods.enable-transparent-cover)(self: s)   You can adjust the transparency through the alpha: .. parameter.  Warning Note that the transparent-cover here does not preserve text layout like hide does because it adds an extra layer of box, which may disrupt the original structure of the page.  Internals The enable-transparent-cover method is defined as: #let s.methods.enable-transparent-cover = ( self: none, constructor: rgb, alpha: 85%, ) =&gt; { self.methods.cover = (self: none, body) =&gt; { utils.cover-with-rect( fill: utils.update-alpha( constructor: constructor, self.page-args.fill, alpha, ), body ) } self } It creates a semi-transparent rectangular mask with the same color as the background to simulate the effect of transparent content. Here, constructor: rgb and alpha: 85% indicate the background color's construction function and transparency level, respectively. ","version":"0.4.2","tagName":"h2"},{"title":"Math Equation Animations","type":0,"sectionRef":"#","url":"/touying/docs/dynamic/equation","content":"","keywords":"","version":"0.4.2"},{"title":"Simple Animation​","type":1,"pageTitle":"Math Equation Animations","url":"/touying/docs/dynamic/equation#simple-animation","content":" Let's start with an example:  #slide[ Touying equation with pause: #touying-equation(` f(x) &amp;= pause x^2 + 2x + 1 \\ &amp;= pause (x + 1)^2 \\ `) #meanwhile Touying equation is very simple. ]     We use the touying-equation function to incorporate pause and meanwhile within the text of math equations (in fact, you can also use #pause or #pause;).  As you would expect, the math equation is displayed step by step, making it suitable for presenters to demonstrate their math reasoning.  Warning While the touying-equation function is convenient, you should always be aware that it doesn't perform complex syntax analysis. It simply splits the string using regular expressions. Therefore, you should not use pause or meanwhile within functions like display(..)!  ","version":"0.4.2","tagName":"h2"},{"title":"Complex Animation​","type":1,"pageTitle":"Math Equation Animations","url":"/touying/docs/dynamic/equation#complex-animation","content":" In fact, we can also use only, uncover, and alternatives within touying-equation with a little trick:  #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) #touying-equation(scope: (uncover: uncover), ` f(x) &amp;= pause x^2 + 2x + uncover(&quot;3-&quot;, 1) \\ &amp;= pause (x + 1)^2 \\ `) ])     We can pass the functions we need into the touying-equation through the scope parameter, such as uncover in this example.  ","version":"0.4.2","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Math Equation Animations","url":"/touying/docs/dynamic/equation#parameters","content":" The function definition of touying-equation is:  #let touying-equation(block: true, numbering: none, supplement: auto, scope: (:), body) = { .. }   Therefore, you can pass parameters like block, numbering, and supplement to touying-equation just like using normal math equations. ","version":"0.4.2","tagName":"h2"},{"title":"Handout Mode","type":0,"sectionRef":"#","url":"/touying/docs/dynamic/handout","content":"Handout Mode While watching slides and attending lectures, the audience often wishes to have handouts for reviewing challenging concepts. Therefore, it's beneficial for the author to provide handouts for the audience, preferably before the lecture for better preparation. The handout mode differs from the regular mode as it doesn't require intricate animation effects. It retains only the last subslide of each slide. Enabling handout mode is simple: #let s = (s.methods.enable-handout-mode)(self: s) ","keywords":"","version":"0.4.2"},{"title":"Other Animations","type":0,"sectionRef":"#","url":"/touying/docs/dynamic/other","content":"","keywords":"","version":"0.4.2"},{"title":"Simple Animations​","type":1,"pageTitle":"Other Animations","url":"/touying/docs/dynamic/other#simple-animations","content":" Here's an example:  #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;@preview/cetz:0.2.2&quot; #import &quot;@preview/fletcher:0.4.4&quot; as fletcher: node, edge // cetz and fletcher bindings for touying #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: fletcher.diagram, cover: fletcher.hide) #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides.with(title-slide: false, outline-slide: false) // cetz animation #slide[ Cetz in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) ] // fletcher animation #slide[ Fletcher in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) ]     ","version":"0.4.2","tagName":"h2"},{"title":"only and uncover​","type":1,"pageTitle":"Other Animations","url":"/touying/docs/dynamic/other#only-and-uncover","content":" In fact, we can also use only and uncover within cetz, just requiring a bit of skill:  #slide(repeat: 3, self =&gt; [ #let (uncover, only) = utils.methods(self) Cetz in Touying in subslide #self.subslide: #cetz.canvas({ import cetz.draw: * let self = (self.methods.update-cover)(self: self, hide.with(bounds: true)) let (uncover,) = utils.methods(self) rect((0,0), (5,5)) uncover(&quot;2-3&quot;, { rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) }) only(3, line((0,0), (2.5, 2.5), name: &quot;line&quot;)) }) ])  ","version":"0.4.2","tagName":"h2"},{"title":"Simple Animations","type":0,"sectionRef":"#","url":"/touying/docs/dynamic/simple","content":"","keywords":"","version":"0.4.2"},{"title":"pause​","type":1,"pageTitle":"Simple Animations","url":"/touying/docs/dynamic/simple#pause","content":" The purpose of #pause is straightforward – it separates the subsequent content into the next subslide. You can use multiple #pause to create multiple subslides. Here's a simple example:  #slide[ First #pause Second #pause Third ]     This example will create three subslides, gradually revealing the content.  As you can see, #pause can be used inline or on a separate line.  ","version":"0.4.2","tagName":"h2"},{"title":"meanwhile​","type":1,"pageTitle":"Simple Animations","url":"/touying/docs/dynamic/simple#meanwhile","content":" In some cases, you may need to display additional content simultaneously with #pause. In such cases, you can use #meanwhile.  #slide[ First #pause Second #meanwhile Third #pause Fourth ]     This example will create only two subslides, with &quot;First&quot; and &quot;Third&quot; displayed simultaneously, and &quot;Second&quot; and &quot;Fourth&quot; displayed simultaneously.  ","version":"0.4.2","tagName":"h2"},{"title":"Handling layout functions​","type":1,"pageTitle":"Simple Animations","url":"/touying/docs/dynamic/simple#handling-layout-functions","content":" If you use layout functions like grid inside slide[..], you might be surprised to find that subsequent #pause and #meanwhile do not work. This is because Touying cannot detect the content inside layout functions. But you can use the composer parameter of #slide() to meet most requirements.  Internals Touying doesn't rely on counter and locate to implement #pause. Instead, it has a parser written in Typst script. It parses the input content block as a sequence and then transforms and reorganizes this sequence into the series of subslides we need. ","version":"0.4.2","tagName":"h2"},{"title":"Pdfpc","type":0,"sectionRef":"#","url":"/touying/docs/external/pdfpc","content":"","keywords":"","version":"0.4.2"},{"title":"Adding Metadata​","type":1,"pageTitle":"Pdfpc","url":"/touying/docs/external/pdfpc#adding-metadata","content":" Touying remains consistent with Polylux to avoid conflicts between APIs.  For example, you can add notes using #pdfpc.speaker-note(&quot;This is a note that only the speaker will see.&quot;).  ","version":"0.4.2","tagName":"h2"},{"title":"Pdfpc Configuration​","type":1,"pageTitle":"Pdfpc","url":"/touying/docs/external/pdfpc#pdfpc-configuration","content":" To add pdfpc configurations, you can use  #let s = (s.methods.append-preamble)(self: s, pdfpc.config( duration-minutes: 30, start-time: datetime(hour: 14, minute: 10, second: 0), end-time: datetime(hour: 14, minute: 40, second: 0), last-minutes: 5, note-font-size: 12, disable-markdown: false, default-transition: ( type: &quot;push&quot;, duration-seconds: 2, angle: ltr, alignment: &quot;vertical&quot;, direction: &quot;inward&quot;, ), ))   Add the corresponding configurations. Refer to Polylux for specific configuration details.  ","version":"0.4.2","tagName":"h2"},{"title":"Exporting .pdfpc File​","type":1,"pageTitle":"Pdfpc","url":"/touying/docs/external/pdfpc#exporting-pdfpc-file","content":" Assuming your document is ./example.typ, you can export the .pdfpc file directly using:  typst query --root . ./example.typ --field value --one &quot;&lt;pdfpc-file&gt;&quot; &gt; ./example.pdfpc   With the compatibility of Touying and Polylux, you can make Polylux also support direct export by adding the following code:  #import &quot;@preview/touying:0.4.2&quot; #locate(loc =&gt; touying.pdfpc.pdfpc-file(loc))  ","version":"0.4.2","tagName":"h2"},{"title":"Pympress","type":0,"sectionRef":"#","url":"/touying/docs/external/pympress","content":"","keywords":"","version":"0.4.2"},{"title":"Speaker Notes​","type":1,"pageTitle":"Pympress","url":"/touying/docs/external/pympress#speaker-notes","content":" #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) // Set the speaker notes configuration, you can show it by pympress #let s = (s.methods.show-notes-on-second-screen)(self: s, right) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Animation == Simple Animation We can use `#pause` to #pause display something later. #pause Just like this. #meanwhile Meanwhile, #pause we can also use `#meanwhile` to #pause display other content synchronously. #speaker-note[ + This is a speaker note. + You won't see it unless you use `#let s = (s.math.show-notes-on-second-screen)(self: s, right)` ]     Then we can use the pympress to show it.   ","version":"0.4.2","tagName":"h2"},{"title":"Typst Preview","type":0,"sectionRef":"#","url":"/touying/docs/external/typst-preview","content":"Typst Preview The Typst Preview extension for VS Code provides an excellent slide mode, allowing us to preview and present slides. Press Ctrl/Cmd + Shift + P and type Typst Preview: Preview current file in slide mode to open the preview in slide mode. Press Ctrl/Cmd + Shift + P and type Typst Preview: Preview current file in browser and slide mode to open the slide mode in the browser. Now, you can press keys like F11 to enter fullscreen mode in the browser, making it suitable for slide presentations. Since Typst Preview is based on SVG, it can play GIF animations, which is very helpful for dynamic slides.","keywords":"","version":"0.4.2"},{"title":"Codly","type":0,"sectionRef":"#","url":"/touying/docs/integration/codly","content":"Codly When using Codly, we should initialize it using the s.methods.append-preamble method. #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;@preview/codly:0.2.0&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.append-preamble)(self: s)[ #codly(languages: ( rust: (name: &quot;Rust&quot;, icon: &quot;\\u{fa53}&quot;, color: rgb(&quot;#CE412B&quot;)), )) ] #let (init, slides) = utils.methods(s) #show heading.where(level: 2): set block(below: 1em) #show: init #show: codly-init.with() #let (slide, empty-slide) = utils.slides(s) #show: slides #slide[ == First slide #raw(lang: &quot;rust&quot;, block: true, `pub fn main() { println!(&quot;Hello, world!&quot;); }`.text) ] ","keywords":"","version":"0.4.2"},{"title":"CeTZ","type":0,"sectionRef":"#","url":"/touying/docs/integration/cetz","content":"","keywords":"","version":"0.4.2"},{"title":"Simple Animation​","type":1,"pageTitle":"CeTZ","url":"/touying/docs/integration/cetz#simple-animation","content":" An example:  #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;@preview/cetz:0.2.2&quot; #import &quot;@preview/fletcher:0.4.4&quot; as fletcher: node, edge // cetz and fletcher bindings for touying #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: fletcher.diagram, cover: fletcher.hide) #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides.with(title-slide: false, outline-slide: false) // cetz animation #slide[ Cetz in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) ] // fletcher animation #slide[ Fletcher in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) ]     ","version":"0.4.2","tagName":"h2"},{"title":"only and uncover​","type":1,"pageTitle":"CeTZ","url":"/touying/docs/integration/cetz#only-and-uncover","content":" In fact, we can also use only and uncover within CeTZ, but it requires a bit of technique:  #slide(repeat: 3, self =&gt; [ #let (uncover, only) = utils.methods(self) Cetz in Touying in subslide #self.subslide: #cetz.canvas({ import cetz.draw: * let self = (self.methods.update-cover)(self: self, hide.with(bounds: true)) let (uncover,) = utils.methods(self) rect((0,0), (5,5)) uncover(&quot;2-3&quot;, { rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) }) only(3, line((0,0), (2.5, 2.5), name: &quot;line&quot;)) }) ])  ","version":"0.4.2","tagName":"h2"},{"title":"Fletcher","type":0,"sectionRef":"#","url":"/touying/docs/integration/fletcher","content":"Fletcher Touying provides the touying-reducer, which adds pause and meanwhile animations to Fletcher. An example: #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;@preview/cetz:0.2.2&quot; #import &quot;@preview/fletcher:0.4.4&quot; as fletcher: node, edge // cetz and fletcher bindings for touying #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: fletcher.diagram, cover: fletcher.hide) #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides.with(title-slide: false, outline-slide: false) // cetz animation #slide[ Cetz in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) ] // fletcher animation #slide[ Fletcher in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) ] ","keywords":"","version":"0.4.2"},{"title":"Ctheorems","type":0,"sectionRef":"#","url":"/touying/docs/integration/ctheorems","content":"Ctheorems Touying can work seamlessly with the ctheorems package, allowing you to directly use the ctheorems package. Moreover, you can utilize #let s = (s.methods.numbering)(self: s, section: &quot;1.&quot;, &quot;1.1&quot;) to set numbering for sections and subsections. #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;@preview/ctheorems:1.1.2&quot;: * // Register university theme #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;) // Set the numbering of section and subsection #let s = (s.methods.numbering)(self: s, section: &quot;1.&quot;, &quot;1.1&quot;) // Theorems configuration by ctheorems #show: thmrules.with(qed-symbol: $square$) #let theorem = thmbox(&quot;theorem&quot;, &quot;Theorem&quot;, fill: rgb(&quot;#eeffee&quot;)) #let corollary = thmplain( &quot;corollary&quot;, &quot;Corollary&quot;, base: &quot;theorem&quot;, titlefmt: strong ) #let definition = thmbox(&quot;definition&quot;, &quot;Definition&quot;, inset: (x: 1.2em, top: 1em)) #let example = thmplain(&quot;example&quot;, &quot;Example&quot;).with(numbering: none) #let proof = thmproof(&quot;proof&quot;, &quot;Proof&quot;) // Extract methods #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert // Extract slide functions #let (slide, empty-slide) = utils.slides(s) #show: slides = Theorems == Prime numbers #definition[ A natural number is called a #highlight[_prime number_] if it is greater than 1 and cannot be written as the product of two smaller natural numbers. ] #example[ The numbers $2$, $3$, and $17$ are prime. @cor_largest_prime shows that this list is not exhaustive! ] #theorem(&quot;Euclid&quot;)[ There are infinitely many primes. ] #proof[ Suppose to the contrary that $p_1, p_2, dots, p_n$ is a finite enumeration of all primes. Set $P = p_1 p_2 dots p_n$. Since $P + 1$ is not in our list, it cannot be prime. Thus, some prime factor $p_j$ divides $P + 1$. Since $p_j$ also divides $P$, it must divide the difference $(P + 1) - P = 1$, a contradiction. ] #corollary[ There is no largest prime number. ] &lt;cor_largest_prime&gt; #corollary[ There are infinitely many composite numbers. ] #theorem[ There are arbitrarily long stretches of composite numbers. ] #proof[ For any $n &gt; 2$, consider $ n! + 2, quad n! + 3, quad ..., quad n! + n #qedhere $ ] ","keywords":"","version":"0.4.2"},{"title":"MiTeX","type":0,"sectionRef":"#","url":"/touying/docs/integration/mitex","content":"MiTeX During the process of creating slides, we often already have a LaTeX math equation that we simply want to paste into the slides without transcribing it into a Typst math equation. In such cases, we can use MiTeX. Example: #import &quot;@preview/mitex:0.2.3&quot;: * Write inline equations like #mi(&quot;x&quot;) or #mi[y]. Also block equations (this case is from #text(blue.lighten(20%), link(&quot;https://katex.org/&quot;)[katex.org])): #mitex(` \\newcommand{\\f}[2]{#1f(#2)} \\f\\relax{x} = \\int_{-\\infty}^\\infty \\f\\hat\\xi\\,e^{2 \\pi i \\xi x} \\,d\\xi `) Touying also provides a touying-mitex function, which can be used for example #touying-mitex(mitex, ` f(x) &amp;= \\pause x^2 + 2x + 1 \\\\ &amp;= \\pause (x + 1)^2 \\\\ `) ","keywords":"","version":"0.4.2"},{"title":"Global Settings","type":0,"sectionRef":"#","url":"/touying/docs/global-settings","content":"","keywords":"","version":"0.4.2"},{"title":"Global Styles​","type":1,"pageTitle":"Global Settings","url":"/touying/docs/global-settings#global-styles","content":" For Touying, global styles refer to set rules or show rules that need to be applied everywhere, such as #set text(size: 20pt).  Themes in Touying encapsulate some of their own global styles, which are placed in #show: init. For example, the university theme encapsulates the following:  self.methods.init = (self: none, body) =&gt; { set text(size: 25pt) show footnote.entry: set text(size: .6em) body }   If you are not a theme creator but want to add your own global styles to your slides, you can simply place them after #show: init and before #show: slides. For example, the metropolis theme recommends adding the following global styles:  #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init // global styles #set text(font: &quot;Fira Sans&quot;, weight: &quot;light&quot;, size: 20pt) #show math.equation: set text(font: &quot;Fira Math&quot;) #set strong(delta: 100) #set par(justify: true) #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides   However, note that you should not use #set page(..). Instead, modify s.page-args and s.padding, for example:  #(s.page-args += ( margin: (x: 0em, y: 2em), header: align(top)[Header], footer: align(bottom)[Footer], header-ascent: 0em, footer-descent: 0em, )) #(s.padding += (x: 4em, y: 0em))   ","version":"0.4.2","tagName":"h2"},{"title":"Global Information​","type":1,"pageTitle":"Global Settings","url":"/touying/docs/global-settings#global-information","content":" Like Beamer, Touying, through an OOP-style unified API design, can help you better maintain global information, allowing you to easily switch between different themes. Global information is a typical example of this.  You can set the title, subtitle, author, date, and institution information for slides using:  #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], )   In subsequent slides, you can access them through s.info or self.info.  This information is generally used in the title-slide, header, and footer of the theme, for example:  #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution)   The date can accept datetime format or content format, and the display format for the datetime format can be changed using:  #let s = (s.methods.datetime-format)(self: s, &quot;[year]-[month]-[day]&quot;)   Principle Here, we will introduce a bit of OOP concept in Touying. You should know that Typst is a typesetting language that supports incremental rendering, which means Typst caches the results of previous function calls. This requires that Typst consists of pure functions, meaning functions that do not change external variables. Thus, it is challenging to modify a global variable in the true sense, even with the use of state or counter. This would require the use of locate with callback functions to obtain the values inside, and this approach would have a significant impact on performance. Touying does not use state or counter and does not violate the principle of pure functions in Typst. Instead, it uses a clever approach in an object-oriented style, maintaining a global singleton s. In Touying, an object refers to a Typst dictionary with its own member variables and methods. We agree that methods all have a named parameter self for passing the object itself, and methods are placed in the .methods domain. With this concept, it becomes easier to write methods to update info: #let s = ( info: (:), methods: ( // update info info: (self: none, ..args) =&gt; { self.info += args.named() self }, ) ) #let s = (s.methods.info)(self: s, title: [title]) Title is #s.info.title Now you can understand the purpose of the utils.methods() function: to bind self to all methods of s and return it, simplifying the subsequent usage through unpacking syntax. #let (init, slides, alert) = utils.methods(s)   ","version":"0.4.2","tagName":"h2"},{"title":"State Initialization​","type":1,"pageTitle":"Global Settings","url":"/touying/docs/global-settings#state-initialization","content":" In general, the two ways mentioned above are sufficient for adding global settings. However, there are still situations where we need to initialize counters or states. If you place this code before #show: slides, a blank page will be created, which is something we don't want to see. In such cases, you can use the s.methods.append-preamble method. For example, when using the codly package:  #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;@preview/codly:0.2.0&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.append-preamble)(self: s)[ #codly(languages: ( rust: (name: &quot;Rust&quot;, icon: &quot;\\u{fa53}&quot;, color: rgb(&quot;#CE412B&quot;)), )) ] #let (init, slides) = utils.methods(s) #show heading.where(level: 2): set block(below: 1em) #show: init #show: codly-init.with() #let (slide, empty-slide) = utils.slides(s) #show: slides #slide[ == First slide #raw(lang: &quot;rust&quot;, block: true, `pub fn main() { println!(&quot;Hello, world!&quot;); }`.text) ]     Or when configuring Pdfpc:  // Pdfpc configuration // typst query --root . ./example.typ --field value --one &quot;&lt;pdfpc-file&gt;&quot; &gt; ./example.pdfpc #let s = (s.methods.append-preamble)(self: s, pdfpc.config( duration-minutes: 30, start-time: datetime(hour: 14, minute: 10, second: 0), end-time: datetime(hour: 14, minute: 40, second: 0), last-minutes: 5, note-font-size: 12, disable-markdown: false, default-transition: ( type: &quot;push&quot;, duration-seconds: 2, angle: ltr, alignment: &quot;vertical&quot;, direction: &quot;inward&quot;, ), ))  ","version":"0.4.2","tagName":"h2"},{"title":"Pinit","type":0,"sectionRef":"#","url":"/touying/docs/integration/pinit","content":"","keywords":"","version":"0.4.2"},{"title":"Simple Example​","type":1,"pageTitle":"Pinit","url":"/touying/docs/integration/pinit#simple-example","content":" #import &quot;@preview/pinit:0.1.3&quot;: * #set text(size: 24pt) A simple #pin(1)highlighted text#pin(2). #pinit-highlight(1, 2) #pinit-point-from(2)[It is simple.]     Another example:    ","version":"0.4.2","tagName":"h2"},{"title":"Complex Example​","type":1,"pageTitle":"Pinit","url":"/touying/docs/integration/pinit#complex-example","content":"   An example of shared usage with Touying:  #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;@preview/pinit:0.1.3&quot;: * #(s.page-args.paper = &quot;presentation-4-3&quot;) #let (init, slides) = utils.methods(s) #show: init #set text(size: 20pt, font: &quot;Calibri&quot;, ligatures: false) #show heading: set text(weight: &quot;regular&quot;) #show heading: set block(above: 1.4em, below: 1em) #show heading.where(level: 1): set text(size: 1.5em) // Useful functions #let crimson = rgb(&quot;#c00000&quot;) #let greybox(..args, body) = rect(fill: luma(95%), stroke: 0.5pt, inset: 0pt, outset: 10pt, ..args, body) #let redbold(body) = { set text(fill: crimson, weight: &quot;bold&quot;) body } #let blueit(body) = { set text(fill: blue) body } #let (slide, empty-slide) = utils.slides(s) #show: slides // Main body #slide(self =&gt; [ #let (uncover, only) = utils.methods(self) = Asymptotic Notation: $O$ Use #pin(&quot;h1&quot;)asymptotic notations#pin(&quot;h2&quot;) to describe asymptotic efficiency of algorithms. (Ignore constant coefficients and lower-order terms.) #pause #greybox[ Given a function $g(n)$, we denote by $O(g(n))$ the following *set of functions*: #redbold(${f(n): &quot;exists&quot; c &gt; 0 &quot;and&quot; n_0 &gt; 0, &quot;such that&quot; f(n) &lt;= c dot g(n) &quot;for all&quot; n &gt;= n_0}$) ] #pinit-highlight(&quot;h1&quot;, &quot;h2&quot;) #pause $f(n) = O(g(n))$: #pin(1)$f(n)$ is *asymptotically smaller* than $g(n)$.#pin(2) // #absolute-place(dx: 550pt, dy: 320pt, image(width: 25%, &quot;asymptotic.png&quot;)) #pause $f(n) redbold(in) O(g(n))$: $f(n)$ is *asymptotically* #redbold[at most] $g(n)$. #only(&quot;4-&quot;, pinit-line(stroke: 3pt + crimson, start-dy: -0.25em, end-dy: -0.25em, 1, 2)) #pause #block[Insertion Sort as an #pin(&quot;r1&quot;)example#pin(&quot;r2&quot;):] - Best Case: $T(n) approx c n + c' n - c''$ #pin(3) - Worst case: $T(n) approx c n + (c' \\/ 2) n^2 - c''$ #pin(4) #pinit-rect(&quot;r1&quot;, &quot;r2&quot;) #pause #pinit-place(3, dx: 15pt, dy: -15pt)[#redbold[$T(n) = O(n)$]] #pinit-place(4, dx: 15pt, dy: -15pt)[#redbold[$T(n) = O(n)$]] #pause #blueit[Q: Is $n^(3) = O(n^2)$#pin(&quot;que&quot;)? How to prove your answer#pin(&quot;ans&quot;)?] #pause #only(&quot;8-&quot;, pinit-point-to(&quot;que&quot;, fill: crimson, redbold[No.])) #only(&quot;8-&quot;, pinit-point-from(&quot;ans&quot;, body-dx: -150pt)[ Show that the equation $(3/2)^n &gt;= c$ \\ has infinitely many solutions for $n$. ]) ])    ","version":"0.4.2","tagName":"h2"},{"title":"Introduction to Touying","type":0,"sectionRef":"#","url":"/touying/docs/intro","content":"","keywords":"","version":"0.4.2"},{"title":"Why Use Touying​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/intro#why-use-touying","content":" Unlike PowerPoint, Touying is not a &quot;what you see is what you get&quot; tool. You can write your slides in a &quot;content and style separation&quot; manner, especially with Typst, which offers a concise yet powerful syntax, better supporting content like code blocks, mathematical formulas, and theorems. Another advantage is that, with templates, writing slides with Touying is much faster than PowerPoint. Therefore, Touying is more suitable for users with a demand for &quot;research writing.&quot;Compared to Markdown Slides, Touying, relying on Typst, has more powerful typesetting control, such as headers, footers, layout, and convenient custom functions. These are capabilities that Markdown struggles to provide, or does not do well. Additionally, Touying offers #pause and #meanwhile markers, providing more convenient dynamic slide capabilities.Compared to Beamer, Touying has faster compilation speed, a more concise syntax, and simpler theme customization capabilities. Touying's compilation speed can be maintained in milliseconds or tens of milliseconds, compared to Beamer's compilation time of seconds or tens of seconds. Touying's syntax is more concise than Beamer, making it easier to change templates and create your own templates. In terms of features, Touying supports most of Beamer's capabilities and provides some convenient features that Beamer lacks.Compared to Polylux, Touying provides an object-oriented programming (OOP) style syntax, allowing the simulation of &quot;global variables&quot; through a global singleton. This makes it easy to write themes. Touying does not rely on counter and locate to implement #pause, resulting in better performance. Touying is a community-driven project (we welcome more people to join), and it does not overly emphasize maintaining API consistency. Instead, it chooses to maintain documentation for multiple versions, providing more novel yet powerful features.  ","version":"0.4.2","tagName":"h2"},{"title":"About the Name​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/intro#about-the-name","content":" &quot;Touying&quot; is derived from the Chinese word &quot;投影&quot; (tóuyǐng), which means &quot;projection&quot; In English, it also conveys the meaning of a &quot;project&quot;. In comparison, the term &quot;beamer&quot; in LaTeX means a projector in German.  ","version":"0.4.2","tagName":"h2"},{"title":"About the Documentation​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/intro#about-the-documentation","content":" This documentation is powered by Docusaurus. We will maintain English and Chinese versions of the documentation for Touying, and for each major version, we will maintain a documentation copy. This allows you to easily refer to old versions of the Touying documentation and migrate to new versions.  Docusaurus creates a new version:  npm run docusaurus docs:version 0.y.x   ","version":"0.4.2","tagName":"h2"},{"title":"Contribution​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/intro#contribution","content":" Touying is free, open-source, and community-driven. If you're interested, you can visit GitHub anytime and raise issues or submit pull requests. We also welcome you to join the touying-typ organization.  ","version":"0.4.2","tagName":"h2"},{"title":"Gallery​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/intro#gallery","content":" Touying offers a gallery page via wiki, where you can browse elegant slides created by Touying users. You're also encouraged to contribute your own beautiful slides here!  ","version":"0.4.2","tagName":"h2"},{"title":"License​","type":1,"pageTitle":"Introduction to Touying","url":"/touying/docs/intro#license","content":" Touying is released under the MIT license. ","version":"0.4.2","tagName":"h2"},{"title":"Page Layout","type":0,"sectionRef":"#","url":"/touying/docs/layout","content":"","keywords":"","version":"0.4.2"},{"title":"Basic Concepts​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/layout#basic-concepts","content":" To create stylish slides using Typst, it's essential to understand Typst's page model correctly. If you're not concerned with customizing page styles, you can choose to skip this section. However, it's still recommended to go through it.  Let's illustrate Typst's default page model through a specific example.  #let container = rect.with(height: 100%, width: 100%, inset: 0pt) #let innerbox = rect.with(stroke: (dash: &quot;dashed&quot;)) #set text(size: 30pt) #set page( paper: &quot;presentation-16-9&quot;, header: container[#innerbox[Header]], header-ascent: 30%, footer: container[#innerbox[Footer]], footer-descent: 30%, ) #place(top + right)[Margin→] #container[ #container[ #innerbox[Content] ] ]     We need to distinguish the following concepts:  Model: Typst has a model similar to the CSS Box Model, divided into Margin, Padding, and Content. However, padding is not a property of set page(..) but is obtained by manually adding #pad(..).Margin: Margins are the edges of the page, divided into top, bottom, left, and right. They are the core of Typst's page model, and all other properties are influenced by margins, especially Header and Footer. Header and Footer are actually located within the Margin.Header: The Header is the content at the top of the page, divided into container and innerbox. We can observe that the edge of the header container and padding does not align but has some space in between, which is actually header-ascent: 30%, where the percentage is relative to the margin-top. Additionally, we notice that the header innerbox is actually located at the bottom left corner of the header container, meaning innerbox defaults to #set align(left + bottom).Footer: The Footer is the content at the bottom of the page, similar to the Header but in the opposite direction.Place: The place function enables absolute positioning relative to the parent container without affecting other elements inside the parent container. It allows specifying alignment, dx, and dy, making it suitable for placing decorative elements like logos.  Therefore, to apply Typst to create slides, we only need to set:  #set page( margin: (x: 4em, y: 2em), header: align(top)[Header], footer: align(bottom)[Footer], header-ascent: 0em, footer-descent: 0em, )   However, we still need to address how the header occupies the entire page width. Here, we use negative padding to achieve this. For instance:  #let container = rect.with(stroke: (dash: &quot;dashed&quot;), height: 100%, width: 100%, inset: 0pt) #let innerbox = rect.with(fill: rgb(&quot;#d0d0d0&quot;)) #let margin = (x: 4em, y: 2em) // negative padding for header and footer #let negative-padding = pad.with(x: -margin.x, y: 0em) #set text(size: 30pt) #set page( paper: &quot;presentation-16-9&quot;, margin: margin, header: negative-padding[#container[#align(top)[#innerbox(width: 100%)[Header]]]], header-ascent: 0em, footer: negative-padding[#container[#align(bottom)[#innerbox(width: 100%)[Footer]]]], footer-descent: 0em, ) #place(top + right)[↑Margin→] #container[ #container[ #innerbox[Content] ] ]     ","version":"0.4.2","tagName":"h2"},{"title":"Page Management​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/layout#page-management","content":" Since modifying page parameters using the set page(..) command in Typst creates a new page instead of modifying the current one, Touying chooses to maintain a s.page-args member variable and a s.padding member variable. These parameters are only applied when Touying creates a new slide, so users only need to focus on s.page-args and s.padding.  For example, the previous example can be modified as follows:  #(s.page-args += ( margin: (x: 4em, y: 2em), header: align(top)[Header], footer: align(bottom)[Footer], header-ascent: 0em, footer-descent: 0em, ))   Touying automatically detects the value of margin.x and adds negative padding to the header if self.full-header == true.  Similarly, if you're unsatisfied with the header or footer style of a particular theme, you can change it using:  #(s.page-args.footer = [Custom Footer])   However, it's essential to note that if you change page parameters in this way, you need to place it before #let (slide, empty-slide) = utils.slides(s), or you'll have to call #let (slide, empty-slide) = utils.slides(s) again.  Warning Therefore, you should not use the set page(..) command directly but instead modify the s.page-args member variable internally.  This approach also allows us to query the current page parameters in real-time using s.page-args, which is useful for functions that need to obtain margins or the current page's background color, such as transparent-cover. This is partially equivalent to context get rule and is actually more convenient to use.  ","version":"0.4.2","tagName":"h2"},{"title":"Application: Adding a Logo​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/layout#application-adding-a-logo","content":" Adding a logo to slides is a very common but also a very versatile requirement. The difficulty lies in the fact that the required size and position of the logo often vary from person to person. Therefore, most of Touying's themes do not include configuration options for logos. But with the concepts of page layout mentioned in this section, we know that we can use the place function in the header or footer to place a logo image.  For example, suppose we decide to add the GitHub icon to the metropolis theme. We can implement it like this:  #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;@preview/octique:0.1.0&quot;: * #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;) #(s.page-args.header = self =&gt; { // display the original header utils.call-or-display(self, s.page-args.header) // place logo at the top-right place(top + right, dx: -0.5em, dy: 0.3em)[ #octique(&quot;mark-github&quot;, color: rgb(&quot;#fafafa&quot;), width: 1.5em, height: 1.5em) ] }) #let (init, slide) = utils.methods(s) #show: init #slide(title: [Title])[ Logo example. ]     Here, utils.call-or-display(self, body) can be used to display body as content or a callback function in the form self =&gt; content.  ","version":"0.4.2","tagName":"h2"},{"title":"Page Columns​","type":1,"pageTitle":"Page Layout","url":"/touying/docs/layout#page-columns","content":" If you need to divide the page into two or three columns, you can use the compose feature provided by the default slide function in Touying. The simplest example is as follows:  #slide[ First column. ][ Second column. ]     If you need to change the way columns are composed, you can modify the composer parameter of slide. The default parameter is utils.side-by-side.with(columns: auto, gutter: 1em). If we want the left column to occupy the remaining width, we can use  #slide(composer: (1fr, auto))[ First column. ][ Second column. ]    ","version":"0.4.2","tagName":"h2"},{"title":"Touying Counters","type":0,"sectionRef":"#","url":"/touying/docs/progress/counters","content":"","keywords":"","version":"0.4.2"},{"title":"Slide Counter​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/progress/counters#slide-counter","content":" You can access the slide counter using states.slide-counter and display the current slide number with states.slide-counter.display().  ","version":"0.4.2","tagName":"h2"},{"title":"Last-Slide Counter​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/progress/counters#last-slide-counter","content":" In some cases, we may need to add an appendix to slides, leading to the requirement to freeze the last-slide counter. Therefore, a second counter is maintained here.  You can use states.last-slide-number to display the number of the last slide before the appendix.  ","version":"0.4.2","tagName":"h2"},{"title":"Progress​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/progress/counters#progress","content":" You can use  #states.touying-progress(ratio =&gt; ..)   to show the current progress.  ","version":"0.4.2","tagName":"h2"},{"title":"Appendix​","type":1,"pageTitle":"Touying Counters","url":"/touying/docs/progress/counters#appendix","content":" You can use  // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide, empty-slide) = utils.methods(s) #slide[ appendix ]   syntax to enter the appendix.  Additionally, #let s = (s.methods.appendix-in-outline)(self: s, false) can be used to hide the appendix section from the outline. ","version":"0.4.2","tagName":"h2"},{"title":"Touying Sections","type":0,"sectionRef":"#","url":"/touying/docs/progress/sections","content":"","keywords":"","version":"0.4.2"},{"title":"touying-outline​","type":1,"pageTitle":"Touying Sections","url":"/touying/docs/progress/sections#touying-outline","content":" #touying-outline(enum-args: (:), padding: 0pt) is used to display a simple outline.  Of course, you can now just use #outline(indent: 2em, title: none).  ","version":"0.4.2","tagName":"h2"},{"title":"touying-final-sections​","type":1,"pageTitle":"Touying Sections","url":"/touying/docs/progress/sections#touying-final-sections","content":" #states.touying-final-sections(final-sections =&gt; ..) is used to customize the display of the outline.  ","version":"0.4.2","tagName":"h2"},{"title":"touying-progress-with-sections​","type":1,"pageTitle":"Touying Sections","url":"/touying/docs/progress/sections#touying-progress-with-sections","content":" #states.touying-progress-with-sections((current-sections: .., final-sections: .., current-slide-number: .., last-slide-number: ..) =&gt; ..)   This is the most powerful one, allowing you to build any complex progress display with its functionalities. ","version":"0.4.2","tagName":"h2"},{"title":"Multi-File Architecture","type":0,"sectionRef":"#","url":"/touying/docs/multi-file","content":"","keywords":"","version":"0.4.2"},{"title":"Configuration and Content Separation​","type":1,"pageTitle":"Multi-File Architecture","url":"/touying/docs/multi-file#configuration-and-content-separation","content":" A simple Touying multi-file architecture consists of three files: a global configuration file globals.typ, a main entry file main.typ, and a content file content.typ for storing the actual content.  These three files are separated to allow both main.typ and content.typ to import globals.typ without causing circular references.  globals.typ can be used to store some global custom functions and initialize Touying themes:  // globals.typ #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.numbering)(self: s, section: &quot;1.&quot;, &quot;1.1&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #let (slide, empty-slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) // as well as some utility functions   main.typ, as the main entry point of the project, applies show rules by importing globals.typ and includes content.typ using #include:  // main.typ #import &quot;/globals.typ&quot;: * #show: init #show strong: alert #show: slides #include &quot;content.typ&quot;   content.typ is where you write the actual content:  // content.typ #import &quot;/globals.typ&quot;: * = The Section == Slide Title Hello, Touying! #focus-slide[ Focus on me. ]   ","version":"0.4.2","tagName":"h2"},{"title":"Multiple Sections​","type":1,"pageTitle":"Multi-File Architecture","url":"/touying/docs/multi-file#multiple-sections","content":" Implementing multiple sections is also straightforward. You only need to create a sections directory and move the content.typ file to the sections.typ directory, for example:  // main.typ #import &quot;/globals.typ&quot;: * #show: init #show strong: alert #show: slides #include &quot;sections/content.typ&quot; // #include &quot;sections/another-section.typ&quot;   And  // sections/content.typ #import &quot;/globals.typ&quot;: * = The Section == Slide Title Hello, Touying! #focus-slide[ Focus on me. ]   Now, you have learned how to use Touying to achieve a multi-file architecture for large-scale slides. ","version":"0.4.2","tagName":"h2"},{"title":"Sections and Subsections","type":0,"sectionRef":"#","url":"/touying/docs/sections","content":"","keywords":"","version":"0.4.2"},{"title":"Structure​","type":1,"pageTitle":"Sections and Subsections","url":"/touying/docs/sections#structure","content":" Similar to Beamer, Touying also has the concept of sections and subsections.  Generally, level 1, level 2, and level 3 headings correspond to section, subsection, and title, respectively, as in the dewdrop theme.  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.dewdrop.register() #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Section == Subsection === Title Hello, Touying!     However, often we don't need subsections, and we can use level 1 and level 2 headings to correspond to section and title, as in the university theme.  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.university.register() #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides = Section == Title Hello, Touying!     In fact, we can control this behavior through the slide-level parameter of the slides function. slide-level represents the complexity of the nested structure, starting from 0. For example, #show: slides.with(slide-level: 2) is equivalent to the section, subsection, and title structure; while #show: slides.with(slide-level: 1) is equivalent to the section and title structure.  ","version":"0.4.2","tagName":"h2"},{"title":"Numbering​","type":1,"pageTitle":"Sections and Subsections","url":"/touying/docs/sections#numbering","content":" To add numbering to sections and subsections, we simply use:  #let s = (s.methods.numbering)(self: s, section: &quot;1.&quot;, &quot;1.1&quot;)   This sets the default numbering to 1.1, with the section corresponding to 1..  ","version":"0.4.2","tagName":"h2"},{"title":"Table of Contents​","type":1,"pageTitle":"Sections and Subsections","url":"/touying/docs/sections#table-of-contents","content":" Displaying a table of contents in Touying is straightforward:  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.simple.register() #let (init, slides, alert, touying-outline) = utils.methods(s) #show: init #let (slide, empty-slide) = utils.slides(s) #show: slides.with(slide-level: 2) = Section == Subsection === Title ==== Table of contents #touying-outline()     Where the definition of touying-outline() is:  #let touying-outline(enum-args: (:), padding: 0pt) = { .. }   You can modify the parameters of the internal enum through enum-args.  Of course, you can also use Typst's native outline:  #outline(title: none, indent: 2em)     If you have complex custom requirements for the table of contents, you can use:  #states.touying-final-sections(sections =&gt; ..)   As done in the dewdrop theme. ","version":"0.4.2","tagName":"h2"},{"title":"Aqua Theme","type":0,"sectionRef":"#","url":"/touying/docs/themes/aqua","content":"","keywords":"","version":"0.4.2"},{"title":"Initialization​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/themes/aqua#initialization","content":" You can initialize it with the following code:  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.aqua.register(aspect-ratio: &quot;16-9&quot;, lang: &quot;en&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, outline-slide, focus-slide) = utils.slides(s) #show: slides   Where register takes parameters:  aspect-ratio: The aspect ratio of slides, either &quot;16-9&quot; or &quot;4-3&quot;, default is &quot;16-9&quot;.footer: Content shown on the right side of the footer, default is states.slide-counter.display().lang: Language configuration, currently supports &quot;en&quot; and &quot;zh&quot;, default is &quot;en&quot;.  Aqua theme also provides an #alert[..] function, which you can utilize with #show strong: alert using *alert text* syntax.  ","version":"0.4.2","tagName":"h2"},{"title":"Color Themes​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/themes/aqua#color-themes","content":" Aqua by default uses:  #let s = (s.methods.colors)( self: s, primary: rgb(&quot;#003F88&quot;), primary-light: rgb(&quot;#2159A5&quot;), primary-lightest: rgb(&quot;#F2F4F8&quot;),   color themes, which you can modify by #let s = (s.methods.colors)(self: s, ..).  ","version":"0.4.2","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/themes/aqua#slide-function-family","content":" Aqua theme offers a series of custom slide functions:  #title-slide(..args)   title-slide will read information from self.info for display.    #let outline-slide(self: none, enum-args: (:), leading: 50pt)   Display an outline slide.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // Aqua theme title: auto, )[ ... ]   A default ordinary slide function with title and footer, where title defaults to the current section title.    #focus-slide[ ... ]   Used to draw the audience's attention. The background color is self.colors.primary.    #new-section-slide(title)   Start a new section with the given title.  ","version":"0.4.2","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/themes/aqua#slides-function","content":" The slides function has parameters:  title-slide: Default is true.outline-slide: Default is true.slide-level: Default is 1.  They can be set via #show: slides.with(..).  PS: The outline title can be modified via #(s.outline-title = [Outline]).  Additionally, you can disable the automatic inclusion of new-section-slide functionality by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.aqua.register(aspect-ratio: &quot;16-9&quot;, lang: &quot;en&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, outline-slide, focus-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.4.2","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Aqua Theme","url":"/touying/docs/themes/aqua#example","content":" #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.aqua.register(aspect-ratio: &quot;16-9&quot;, lang: &quot;en&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, outline-slide, focus-slide) = utils.slides(s) #show: slides = The Section == Slide Title #slide[ #lorem(40) ] #focus-slide[ Another variant with primary color in background... ] == Summary #align(center + horizon)[ #set text(size: 3em, weight: &quot;bold&quot;, s.colors.primary) THANKS FOR ALL ]  ","version":"0.4.2","tagName":"h2"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/touying/docs/start","content":"","keywords":"","version":"0.4.2"},{"title":"More Complex Examples​","type":1,"pageTitle":"Getting Started","url":"/touying/docs/start#more-complex-examples","content":" In fact, Touying provides various styles for slide writing. You can also use the #slide[..] syntax to access more powerful features provided by Touying.    Touying offers many built-in themes to easily create beautiful slides. For example, in this case:  #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;)   you can use the university theme. For more detailed tutorials on themes, you can refer to the following sections.  #import &quot;@preview/touying:0.4.2&quot;: * #import &quot;@preview/cetz:0.2.2&quot; #import &quot;@preview/fletcher:0.4.4&quot; as fletcher: node, edge #import &quot;@preview/ctheorems:1.1.2&quot;: * // cetz and fletcher bindings for touying #let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true)) #let fletcher-diagram = touying-reducer.with(reduce: fletcher.diagram, cover: fletcher.hide) // Register university theme // You can replace it with other themes and it can still work normally #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) // Set the numbering of section and subsection #let s = (s.methods.numbering)(self: s, section: &quot;1.&quot;, &quot;1.1&quot;) // Set the speaker notes configuration // #let s = (s.methods.show-notes-on-second-screen)(self: s, right) // Global information configuration #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) // Pdfpc configuration // typst query --root . ./example.typ --field value --one &quot;&lt;pdfpc-file&gt;&quot; &gt; ./example.pdfpc #let s = (s.methods.append-preamble)(self: s, pdfpc.config( duration-minutes: 30, start-time: datetime(hour: 14, minute: 10, second: 0), end-time: datetime(hour: 14, minute: 40, second: 0), last-minutes: 5, note-font-size: 12, disable-markdown: false, default-transition: ( type: &quot;push&quot;, duration-seconds: 2, angle: ltr, alignment: &quot;vertical&quot;, direction: &quot;inward&quot;, ), )) // Theorems configuration by ctheorems #show: thmrules.with(qed-symbol: $square$) #let theorem = thmbox(&quot;theorem&quot;, &quot;Theorem&quot;, fill: rgb(&quot;#eeffee&quot;)) #let corollary = thmplain( &quot;corollary&quot;, &quot;Corollary&quot;, base: &quot;theorem&quot;, titlefmt: strong ) #let definition = thmbox(&quot;definition&quot;, &quot;Definition&quot;, inset: (x: 1.2em, top: 1em)) #let example = thmplain(&quot;example&quot;, &quot;Example&quot;).with(numbering: none) #let proof = thmproof(&quot;proof&quot;, &quot;Proof&quot;) // Extract methods #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert // Extract slide functions #let (slide, empty-slide) = utils.slides(s) #show: slides = Animation == Simple Animation We can use `#pause` to #pause display something later. #pause Just like this. #meanwhile Meanwhile, #pause we can also use `#meanwhile` to #pause display other content synchronously. #speaker-note[ + This is a speaker note. + You won't see it unless you use `#let s = (s.math.show-notes-on-second-screen)(self: s, right)` ] == Complex Animation - Mark-Style At subslide #utils.touying-wrapper((self: none) =&gt; str(self.subslide)), we can use #uncover(&quot;2-&quot;)[`#uncover` function] for reserving space, use #only(&quot;2-&quot;)[`#only` function] for not reserving space, #alternatives[call `#only` multiple times \\u{2717}][use `#alternatives` function #sym.checkmark] for choosing one of the alternatives. == Complex Animation - Callback-Style #slide(repeat: 3, self =&gt; [ #let (uncover, only, alternatives) = utils.methods(self) At subslide #self.subslide, we can use #uncover(&quot;2-&quot;)[`#uncover` function] for reserving space, use #only(&quot;2-&quot;)[`#only` function] for not reserving space, #alternatives[call `#only` multiple times \\u{2717}][use `#alternatives` function #sym.checkmark] for choosing one of the alternatives. ]) == Math Equation Animation Touying equation with `pause`: #touying-equation(` f(x) &amp;= pause x^2 + 2x + 1 \\ &amp;= pause (x + 1)^2 \\ `) #meanwhile Here, #pause we have the expression of $f(x)$. #pause By factorizing, we can obtain this result. == CeTZ Animation CeTZ Animation in Touying: #cetz-canvas({ import cetz.draw: * rect((0,0), (5,5)) (pause,) rect((0,0), (1,1)) rect((1,1), (2,2)) rect((2,2), (3,3)) (pause,) line((0,0), (2.5, 2.5), name: &quot;line&quot;) }) == Fletcher Animation Fletcher Animation in Touying: #fletcher-diagram( node-stroke: .1em, node-fill: gradient.radial(blue.lighten(80%), blue, center: (30%, 20%), radius: 80%), spacing: 4em, edge((-1,0), &quot;r&quot;, &quot;-|&gt;&quot;, `open(path)`, label-pos: 0, label-side: center), node((0,0), `reading`, radius: 2em), edge((0,0), (0,0), `read()`, &quot;--|&gt;&quot;, bend: 130deg), pause, edge(`read()`, &quot;-|&gt;&quot;), node((1,0), `eof`, radius: 2em), pause, edge(`close()`, &quot;-|&gt;&quot;), node((2,0), `closed`, radius: 2em, extrude: (-2.5, 0)), edge((0,0), (2,0), `close()`, &quot;-|&gt;&quot;, bend: -40deg), ) = Theorems == Prime numbers #definition[ A natural number is called a #highlight[_prime number_] if it is greater than 1 and cannot be written as the product of two smaller natural numbers. ] #example[ The numbers $2$, $3$, and $17$ are prime. @cor_largest_prime shows that this list is not exhaustive! ] #theorem(&quot;Euclid&quot;)[ There are infinitely many primes. ] #proof[ Suppose to the contrary that $p_1, p_2, dots, p_n$ is a finite enumeration of all primes. Set $P = p_1 p_2 dots p_n$. Since $P + 1$ is not in our list, it cannot be prime. Thus, some prime factor $p_j$ divides $P + 1$. Since $p_j$ also divides $P$, it must divide the difference $(P + 1) - P = 1$, a contradiction. ] #corollary[ There is no largest prime number. ] &lt;cor_largest_prime&gt; #corollary[ There are infinitely many composite numbers. ] #theorem[ There are arbitrarily long stretches of composite numbers. ] #proof[ For any $n &gt; 2$, consider $ n! + 2, quad n! + 3, quad ..., quad n! + n #qedhere $ ] = Others == Side-by-side #slide(composer: (1fr, 1fr))[ First column. ][ Second column. ] == Multiple Pages #lorem(200) // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide, empty-slide) = utils.slides(s) == Appendix #slide[ Please pay attention to the current slide number. ]     Touying offers many built-in themes to easily create beautiful slides. For example, in this case:  #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;)   you can use the university theme. For more detailed tutorials on themes, you can refer to the following sections. ","version":"0.4.2","tagName":"h2"},{"title":"Dewdrop Theme","type":0,"sectionRef":"#","url":"/touying/docs/themes/dewdrop","content":"","keywords":"","version":"0.4.2"},{"title":"Initialization​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/themes/dewdrop#initialization","content":" You can initialize it using the following code:  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.dewdrop.register( aspect-ratio: &quot;16-9&quot;, footer: [Dewdrop], navigation: &quot;mini-slides&quot;, // navigation: &quot;sidebar&quot;, // navigation: none, ) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides   The register function takes the following parameters:  aspect-ratio: The aspect ratio of the slides, either &quot;16-9&quot; or &quot;4-3,&quot; defaulting to &quot;16-9.&quot;navigation: The navigation bar style, which can be &quot;sidebar&quot;, &quot;mini-slides&quot;, or none, defaulting to &quot;sidebar&quot;.sidebar: Sidebar navigation settings, defaulting to (width: 10em).mini-slides: Mini-slides settings, defaulting to (height: 2em, x: 2em, section: false, subsection: true). height: The height of mini-slides, defaulting to 2em.x: Padding on the x-axis for mini-slides, defaulting to 2em.section: Whether to display slides after the section and before the subsection, defaulting to false.subsection: Whether to split mini-slides based on subsections or compress them into one line, defaulting to true. footer: Content displayed in the footer, defaulting to [], or it can be passed as a function like self =&gt; self.info.author.footer-right: Content displayed on the right side of the footer, defaulting to states.slide-counter.display() + &quot; / &quot; + states.last-slide-number.primary: Primary color, defaulting to rgb(&quot;#0c4842&quot;).alpha: Transparency, defaulting to 70%.  The Dewdrop theme also provides an #alert[..] function, which you can use with #show strong: alert using the *alert text* syntax.  ","version":"0.4.2","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/themes/dewdrop#color-theme","content":" Dewdrop uses the following default color theme:  #let s = (s.methods.colors)( self: s, neutral-darkest: rgb(&quot;#000000&quot;), neutral-dark: rgb(&quot;#202020&quot;), neutral-light: rgb(&quot;#f3f3f3&quot;), neutral-lightest: rgb(&quot;#ffffff&quot;), primary: primary, )   You can modify this color theme using #let s = (s.methods.colors)(self: s, ..).  ","version":"0.4.2","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/themes/dewdrop#slide-function-family","content":" The Dewdrop theme provides a variety of custom slide functions:  #title-slide(extra: none, ..args)   title-slide reads information from self.info for display, and you can also pass in an extra parameter to display additional information.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // Dewdrop theme footer: auto, )[ ... ]   A default slide with navigation and footer, where the footer is what you set.    #focus-slide[ ... ]   Used to draw attention, with the background color set to self.colors.primary.  ","version":"0.4.2","tagName":"h2"},{"title":"Special Functions​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/themes/dewdrop#special-functions","content":" #d-outline(enum-args: (:), list-args: (:), cover: true)   Displays the current table of contents. The cover parameter specifies whether to hide sections in an inactive state.    #d-sidebar()   An internal function used to display the sidebar.    #d-mini-slides()   An internal function used to display mini-slides.  ","version":"0.4.2","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/themes/dewdrop#slides-function","content":" The slides function has the following parameters:  title-slide: Defaults to true.outline-slide: Defaults to true.slide-level: Defaults to 2.  You can set these using #show: slides.with(..).  PS: You can modify the outline title using #(s.outline-title = [Outline]).  And the function of automatically adding new-section-slide can be turned off by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.dewdrop.register(aspect-ratio: &quot;16-9&quot;, footer: [Dewdrop]) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.4.2","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Dewdrop Theme","url":"/touying/docs/themes/dewdrop#example","content":" #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.dewdrop.register( aspect-ratio: &quot;16-9&quot;, footer: [Dewdrop], navigation: &quot;mini-slides&quot;, // navigation: none, ) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides = Section A == Subsection A.1 #slide[ A slide with equation: $ x_(n+1) = (x_n + a/x_n) / 2 $ ] == Subsection A.2 #slide[ A slide without a title but with *important* infos ] = Section B == Subsection B.1 #slide[ #lorem(80) ] #focus-slide[ Wake up! ] == Subsection B.2 #slide[ We can use `#pause` to #pause display something later. #pause Just like this. #meanwhile Meanwhile, #pause we can also use `#meanwhile` to #pause display other content synchronously. ] // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide, empty-slide) = utils.slides(s) = Appendix === Appendix #slide[ Please pay attention to the current slide number. ]  ","version":"0.4.2","tagName":"h2"},{"title":"Metropolis Theme","type":0,"sectionRef":"#","url":"/touying/docs/themes/metropolis","content":"","keywords":"","version":"0.4.2"},{"title":"Initialization​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/themes/metropolis#initialization","content":" You can initialize it using the following code:  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides   The register function takes the following parameters:  aspect-ratio: The aspect ratio of the slides, either &quot;16-9&quot; or &quot;4-3,&quot; defaulting to &quot;16-9.&quot;header: Content displayed in the header, defaulting to states.current-section-title, or it can be passed as a function like self =&gt; self.info.title.footer: Content displayed in the footer, defaulting to [], or it can be passed as a function like self =&gt; self.info.author.footer-right: Content displayed on the right side of the footer, defaulting to states.slide-counter.display() + &quot; / &quot; + states.last-slide-number.footer-progress: Whether to show the progress bar at the bottom of the slide, defaulting to true.  The Metropolis theme also provides an #alert[..] function, which you can use with #show strong: alert using the *alert text* syntax.  ","version":"0.4.2","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/themes/metropolis#color-theme","content":" Metropolis uses the following default color theme:  #let s = (s.methods.colors)( self: s, neutral-lightest: rgb(&quot;#fafafa&quot;), primary-dark: rgb(&quot;#23373b&quot;), secondary-light: rgb(&quot;#eb811b&quot;), secondary-lighter: rgb(&quot;#d6c6b7&quot;), )   You can modify this color theme using #let s = (s.methods.colors)(self: s, ..).  ","version":"0.4.2","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/themes/metropolis#slide-function-family","content":" The Metropolis theme provides a variety of custom slide functions:  #title-slide(extra: none, ..args)   title-slide reads information from self.info for display, and you can also pass in an extra parameter to display additional information.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // metropolis theme title: auto, footer: auto, align: horizon, )[ ... ]   A default slide with headers and footers, where the title defaults to the current section title, and the footer is what you set.    #focus-slide[ ... ]   Used to draw attention, with the background color set to self.colors.primary-dark.    #new-section-slide(short-title: auto, title)   Creates a new section with the given title.  ","version":"0.4.2","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/themes/metropolis#slides-function","content":" The slides function has the following parameters:  title-slide: Defaults to true.outline-slide: Defaults to true.slide-level: Defaults to 1.  You can set these using #show: slides.with(..).  PS: You can modify the outline title using #(s.outline-title = [Outline]).  And the function of automatically adding new-section-slide can be turned off by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slide, slides, title-slide, new-section-slide, focus-slide, touying-outline, alert) = utils.methods(s) #show: init #show strong: alert #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.4.2","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Metropolis Theme","url":"/touying/docs/themes/metropolis#example","content":" #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.metropolis.register(aspect-ratio: &quot;16-9&quot;, footer: self =&gt; self.info.institution) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #set text(font: &quot;Fira Sans&quot;, weight: &quot;light&quot;, size: 20pt) #show math.equation: set text(font: &quot;Fira Math&quot;) #set strong(delta: 100) #set par(justify: true) #show strong: alert #let (slide, empty-slide, title-slide, new-section-slide, focus-slide) = utils.slides(s) #show: slides = First Section #slide[ A slide without a title but with some *important* information. ] == A long long long long long long long long long long long long long long long long long long long long long long long long Title #slide[ A slide with equation: $ x_(n+1) = (x_n + a/x_n) / 2 $ #lorem(200) ] = Second Section #focus-slide[ Wake up! ] == Simple Animation #slide[ A simple #pause dynamic slide with #alert[alert] #pause text. ] // appendix by freezing last-slide-number #let s = (s.methods.appendix)(self: s) #let (slide, empty-slide) = utils.slides(s) = Appendix #slide[ Appendix. ]  ","version":"0.4.2","tagName":"h2"},{"title":"Simple Theme","type":0,"sectionRef":"#","url":"/touying/docs/themes/simple","content":"","keywords":"","version":"0.4.2"},{"title":"Initialization​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/themes/simple#initialization","content":" You can initialize it using the following code:  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;, footer: [Simple slides]) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide, title-slide, centered-slide, focus-slide) = utils.slides(s) #show: slides   The register function takes the following parameters:  aspect-ratio: The aspect ratio of the slides, either &quot;16-9&quot; or &quot;4-3,&quot; defaulting to &quot;16-9.&quot;footer: Content displayed in the footer, defaulting to [], or it can be passed as a function like self =&gt; self.info.author.footer-right: Content displayed on the right side of the footer, defaulting to states.slide-counter.display() + &quot; / &quot; + states.last-slide-number.background: Background color, defaulting to white.foreground: Text color, defaulting to black.primary: Theme color, defaulting to aqua.darken(50%).  ","version":"0.4.2","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/themes/simple#slide-function-family","content":" The Simple theme provides a variety of custom slide functions:  #centered-slide(section: ..)[ ... ]   A slide with content centered, and the section parameter can be used to create a new section.    #title-slide[ ... ]   Similar to centered-slide, this is provided for consistency with Polylux syntax.    #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // simple theme args footer: auto, )[ ... ]   A default slide with headers and footers, where the header corresponds to the current section, and the footer is what you set.    #focus-slide(foreground: ..., background: ...)[ ... ]   Used to draw attention, it optionally accepts a foreground color (defaulting to white) and a background color (defaulting to auto, i.e., self.colors.primary).  ","version":"0.4.2","tagName":"h2"},{"title":"slides Function​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/themes/simple#slides-function","content":" The slides function has the following parameter:  slide-level: Defaults to 1.  You can set it using #show: slides.with(..).  And the function of automatically adding new-section-slide can be turned off by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;, footer: [Simple slides]) #let s = (s.methods.enable-transparent-cover)(self: s) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide, title-slide, centered-slide, focus-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.4.2","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Simple Theme","url":"/touying/docs/themes/simple#example","content":" #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.simple.register(aspect-ratio: &quot;16-9&quot;, footer: [Simple slides]) #let (init, slides) = utils.methods(s) #show: init #let (slide, empty-slide, title-slide, centered-slide, focus-slide) = utils.slides(s) #show: slides #title-slide[ = Keep it simple! #v(2em) Alpha #footnote[Uni Augsburg] #h(1em) Bravo #footnote[Uni Bayreuth] #h(1em) Charlie #footnote[Uni Chemnitz] #h(1em) July 23 ] == First slide #slide[ #lorem(20) ] #focus-slide[ _Focus!_ This is very important. ] = Let's start a new section! == Dynamic slide #slide[ Did you know that... #pause ...you can see the current section at the top of the slide? ]  ","version":"0.4.2","tagName":"h2"},{"title":"Fit to Height / Width","type":0,"sectionRef":"#","url":"/touying/docs/utilities/fit-to","content":"","keywords":"","version":"0.4.2"},{"title":"Fit to Height​","type":1,"pageTitle":"Fit to Height / Width","url":"/touying/docs/utilities/fit-to#fit-to-height","content":" If you need to make an image fill the remaining slide height, you can try the fit-to-height function:  #utils.fit-to-height(1fr)[BIG]   Function definition:  #let fit-to-height( width: none, prescale-width: none, grow: true, shrink: true, height, body ) = { .. }   Parameters:  width: If specified, this will determine the width of the content after scaling. So, if you want the scaled content to fill half of the slide width, you can use width: 50%.prescale-width: This parameter allows you to make Typst's layout assume that the given content is to be laid out in a container of a certain width before scaling. For example, you can use prescale-width: 200% assuming the slide's width is twice the original.grow: Whether it can grow, default is true.shrink: Whether it can shrink, default is true.height: The specified height.body: The specific content.  ","version":"0.4.2","tagName":"h2"},{"title":"Fit to Width​","type":1,"pageTitle":"Fit to Height / Width","url":"/touying/docs/utilities/fit-to#fit-to-width","content":" If you need to limit the title width to exactly fill the slide width, you can try the fit-to-width function:  #utils.fit-to-width(1fr)[#lorem(20)]   Function definition:  #let fit-to-width(grow: true, shrink: true, width, body) = { .. }   Parameters:  grow: Whether it can grow, default is true.shrink: Whether it can shrink, default is true.width: The specified width.body: The specific content. ","version":"0.4.2","tagName":"h2"},{"title":"Object-Oriented Programming","type":0,"sectionRef":"#","url":"/touying/docs/utilities/oop","content":"Object-Oriented Programming Touying provides some convenient utility functions for object-oriented programming. #let call-or-display(self, it) = { if type(it) == function { return it(self) } else { return it } } Call or display as-is. #let methods(self) = { .. } Used to bind self to methods and return, very commonly used.","keywords":"","version":"0.4.2"},{"title":"University Theme","type":0,"sectionRef":"#","url":"/touying/docs/themes/university","content":"","keywords":"","version":"0.4.2"},{"title":"Initialization​","type":1,"pageTitle":"University Theme","url":"/touying/docs/themes/university#initialization","content":" You can initialize the University theme using the following code:  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) #show: slides   The register function accepts the following parameters:  aspect-ratio: Sets the aspect ratio of the slides to &quot;16-9&quot; or &quot;4-3,&quot; with the default being &quot;16-9.&quot;progress-bar: Controls whether the progress bar at the top of each slide is displayed, with the default being true.display-current-section: Whether to display the current section.footer-columns: The width of the footer in the bottom three columns, the default is (25%, 1fr, 25%).footer-a: The first column, default is self =&gt; self.info.author.footer-b: Second column, default is self =&gt; if self.info.short-title == auto { self.info.title } else { self.info.short-title }.footer-c: third column, default is  self =&gt; { h(1fr) utils.info-date(self) h(1fr) states.slide-counter.display() + &quot; / &quot; + states.last-slide-number h(1fr) }   Additionally, the University theme provides an #alert[..] function, which you can use with the #show strong: alert syntax for emphasizing text with *alert text*.  ","version":"0.4.2","tagName":"h2"},{"title":"Color Theme​","type":1,"pageTitle":"University Theme","url":"/touying/docs/themes/university#color-theme","content":" The University theme defaults to the following color theme:  #let s = (s.methods.colors)( self: s, primary: rgb(&quot;#04364A&quot;), secondary: rgb(&quot;#176B87&quot;), tertiary: rgb(&quot;#448C95&quot;), )   You can modify this color theme using #let s = (s.methods.colors)(self: s, ..).  ","version":"0.4.2","tagName":"h2"},{"title":"Slide Function Family​","type":1,"pageTitle":"University Theme","url":"/touying/docs/themes/university#slide-function-family","content":" The University theme provides a series of custom slide functions:  ","version":"0.4.2","tagName":"h2"},{"title":"Title Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/themes/university#title-slide","content":" #title-slide(logo: none, authors: none, ..args)   The title-slide function reads information from self.info for display. You can also pass the logo parameter and an array-type authors parameter.  ","version":"0.4.2","tagName":"h3"},{"title":"Regular Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/themes/university#regular-slide","content":" #slide( repeat: auto, setting: body =&gt; body, composer: utils.side-by-side, section: none, subsection: none, // university theme title: none, subtitle: none, header: none, footer: auto, )[ ... ]   The default slide function with a title and footer. The title defaults to the current section title, and the footer is set as per your configuration.  ","version":"0.4.2","tagName":"h3"},{"title":"Focus Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/themes/university#focus-slide","content":" #focus-slide(background-img: ..., background-color: ...)[ ... ]   Used to capture the audience's attention. The default background color is self.colors.primary.  ","version":"0.4.2","tagName":"h3"},{"title":"Matrix Slide​","type":1,"pageTitle":"University Theme","url":"/touying/docs/themes/university#matrix-slide","content":" #matrix-slide(columns: ..., rows: ...)[ ... ][ ... ]   Refer to the documentation.  ","version":"0.4.2","tagName":"h3"},{"title":"slides Function​","type":1,"pageTitle":"University Theme","url":"/touying/docs/themes/university#slides-function","content":" The slides function has parameters:  title-slide: Defaults to true.slide-level: Defaults to 1.  You can set these parameters using #show: slides.with(..).  And the function of automatically adding new-section-slide can be turned off by #(s.methods.touying-new-section-slide = none).  #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) #show: slides = Title == First Slide Hello, Touying! #pause Hello, Typst!     ","version":"0.4.2","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"University Theme","url":"/touying/docs/themes/university#example","content":" #import &quot;@preview/touying:0.4.2&quot;: * #let s = themes.university.register(aspect-ratio: &quot;16-9&quot;) #let s = (s.methods.info)( self: s, title: [Title], subtitle: [Subtitle], author: [Authors], date: datetime.today(), institution: [Institution], ) #let (init, slides, touying-outline, alert, speaker-note) = utils.methods(s) #show: init #show strong: alert #let (slide, empty-slide, title-slide, focus-slide, matrix-slide) = utils.slides(s) #show: slides.with(title-slide: false) #title-slide(authors: ([Author A], [Author B])) = The Section == Slide Title #slide[ #lorem(40) ] #slide(subtitle: emph[What is the problem?])[ #lorem(40) ] #focus-slide[ Another variant with primary color in background... ] #matrix-slide[ left ][ middle ][ right ] #matrix-slide(columns: 1)[ top ][ bottom ] #matrix-slide(columns: (1fr, 2fr, 1fr), ..(lorem(8),) * 9)  ","version":"0.4.2","tagName":"h2"}],"options":{"languages":["en","zh"],"id":"default"}}